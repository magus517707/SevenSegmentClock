
KineticClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800baa8  0800baa8  0001baa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc74  0800bc74  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc74  0800bc74  0001bc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc7c  0800bc7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc7c  0800bc7c  0001bc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc80  0800bc80  0001bc80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800bc84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e8  20000070  0800bcf4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000958  0800bcf4  00020958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027300  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048c9  00000000  00000000  000473a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  0004bc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001798  00000000  00000000  0004d640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad63  00000000  00000000  0004edd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020ccb  00000000  00000000  00079b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001053ec  00000000  00000000  0009a806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019fbf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000708c  00000000  00000000  0019fc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ba90 	.word	0x0800ba90

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800ba90 	.word	0x0800ba90

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b96e 	b.w	8000f50 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468c      	mov	ip, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8083 	bne.w	8000da2 <__udivmoddi4+0x116>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	d947      	bls.n	8000d32 <__udivmoddi4+0xa6>
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	b142      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	f1c2 0020 	rsb	r0, r2, #32
 8000cac:	fa24 f000 	lsr.w	r0, r4, r0
 8000cb0:	4091      	lsls	r1, r2
 8000cb2:	4097      	lsls	r7, r2
 8000cb4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc4:	fa1f fe87 	uxth.w	lr, r7
 8000cc8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 8119 	bcs.w	8000f14 <__udivmoddi4+0x288>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8116 	bls.w	8000f14 <__udivmoddi4+0x288>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	443b      	add	r3, r7
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	f080 8105 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f240 8102 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000d14:	3802      	subs	r0, #2
 8000d16:	443c      	add	r4, r7
 8000d18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1c:	eba4 040e 	sub.w	r4, r4, lr
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	b902      	cbnz	r2, 8000d36 <__udivmoddi4+0xaa>
 8000d34:	deff      	udf	#255	; 0xff
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d150      	bne.n	8000de0 <__udivmoddi4+0x154>
 8000d3e:	1bcb      	subs	r3, r1, r7
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	fa1f f887 	uxth.w	r8, r7
 8000d48:	2601      	movs	r6, #1
 8000d4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4e:	0c21      	lsrs	r1, r4, #16
 8000d50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb08 f30c 	mul.w	r3, r8, ip
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0xe2>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	f200 80e9 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1ac9      	subs	r1, r1, r3
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x10c>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x10a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80d9 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e7bf      	b.n	8000d22 <__udivmoddi4+0x96>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0x12e>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80b1 	beq.w	8000f0e <__udivmoddi4+0x282>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x1cc>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0x140>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80b8 	bhi.w	8000f3c <__udivmoddi4+0x2b0>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0103 	sbc.w	r1, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0a8      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000dda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dde:	e7a5      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f603 	lsr.w	r6, r0, r3
 8000de8:	4097      	lsls	r7, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df2:	40d9      	lsrs	r1, r3
 8000df4:	4330      	orrs	r0, r6
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e08:	fb06 f108 	mul.w	r1, r6, r8
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x19c>
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e1a:	f080 808d 	bcs.w	8000f38 <__udivmoddi4+0x2ac>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 808a 	bls.w	8000f38 <__udivmoddi4+0x2ac>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	443b      	add	r3, r7
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b281      	uxth	r1, r0
 8000e2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb00 f308 	mul.w	r3, r0, r8
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x1c4>
 8000e40:	1879      	adds	r1, r7, r1
 8000e42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e46:	d273      	bcs.n	8000f30 <__udivmoddi4+0x2a4>
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d971      	bls.n	8000f30 <__udivmoddi4+0x2a4>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4439      	add	r1, r7
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e56:	e778      	b.n	8000d4a <__udivmoddi4+0xbe>
 8000e58:	f1c6 0c20 	rsb	ip, r6, #32
 8000e5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e64:	431c      	orrs	r4, r3
 8000e66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e76:	431f      	orrs	r7, r3
 8000e78:	0c3b      	lsrs	r3, r7, #16
 8000e7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7e:	fa1f f884 	uxth.w	r8, r4
 8000e82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	fa02 f206 	lsl.w	r2, r2, r6
 8000e94:	fa00 f306 	lsl.w	r3, r0, r6
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x220>
 8000e9a:	1861      	adds	r1, r4, r1
 8000e9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea0:	d248      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea2:	458a      	cmp	sl, r1
 8000ea4:	d946      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eaa:	4421      	add	r1, r4
 8000eac:	eba1 010a 	sub.w	r1, r1, sl
 8000eb0:	b2bf      	uxth	r7, r7
 8000eb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ebe:	fb00 f808 	mul.w	r8, r0, r8
 8000ec2:	45b8      	cmp	r8, r7
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x24a>
 8000ec6:	19e7      	adds	r7, r4, r7
 8000ec8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ecc:	d22e      	bcs.n	8000f2c <__udivmoddi4+0x2a0>
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d92c      	bls.n	8000f2c <__udivmoddi4+0x2a0>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4427      	add	r7, r4
 8000ed6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eda:	eba7 0708 	sub.w	r7, r7, r8
 8000ede:	fba0 8902 	umull	r8, r9, r0, r2
 8000ee2:	454f      	cmp	r7, r9
 8000ee4:	46c6      	mov	lr, r8
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	d31a      	bcc.n	8000f20 <__udivmoddi4+0x294>
 8000eea:	d017      	beq.n	8000f1c <__udivmoddi4+0x290>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x27a>
 8000eee:	ebb3 020e 	subs.w	r2, r3, lr
 8000ef2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000efa:	40f2      	lsrs	r2, r6
 8000efc:	ea4c 0202 	orr.w	r2, ip, r2
 8000f00:	40f7      	lsrs	r7, r6
 8000f02:	e9c5 2700 	strd	r2, r7, [r5]
 8000f06:	2600      	movs	r6, #0
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e70b      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f14:	4606      	mov	r6, r0
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fd      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f1c:	4543      	cmp	r3, r8
 8000f1e:	d2e5      	bcs.n	8000eec <__udivmoddi4+0x260>
 8000f20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f24:	eb69 0104 	sbc.w	r1, r9, r4
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e7df      	b.n	8000eec <__udivmoddi4+0x260>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e7d2      	b.n	8000ed6 <__udivmoddi4+0x24a>
 8000f30:	4660      	mov	r0, ip
 8000f32:	e78d      	b.n	8000e50 <__udivmoddi4+0x1c4>
 8000f34:	4681      	mov	r9, r0
 8000f36:	e7b9      	b.n	8000eac <__udivmoddi4+0x220>
 8000f38:	4666      	mov	r6, ip
 8000f3a:	e775      	b.n	8000e28 <__udivmoddi4+0x19c>
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	e74a      	b.n	8000dd6 <__udivmoddi4+0x14a>
 8000f40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f44:	4439      	add	r1, r7
 8000f46:	e713      	b.n	8000d70 <__udivmoddi4+0xe4>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	443c      	add	r4, r7
 8000f4c:	e724      	b.n	8000d98 <__udivmoddi4+0x10c>
 8000f4e:	bf00      	nop

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <init_clock>:
 *      Author: Jonathan
 */
#include "clock.h"

//Initialize the Clock
void init_clock (sgTime *Time){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	Time->sTime.Hours = 0x00; // set hours
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	Time->sTime.Minutes = 0x00; // set minutes
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	705a      	strb	r2, [r3, #1]
	Time->sTime.Seconds = 0x00; // set seconds
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	709a      	strb	r2, [r3, #2]
	Time->sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
	Time->sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
	Time->sTime.TimeFormat = RTC_HOURFORMAT_24;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetTime(&hrtc, &Time->sTime, RTC_FORMAT_BCD);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	4619      	mov	r1, r3
 8000f86:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <init_clock+0x74>)
 8000f88:	f005 ffb8 	bl	8006efc <HAL_RTC_SetTime>
	Time->sDate.WeekDay = RTC_WEEKDAY_THURSDAY; // day
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2204      	movs	r2, #4
 8000f90:	751a      	strb	r2, [r3, #20]
	Time->sDate.Month = RTC_MONTH_JANUARY; // month
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	755a      	strb	r2, [r3, #21]
	Time->sDate.Date = 0x1; // date
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	759a      	strb	r2, [r3, #22]
	Time->sDate.Year = 0x18; // year
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2218      	movs	r2, #24
 8000fa2:	75da      	strb	r2, [r3, #23]
	HAL_RTC_SetDate(&hrtc, &Time->sDate, RTC_FORMAT_BCD);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3314      	adds	r3, #20
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4619      	mov	r1, r3
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <init_clock+0x74>)
 8000fae:	f006 f897 	bl	80070e0 <HAL_RTC_SetDate>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8000fb2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <init_clock+0x74>)
 8000fba:	f006 fa39 	bl	8007430 <HAL_RTCEx_BKUPWrite>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000370 	.word	0x20000370

08000fcc <set_time>:

//Set single time unit
void set_time(sgTime *Time, uint8_t value, uint8_t pos){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	70bb      	strb	r3, [r7, #2]
	get_time(Time);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f877 	bl	80010d0 <get_time>
	switch (pos){
 8000fe2:	78bb      	ldrb	r3, [r7, #2]
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d01e      	beq.n	8001026 <set_time+0x5a>
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	dc28      	bgt.n	800103e <set_time+0x72>
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d002      	beq.n	8000ff6 <set_time+0x2a>
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d00c      	beq.n	800100e <set_time+0x42>
 8000ff4:	e023      	b.n	800103e <set_time+0x72>
	case 1:
		Time->sTime.Hours = value; // set hours
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	78fa      	ldrb	r2, [r7, #3]
 8000ffa:	701a      	strb	r2, [r3, #0]
		Time->sTime.Minutes = Time->gTime.Minutes;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7e5a      	ldrb	r2, [r3, #25]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	705a      	strb	r2, [r3, #1]
		Time->sTime.Seconds = Time->gTime.Seconds;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	7e9a      	ldrb	r2, [r3, #26]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	709a      	strb	r2, [r3, #2]
	break;
 800100c:	e017      	b.n	800103e <set_time+0x72>
	case 2:
		Time->sTime.Hours = Time->gTime.Hours;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7e1a      	ldrb	r2, [r3, #24]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	701a      	strb	r2, [r3, #0]
		Time->sTime.Minutes = value; // set minutes
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	705a      	strb	r2, [r3, #1]
		Time->sTime.Seconds = Time->gTime.Seconds;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7e9a      	ldrb	r2, [r3, #26]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	709a      	strb	r2, [r3, #2]
	break;
 8001024:	e00b      	b.n	800103e <set_time+0x72>
	case 3:
		Time->sTime.Minutes = Time->gTime.Minutes;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7e5a      	ldrb	r2, [r3, #25]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	705a      	strb	r2, [r3, #1]
		Time->sTime.Hours = Time->gTime.Hours;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7e1a      	ldrb	r2, [r3, #24]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	701a      	strb	r2, [r3, #0]
		Time->sTime.Seconds = value; // set seconds
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	78fa      	ldrb	r2, [r7, #3]
 800103a:	709a      	strb	r2, [r3, #2]
	break;
 800103c:	bf00      	nop
	}
	HAL_RTC_SetTime(&hrtc, &Time->sTime, RTC_FORMAT_BCD);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	4619      	mov	r1, r3
 8001044:	4809      	ldr	r0, [pc, #36]	; (800106c <set_time+0xa0>)
 8001046:	f005 ff59 	bl	8006efc <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &Time->sDate, RTC_FORMAT_BCD);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3314      	adds	r3, #20
 800104e:	2201      	movs	r2, #1
 8001050:	4619      	mov	r1, r3
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <set_time+0xa0>)
 8001054:	f006 f844 	bl	80070e0 <HAL_RTC_SetDate>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8001058:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800105c:	2101      	movs	r1, #1
 800105e:	4803      	ldr	r0, [pc, #12]	; (800106c <set_time+0xa0>)
 8001060:	f006 f9e6 	bl	8007430 <HAL_RTCEx_BKUPWrite>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000370 	.word	0x20000370

08001070 <set_time_all>:

//Set total clock
void set_time_all(sgTime *Time, uint8_t h, uint8_t m, uint8_t s){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	4608      	mov	r0, r1
 800107a:	4611      	mov	r1, r2
 800107c:	461a      	mov	r2, r3
 800107e:	4603      	mov	r3, r0
 8001080:	70fb      	strb	r3, [r7, #3]
 8001082:	460b      	mov	r3, r1
 8001084:	70bb      	strb	r3, [r7, #2]
 8001086:	4613      	mov	r3, r2
 8001088:	707b      	strb	r3, [r7, #1]
	Time->sTime.Hours = h; 		// set hours
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	78fa      	ldrb	r2, [r7, #3]
 800108e:	701a      	strb	r2, [r3, #0]
	Time->sTime.Minutes = m;	// set minutes
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	78ba      	ldrb	r2, [r7, #2]
 8001094:	705a      	strb	r2, [r3, #1]
	Time->sTime.Seconds = s;	// set seconds
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	787a      	ldrb	r2, [r7, #1]
 800109a:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(&hrtc, &Time->sTime, RTC_FORMAT_BCD);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	480a      	ldr	r0, [pc, #40]	; (80010cc <set_time_all+0x5c>)
 80010a4:	f005 ff2a 	bl	8006efc <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &Time->sDate, RTC_FORMAT_BCD);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3314      	adds	r3, #20
 80010ac:	2201      	movs	r2, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	4806      	ldr	r0, [pc, #24]	; (80010cc <set_time_all+0x5c>)
 80010b2:	f006 f815 	bl	80070e0 <HAL_RTC_SetDate>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80010b6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80010ba:	2101      	movs	r1, #1
 80010bc:	4803      	ldr	r0, [pc, #12]	; (80010cc <set_time_all+0x5c>)
 80010be:	f006 f9b7 	bl	8007430 <HAL_RTCEx_BKUPWrite>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000370 	.word	0x20000370

080010d0 <get_time>:

void get_time(sgTime *Time){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	/* Get the RTC current Time */
	 HAL_RTC_GetTime(&hrtc, &Time->gTime, RTC_FORMAT_BIN);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3318      	adds	r3, #24
 80010dc:	2200      	movs	r2, #0
 80010de:	4619      	mov	r1, r3
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <get_time+0x2c>)
 80010e2:	f005 ffa1 	bl	8007028 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	 HAL_RTC_GetDate(&hrtc, &Time->gDate, RTC_FORMAT_BIN);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	332c      	adds	r3, #44	; 0x2c
 80010ea:	2200      	movs	r2, #0
 80010ec:	4619      	mov	r1, r3
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <get_time+0x2c>)
 80010f0:	f006 f87c 	bl	80071ec <HAL_RTC_GetDate>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000370 	.word	0x20000370

08001100 <serialTime>:

// Send time over Serial
void serialTime(sgTime *Time){
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b085      	sub	sp, #20
 8001104:	af02      	add	r7, sp, #8
 8001106:	6078      	str	r0, [r7, #4]
	/* Display time Format: hh:mm:ss */
	  sprintf((char*)Time->time,"%02d:%02d:%02d",Time->gTime.Hours, Time->gTime.Minutes, Time->gTime.Seconds);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7e1b      	ldrb	r3, [r3, #24]
 8001112:	461a      	mov	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7e5b      	ldrb	r3, [r3, #25]
 8001118:	4619      	mov	r1, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7e9b      	ldrb	r3, [r3, #26]
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	460b      	mov	r3, r1
 8001122:	490f      	ldr	r1, [pc, #60]	; (8001160 <serialTime+0x60>)
 8001124:	f00a f812 	bl	800b14c <siprintf>
	  //HAL_UART_Transmit(&hlpuart1, (uint8_t*) Time->time, strlen(Time->time), 1000);
	  //HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\n", 1, 1000);
	  HAL_UART_Transmit(&huart4, (uint8_t*) Time->time, strlen(Time->time),1000);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3330      	adds	r3, #48	; 0x30
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f874 	bl	8000220 <strlen>
 8001138:	4603      	mov	r3, r0
 800113a:	b29a      	uxth	r2, r3
 800113c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001140:	4621      	mov	r1, r4
 8001142:	4808      	ldr	r0, [pc, #32]	; (8001164 <serialTime+0x64>)
 8001144:	f007 ff3c 	bl	8008fc0 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t*)"\n", 1, 1000);
 8001148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114c:	2201      	movs	r2, #1
 800114e:	4906      	ldr	r1, [pc, #24]	; (8001168 <serialTime+0x68>)
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <serialTime+0x64>)
 8001152:	f007 ff35 	bl	8008fc0 <HAL_UART_Transmit>
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bd90      	pop	{r4, r7, pc}
 800115e:	bf00      	nop
 8001160:	0800baa8 	.word	0x0800baa8
 8001164:	20000854 	.word	0x20000854
 8001168:	0800bab8 	.word	0x0800bab8

0800116c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001172:	4b38      	ldr	r3, [pc, #224]	; (8001254 <MX_DMA_Init+0xe8>)
 8001174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001176:	4a37      	ldr	r2, [pc, #220]	; (8001254 <MX_DMA_Init+0xe8>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6493      	str	r3, [r2, #72]	; 0x48
 800117e:	4b35      	ldr	r3, [pc, #212]	; (8001254 <MX_DMA_Init+0xe8>)
 8001180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <MX_DMA_Init+0xe8>)
 800118c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800118e:	4a31      	ldr	r2, [pc, #196]	; (8001254 <MX_DMA_Init+0xe8>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6493      	str	r3, [r2, #72]	; 0x48
 8001196:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <MX_DMA_Init+0xe8>)
 8001198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011a2:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <MX_DMA_Init+0xe8>)
 80011a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a6:	4a2b      	ldr	r2, [pc, #172]	; (8001254 <MX_DMA_Init+0xe8>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6493      	str	r3, [r2, #72]	; 0x48
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <MX_DMA_Init+0xe8>)
 80011b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	200b      	movs	r0, #11
 80011c0:	f003 faaf 	bl	8004722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011c4:	200b      	movs	r0, #11
 80011c6:	f003 fac6 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	200c      	movs	r0, #12
 80011d0:	f003 faa7 	bl	8004722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011d4:	200c      	movs	r0, #12
 80011d6:	f003 fabe 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	200d      	movs	r0, #13
 80011e0:	f003 fa9f 	bl	8004722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011e4:	200d      	movs	r0, #13
 80011e6:	f003 fab6 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	200e      	movs	r0, #14
 80011f0:	f003 fa97 	bl	8004722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80011f4:	200e      	movs	r0, #14
 80011f6:	f003 faae 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	200f      	movs	r0, #15
 8001200:	f003 fa8f 	bl	8004722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001204:	200f      	movs	r0, #15
 8001206:	f003 faa6 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2010      	movs	r0, #16
 8001210:	f003 fa87 	bl	8004722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001214:	2010      	movs	r0, #16
 8001216:	f003 fa9e 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2011      	movs	r0, #17
 8001220:	f003 fa7f 	bl	8004722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001224:	2011      	movs	r0, #17
 8001226:	f003 fa96 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2038      	movs	r0, #56	; 0x38
 8001230:	f003 fa77 	bl	8004722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001234:	2038      	movs	r0, #56	; 0x38
 8001236:	f003 fa8e 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel8_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	2060      	movs	r0, #96	; 0x60
 8001240:	f003 fa6f 	bl	8004722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 8001244:	2060      	movs	r0, #96	; 0x60
 8001246:	f003 fa86 	bl	8004756 <HAL_NVIC_EnableIRQ>

}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000

08001258 <TX_Data>:

void TX_Init(void) {
	ringbuff_init(&tx_rb, tx_buffer, TX_BUFF_SIZE);
}

static void TX_Data(void) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
	if (tx_len) return; /*If length > 0, DMA transfer is on-going. This function will be called again at transfer completion */
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <TX_Data+0x48>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d117      	bne.n	8001296 <TX_Data+0x3e>
	tx_len = ringbuff_get_linear_block_read_length(&tx_rb); /*Get maximum length of buffer to read data as linear memory */
 8001266:	480f      	ldr	r0, [pc, #60]	; (80012a4 <TX_Data+0x4c>)
 8001268:	f001 f8c0 	bl	80023ec <ringbuff_get_linear_block_read_length>
 800126c:	4603      	mov	r3, r0
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <TX_Data+0x48>)
 8001272:	701a      	strb	r2, [r3, #0]
	if (tx_len) {
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <TX_Data+0x48>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00d      	beq.n	8001298 <TX_Data+0x40>
		uint8_t *ring_data = ringbuff_get_linear_block_read_address(&tx_rb); /* Get pointer to read memory */
 800127c:	4809      	ldr	r0, [pc, #36]	; (80012a4 <TX_Data+0x4c>)
 800127e:	f001 f88b 	bl	8002398 <ringbuff_get_linear_block_read_address>
 8001282:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit_DMA(&huart4, ring_data, tx_len); /* Start DMA transfer */
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <TX_Data+0x48>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <TX_Data+0x50>)
 8001290:	f007 ff2c 	bl	80090ec <HAL_UART_Transmit_DMA>
 8001294:	e000      	b.n	8001298 <TX_Data+0x40>
	if (tx_len) return; /*If length > 0, DMA transfer is on-going. This function will be called again at transfer completion */
 8001296:	bf00      	nop
	}
}
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000186 	.word	0x20000186
 80012a4:	20000168 	.word	0x20000168
 80012a8:	20000854 	.word	0x20000854

080012ac <TX_Complete>:
void TX_Buffer_Add(const void *data, size_t len) {
	ringbuff_write(&tx_rb, data, len);
	TX_Data();
}

void TX_Complete(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	if (tx_len) {
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <TX_Complete+0x28>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00a      	beq.n	80012ce <TX_Complete+0x22>
		ringbuff_skip(&tx_rb, tx_len); /* Now skip the data (move read pointer) as they were successfully transferred over DMA */
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <TX_Complete+0x28>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <TX_Complete+0x2c>)
 80012c0:	f001 f8d6 	bl	8002470 <ringbuff_skip>
		tx_len = 0; /* Reset length. Implies DMA is not active */
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <TX_Complete+0x28>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
		TX_Data(); /* Try to send more */
 80012ca:	f7ff ffc5 	bl	8001258 <TX_Data>
	}
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000186 	.word	0x20000186
 80012d8:	20000168 	.word	0x20000168

080012dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == LPUART1) {
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_UART_TxCpltCallback+0x38>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d10d      	bne.n	800130a <HAL_UART_TxCpltCallback+0x2e>
		CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); /* Disable TXEIE and TCIE interrupts */
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80012fc:	601a      	str	r2, [r3, #0]
		huart->gState = HAL_UART_STATE_READY; /* TX process is ended, restore huart->gState to Ready */
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2220      	movs	r2, #32
 8001302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		TX_Complete();
 8001306:	f7ff ffd1 	bl	80012ac <TX_Complete>
	}
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40008000 	.word	0x40008000

08001318 <RX_Init>:

void RX_Init(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	ringbuff_init(&rx_rb, rx_buffer, RX_BUFF_SIZE);
 800131c:	2240      	movs	r2, #64	; 0x40
 800131e:	4910      	ldr	r1, [pc, #64]	; (8001360 <RX_Init+0x48>)
 8001320:	4810      	ldr	r0, [pc, #64]	; (8001364 <RX_Init+0x4c>)
 8001322:	f000 fed9 	bl	80020d8 <ringbuff_init>
	rx_last_pos = 0;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <RX_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	801a      	strh	r2, [r3, #0]
	rx_current_pos = 0;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <RX_Init+0x54>)
 800132e:	2200      	movs	r2, #0
 8001330:	801a      	strh	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE); /* Enable idle line interrupt */
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <RX_Init+0x58>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <RX_Init+0x58>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0210 	orr.w	r2, r2, #16
 8001340:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT); /* Disable UART Half RX interrupt */
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <RX_Init+0x5c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <RX_Init+0x5c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0204 	bic.w	r2, r2, #4
 8001350:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart4, rx_buffer, RX_BUFF_SIZE);
 8001352:	2240      	movs	r2, #64	; 0x40
 8001354:	4902      	ldr	r1, [pc, #8]	; (8001360 <RX_Init+0x48>)
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <RX_Init+0x58>)
 8001358:	f007 ff48 	bl	80091ec <HAL_UART_Receive_DMA>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200000e8 	.word	0x200000e8
 8001364:	20000188 	.word	0x20000188
 8001368:	200000a4 	.word	0x200000a4
 800136c:	20000184 	.word	0x20000184
 8001370:	20000854 	.word	0x20000854
 8001374:	200007f4 	.word	0x200007f4

08001378 <RX_Complete>:

void RX_Complete(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
	uint16_t len;
	rx_current_pos = DMA_WRITE_PTR; /* Get current write pointer */
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <RX_Complete+0x6c>)
 8001380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	b29b      	uxth	r3, r3
 8001388:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800138c:	b29b      	uxth	r3, r3
 800138e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001392:	b29a      	uxth	r2, r3
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <RX_Complete+0x70>)
 8001396:	801a      	strh	r2, [r3, #0]
	len = (rx_current_pos - rx_last_pos + RX_BUFF_SIZE) % RX_BUFF_SIZE; /* Calculate how far the DMA write pointer has moved */
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <RX_Complete+0x70>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <RX_Complete+0x74>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	3340      	adds	r3, #64	; 0x40
 80013a6:	425a      	negs	r2, r3
 80013a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80013b0:	bf58      	it	pl
 80013b2:	4253      	negpl	r3, r2
 80013b4:	80fb      	strh	r3, [r7, #6]
	if (len <= RX_MAX_MSG_SIZE) { /* Check message size */
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	2b20      	cmp	r3, #32
 80013ba:	d80f      	bhi.n	80013dc <RX_Complete+0x64>
		ringbuff_advance(&rx_rb, len); /* Move the ring buffer write pointer */
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	4619      	mov	r1, r3
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <RX_Complete+0x78>)
 80013c2:	f001 f8a5 	bl	8002510 <ringbuff_advance>
		rx_last_pos = rx_current_pos;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <RX_Complete+0x70>)
 80013c8:	881a      	ldrh	r2, [r3, #0]
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <RX_Complete+0x74>)
 80013cc:	801a      	strh	r2, [r3, #0]
		ringbuff_read(&rx_rb, process_buffer, len); /* read out the data to an array for processing */
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <RX_Complete+0x7c>)
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <RX_Complete+0x78>)
 80013d6:	f000 fed3 	bl	8002180 <ringbuff_read>
	}
	else while (1);
}
 80013da:	e000      	b.n	80013de <RX_Complete+0x66>
	else while (1);
 80013dc:	e7fe      	b.n	80013dc <RX_Complete+0x64>
}
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000854 	.word	0x20000854
 80013e8:	20000184 	.word	0x20000184
 80013ec:	200000a4 	.word	0x200000a4
 80013f0:	20000188 	.word	0x20000188
 80013f4:	200000a8 	.word	0x200000a8

080013f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_UART_RxCpltCallback+0x2c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d108      	bne.n	800141c <HAL_UART_RxCpltCallback+0x24>
		if (__HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE)) {
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_UART_RxCpltCallback+0x30>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	2b10      	cmp	r3, #16
 8001416:	d101      	bne.n	800141c <HAL_UART_RxCpltCallback+0x24>
			RX_Complete();
 8001418:	f7ff ffae 	bl	8001378 <RX_Complete>
		}
	}
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40004c00 	.word	0x40004c00
 8001428:	20000854 	.word	0x20000854

0800142c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	4b35      	ldr	r3, [pc, #212]	; (8001518 <MX_GPIO_Init+0xec>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	4a34      	ldr	r2, [pc, #208]	; (8001518 <MX_GPIO_Init+0xec>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144e:	4b32      	ldr	r3, [pc, #200]	; (8001518 <MX_GPIO_Init+0xec>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800145a:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <MX_GPIO_Init+0xec>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a2e      	ldr	r2, [pc, #184]	; (8001518 <MX_GPIO_Init+0xec>)
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <MX_GPIO_Init+0xec>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <MX_GPIO_Init+0xec>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	4a28      	ldr	r2, [pc, #160]	; (8001518 <MX_GPIO_Init+0xec>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <MX_GPIO_Init+0xec>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <MX_GPIO_Init+0xec>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	4a22      	ldr	r2, [pc, #136]	; (8001518 <MX_GPIO_Init+0xec>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <MX_GPIO_Init+0xec>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2120      	movs	r1, #32
 80014a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014aa:	f003 fdcb 	bl	8005044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_GPIO_Init+0xf0>)
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4817      	ldr	r0, [pc, #92]	; (8001520 <MX_GPIO_Init+0xf4>)
 80014c4:	f003 fc3c 	bl	8004d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = enc_button_Pin;
 80014c8:	2310      	movs	r3, #16
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(enc_button_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014de:	f003 fc2f 	bl	8004d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014e2:	2320      	movs	r3, #32
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fc:	f003 fc20 	bl	8004d40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2028      	movs	r0, #40	; 0x28
 8001506:	f003 f90c 	bl	8004722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800150a:	2028      	movs	r0, #40	; 0x28
 800150c:	f003 f923 	bl	8004756 <HAL_NVIC_EnableIRQ>

}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	10110000 	.word	0x10110000
 8001520:	48000800 	.word	0x48000800

08001524 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MX_I2C1_Init+0x74>)
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <MX_I2C1_Init+0x78>)
 800152c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60505F8C;
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <MX_I2C1_Init+0x74>)
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <MX_I2C1_Init+0x7c>)
 8001532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <MX_I2C1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <MX_I2C1_Init+0x74>)
 800153c:	2201      	movs	r2, #1
 800153e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_I2C1_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_I2C1_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_I2C1_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_I2C1_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_I2C1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800155e:	480e      	ldr	r0, [pc, #56]	; (8001598 <MX_I2C1_Init+0x74>)
 8001560:	f003 fdc5 	bl	80050ee <HAL_I2C_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800156a:	f000 fb79 	bl	8001c60 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800156e:	2100      	movs	r1, #0
 8001570:	4809      	ldr	r0, [pc, #36]	; (8001598 <MX_I2C1_Init+0x74>)
 8001572:	f004 fb89 	bl	8005c88 <HAL_I2CEx_ConfigAnalogFilter>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800157c:	f000 fb70 	bl	8001c60 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001580:	2100      	movs	r1, #0
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_I2C1_Init+0x74>)
 8001584:	f004 fbcb 	bl	8005d1e <HAL_I2CEx_ConfigDigitalFilter>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800158e:	f000 fb67 	bl	8001c60 <Error_Handler>
  }

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200001a4 	.word	0x200001a4
 800159c:	40005400 	.word	0x40005400
 80015a0:	60505f8c 	.word	0x60505f8c

080015a4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_I2C2_Init+0x74>)
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <MX_I2C2_Init+0x78>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20501E65;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_I2C2_Init+0x74>)
 80015b0:	4a1b      	ldr	r2, [pc, #108]	; (8001620 <MX_I2C2_Init+0x7c>)
 80015b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_I2C2_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_I2C2_Init+0x74>)
 80015bc:	2201      	movs	r2, #1
 80015be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <MX_I2C2_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_I2C2_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MX_I2C2_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_I2C2_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_I2C2_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015de:	480e      	ldr	r0, [pc, #56]	; (8001618 <MX_I2C2_Init+0x74>)
 80015e0:	f003 fd85 	bl	80050ee <HAL_I2C_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80015ea:	f000 fb39 	bl	8001c60 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ee:	2100      	movs	r1, #0
 80015f0:	4809      	ldr	r0, [pc, #36]	; (8001618 <MX_I2C2_Init+0x74>)
 80015f2:	f004 fb49 	bl	8005c88 <HAL_I2CEx_ConfigAnalogFilter>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80015fc:	f000 fb30 	bl	8001c60 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001600:	2100      	movs	r1, #0
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_I2C2_Init+0x74>)
 8001604:	f004 fb8b 	bl	8005d1e <HAL_I2CEx_ConfigDigitalFilter>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800160e:	f000 fb27 	bl	8001c60 <Error_Handler>
  }

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200001f0 	.word	0x200001f0
 800161c:	40005800 	.word	0x40005800
 8001620:	20501e65 	.word	0x20501e65

08001624 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	; 0x38
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a4c      	ldr	r2, [pc, #304]	; (8001774 <HAL_I2C_MspInit+0x150>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d146      	bne.n	80016d4 <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <HAL_I2C_MspInit+0x154>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	4a4b      	ldr	r2, [pc, #300]	; (8001778 <HAL_I2C_MspInit+0x154>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001652:	4b49      	ldr	r3, [pc, #292]	; (8001778 <HAL_I2C_MspInit+0x154>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	623b      	str	r3, [r7, #32]
 800165c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	4b46      	ldr	r3, [pc, #280]	; (8001778 <HAL_I2C_MspInit+0x154>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	4a45      	ldr	r2, [pc, #276]	; (8001778 <HAL_I2C_MspInit+0x154>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166a:	4b43      	ldr	r3, [pc, #268]	; (8001778 <HAL_I2C_MspInit+0x154>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167c:	2312      	movs	r3, #18
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001680:	2301      	movs	r3, #1
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001688:	2304      	movs	r3, #4
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f003 fb53 	bl	8004d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169e:	2312      	movs	r3, #18
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016aa:	2304      	movs	r3, #4
 80016ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b2:	4619      	mov	r1, r3
 80016b4:	4831      	ldr	r0, [pc, #196]	; (800177c <HAL_I2C_MspInit+0x158>)
 80016b6:	f003 fb43 	bl	8004d40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_I2C_MspInit+0x154>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	4a2e      	ldr	r2, [pc, #184]	; (8001778 <HAL_I2C_MspInit+0x154>)
 80016c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016c4:	6593      	str	r3, [r2, #88]	; 0x58
 80016c6:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <HAL_I2C_MspInit+0x154>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80016d2:	e04a      	b.n	800176a <HAL_I2C_MspInit+0x146>
  else if(i2cHandle->Instance==I2C2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a29      	ldr	r2, [pc, #164]	; (8001780 <HAL_I2C_MspInit+0x15c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d145      	bne.n	800176a <HAL_I2C_MspInit+0x146>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_I2C_MspInit+0x154>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a25      	ldr	r2, [pc, #148]	; (8001778 <HAL_I2C_MspInit+0x154>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b23      	ldr	r3, [pc, #140]	; (8001778 <HAL_I2C_MspInit+0x154>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_I2C_MspInit+0x154>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	4a1f      	ldr	r2, [pc, #124]	; (8001778 <HAL_I2C_MspInit+0x154>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_I2C_MspInit+0x154>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800170e:	2310      	movs	r3, #16
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001712:	2312      	movs	r3, #18
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001716:	2301      	movs	r3, #1
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800171e:	2304      	movs	r3, #4
 8001720:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001726:	4619      	mov	r1, r3
 8001728:	4816      	ldr	r0, [pc, #88]	; (8001784 <HAL_I2C_MspInit+0x160>)
 800172a:	f003 fb09 	bl	8004d40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800172e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001734:	2312      	movs	r3, #18
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001738:	2301      	movs	r3, #1
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001740:	2304      	movs	r3, #4
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174e:	f003 faf7 	bl	8004d40 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_I2C_MspInit+0x154>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_I2C_MspInit+0x154>)
 8001758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800175c:	6593      	str	r3, [r2, #88]	; 0x58
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_I2C_MspInit+0x154>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
}
 800176a:	bf00      	nop
 800176c:	3738      	adds	r7, #56	; 0x38
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40005400 	.word	0x40005400
 8001778:	40021000 	.word	0x40021000
 800177c:	48000400 	.word	0x48000400
 8001780:	40005800 	.word	0x40005800
 8001784:	48000800 	.word	0x48000800

08001788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 800178e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001790:	f002 fe59 	bl	8004446 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001794:	f000 f9e4 	bl	8001b60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001798:	f7ff fe48 	bl	800142c <MX_GPIO_Init>
  MX_DMA_Init();
 800179c:	f7ff fce6 	bl	800116c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80017a0:	f002 f8fc 	bl	800399c <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80017a4:	f000 ff04 	bl	80025b0 <MX_RTC_Init>
  MX_I2C2_Init();
 80017a8:	f7ff fefc 	bl	80015a4 <MX_I2C2_Init>
  MX_TIM2_Init();
 80017ac:	f001 fba0 	bl	8002ef0 <MX_TIM2_Init>
  MX_I2C1_Init();
 80017b0:	f7ff feb8 	bl	8001524 <MX_I2C1_Init>
  MX_TIM1_Init();
 80017b4:	f001 fb32 	bl	8002e1c <MX_TIM1_Init>
  MX_TIM3_Init();
 80017b8:	f001 fbee 	bl	8002f98 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017bc:	f001 fc7c 	bl	80030b8 <MX_TIM4_Init>
  MX_UART4_Init();
 80017c0:	f002 f932 	bl	8003a28 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  //Setup DMA UART
  //Note to self: Find out why the DMA UART TX would get stuck in a TX loop.
  //For the time being just use the normal UART transmit
  RX_Init();
 80017c4:	f7ff fda8 	bl	8001318 <RX_Init>
  init_handler();
 80017c8:	f001 fee6 	bl	8003598 <init_handler>


  HAL_TIM_Base_Start(&htim1); //Used for uS delay
 80017cc:	48c9      	ldr	r0, [pc, #804]	; (8001af4 <main+0x36c>)
 80017ce:	f005 feb5 	bl	800753c <HAL_TIM_Base_Start>

  // Initialize the RTC
  sgTime clock;

  //set initial clock state
  clock_state = 1;
 80017d2:	4bc9      	ldr	r3, [pc, #804]	; (8001af8 <main+0x370>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 80017d8:	2101      	movs	r1, #1
 80017da:	48c8      	ldr	r0, [pc, #800]	; (8001afc <main+0x374>)
 80017dc:	f005 fe40 	bl	8007460 <HAL_RTCEx_BKUPRead>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d004      	beq.n	80017f4 <main+0x6c>
      //   Set the time
  	init_clock(&clock);
 80017ea:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fbb0 	bl	8000f54 <init_clock>
  }

  uint8_t current_sum = 0; //Used for determining a change in time
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 3425 	strb.w	r3, [r7, #1061]	; 0x425
  uint8_t last_sum = 0; //Used for determining a change in time
 80017fa:	2300      	movs	r3, #0
 80017fc:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427

  // Setup the PCA9685 devices for controlling the servos
  I2C_HandleTypeDef *pca_hours;
  I2C_HandleTypeDef *pca_minutes;
  pca_hours = &hi2c1;
 8001800:	4bbf      	ldr	r3, [pc, #764]	; (8001b00 <main+0x378>)
 8001802:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
  pca_minutes = &hi2c2;
 8001806:	4bbf      	ldr	r3, [pc, #764]	; (8001b04 <main+0x37c>)
 8001808:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
  PCA9685_Init(pca_hours);
 800180c:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 8001810:	f000 fc4e 	bl	80020b0 <PCA9685_Init>
  PCA9685_Init(pca_minutes);
 8001814:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 8001818:	f000 fc4a 	bl	80020b0 <PCA9685_Init>

  //Setup all the LEDs structures
  LightStrip LS_HrTen; 	//Tens place for hours
  LS_init(&LS_HrTen, LED_COUNT, &hdma_tim3_ch1, &htim3, TIM_CHANNEL_1);
 800181c:	f507 7049 	add.w	r0, r7, #804	; 0x324
 8001820:	2300      	movs	r3, #0
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	4bb8      	ldr	r3, [pc, #736]	; (8001b08 <main+0x380>)
 8001826:	4ab9      	ldr	r2, [pc, #740]	; (8001b0c <main+0x384>)
 8001828:	2124      	movs	r1, #36	; 0x24
 800182a:	f002 fa9f 	bl	8003d6c <LS_init>
  LightStrip LS_HrOne;	//Ones place for hours
  LS_init(&LS_HrOne, LED_COUNT, &hdma_tim3_ch2, &htim3, TIM_CHANNEL_2);
 800182e:	f507 701d 	add.w	r0, r7, #628	; 0x274
 8001832:	2304      	movs	r3, #4
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	4bb4      	ldr	r3, [pc, #720]	; (8001b08 <main+0x380>)
 8001838:	4ab5      	ldr	r2, [pc, #724]	; (8001b10 <main+0x388>)
 800183a:	2124      	movs	r1, #36	; 0x24
 800183c:	f002 fa96 	bl	8003d6c <LS_init>
  LightStrip LS_MnTen;	//Tens place for minutes
  LS_init(&LS_MnTen, LED_COUNT, &hdma_tim3_ch3, &htim3, TIM_CHANNEL_3);
 8001840:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8001844:	2308      	movs	r3, #8
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	4baf      	ldr	r3, [pc, #700]	; (8001b08 <main+0x380>)
 800184a:	4ab2      	ldr	r2, [pc, #712]	; (8001b14 <main+0x38c>)
 800184c:	2124      	movs	r1, #36	; 0x24
 800184e:	f002 fa8d 	bl	8003d6c <LS_init>
  LightStrip LS_MnOne;	//Ones place for minutes
  LS_init(&LS_MnOne, LED_COUNT, &hdma_tim4_ch2, &htim4, TIM_CHANNEL_2);
 8001852:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8001856:	2304      	movs	r3, #4
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	4baf      	ldr	r3, [pc, #700]	; (8001b18 <main+0x390>)
 800185c:	4aaf      	ldr	r2, [pc, #700]	; (8001b1c <main+0x394>)
 800185e:	2124      	movs	r1, #36	; 0x24
 8001860:	f002 fa84 	bl	8003d6c <LS_init>
  LightStrip TimSep;	//Time Separator
  LS_init(&TimSep  , 20	      , &hdma_tim4_ch1, &htim4, TIM_CHANNEL_1);
 8001864:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001868:	2300      	movs	r3, #0
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	4baa      	ldr	r3, [pc, #680]	; (8001b18 <main+0x390>)
 800186e:	4aac      	ldr	r2, [pc, #688]	; (8001b20 <main+0x398>)
 8001870:	2114      	movs	r1, #20
 8001872:	f002 fa7b 	bl	8003d6c <LS_init>

  //Setup the clock Digits

  //All 4 digits are setup in the Seven_Segment.h file. You should look into creating an Init header.
  uint8_t arr_HrTen[7] = {0,1,2,3,4,5,6}; 					// Pinout values for servos on pca_hours
 8001876:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800187a:	4aaa      	ldr	r2, [pc, #680]	; (8001b24 <main+0x39c>)
 800187c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001880:	6018      	str	r0, [r3, #0]
 8001882:	3304      	adds	r3, #4
 8001884:	8019      	strh	r1, [r3, #0]
 8001886:	3302      	adds	r3, #2
 8001888:	0c0a      	lsrs	r2, r1, #16
 800188a:	701a      	strb	r2, [r3, #0]
  init_Digit(&D_HrTen, &LS_HrTen,arr_HrTen,pca_hours,H10); 	// Initialize the HrTen Digit
 800188c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001890:	f507 7149 	add.w	r1, r7, #804	; 0x324
 8001894:	2300      	movs	r3, #0
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800189c:	48a2      	ldr	r0, [pc, #648]	; (8001b28 <main+0x3a0>)
 800189e:	f000 fec9 	bl	8002634 <init_Digit>
  uint8_t h10_min_off[7] = {0,5,0,10,10,8,10};
 80018a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018a6:	4aa1      	ldr	r2, [pc, #644]	; (8001b2c <main+0x3a4>)
 80018a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ac:	6018      	str	r0, [r3, #0]
 80018ae:	3304      	adds	r3, #4
 80018b0:	8019      	strh	r1, [r3, #0]
 80018b2:	3302      	adds	r3, #2
 80018b4:	0c0a      	lsrs	r2, r1, #16
 80018b6:	701a      	strb	r2, [r3, #0]
  uint8_t h10_max_off[7] = {40,45,30,48,50,45,48};
 80018b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018bc:	4a9c      	ldr	r2, [pc, #624]	; (8001b30 <main+0x3a8>)
 80018be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c2:	6018      	str	r0, [r3, #0]
 80018c4:	3304      	adds	r3, #4
 80018c6:	8019      	strh	r1, [r3, #0]
 80018c8:	3302      	adds	r3, #2
 80018ca:	0c0a      	lsrs	r2, r1, #16
 80018cc:	701a      	strb	r2, [r3, #0]
  init_offsets(&D_HrTen, h10_min_off, h10_max_off);
 80018ce:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80018d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018d6:	4619      	mov	r1, r3
 80018d8:	4893      	ldr	r0, [pc, #588]	; (8001b28 <main+0x3a0>)
 80018da:	f001 f93e 	bl	8002b5a <init_offsets>
  all_Digit_servo(&D_HrTen, 1); 							// Set Digit servos to Home position
 80018de:	2101      	movs	r1, #1
 80018e0:	4891      	ldr	r0, [pc, #580]	; (8001b28 <main+0x3a0>)
 80018e2:	f001 f8c2 	bl	8002a6a <all_Digit_servo>

  uint8_t arr_HrOne[7] = {8,9,10,11,12,13,14};				// Pinout values for servos on pca_hours
 80018e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018ea:	4a92      	ldr	r2, [pc, #584]	; (8001b34 <main+0x3ac>)
 80018ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018f0:	6018      	str	r0, [r3, #0]
 80018f2:	3304      	adds	r3, #4
 80018f4:	8019      	strh	r1, [r3, #0]
 80018f6:	3302      	adds	r3, #2
 80018f8:	0c0a      	lsrs	r2, r1, #16
 80018fa:	701a      	strb	r2, [r3, #0]
  init_Digit(&D_HrOne, &LS_HrOne,arr_HrOne,pca_hours,H1);	// Initialize the HrOne Digit
 80018fc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001900:	f507 711d 	add.w	r1, r7, #628	; 0x274
 8001904:	2301      	movs	r3, #1
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800190c:	488a      	ldr	r0, [pc, #552]	; (8001b38 <main+0x3b0>)
 800190e:	f000 fe91 	bl	8002634 <init_Digit>
  uint8_t h1_min_off[7] = {5,0,5,0,0,0,5};
 8001912:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001916:	4a89      	ldr	r2, [pc, #548]	; (8001b3c <main+0x3b4>)
 8001918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800191c:	6018      	str	r0, [r3, #0]
 800191e:	3304      	adds	r3, #4
 8001920:	8019      	strh	r1, [r3, #0]
 8001922:	3302      	adds	r3, #2
 8001924:	0c0a      	lsrs	r2, r1, #16
 8001926:	701a      	strb	r2, [r3, #0]
  uint8_t h1_max_off[7] = {45,40,40,45,45,45,40};
 8001928:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800192c:	4a84      	ldr	r2, [pc, #528]	; (8001b40 <main+0x3b8>)
 800192e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001932:	6018      	str	r0, [r3, #0]
 8001934:	3304      	adds	r3, #4
 8001936:	8019      	strh	r1, [r3, #0]
 8001938:	3302      	adds	r3, #2
 800193a:	0c0a      	lsrs	r2, r1, #16
 800193c:	701a      	strb	r2, [r3, #0]
  init_offsets(&D_HrOne, h1_min_off, h1_max_off);
 800193e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001946:	4619      	mov	r1, r3
 8001948:	487b      	ldr	r0, [pc, #492]	; (8001b38 <main+0x3b0>)
 800194a:	f001 f906 	bl	8002b5a <init_offsets>
  all_Digit_servo(&D_HrOne, 1);							// Set Digit servos to Home position
 800194e:	2101      	movs	r1, #1
 8001950:	4879      	ldr	r0, [pc, #484]	; (8001b38 <main+0x3b0>)
 8001952:	f001 f88a 	bl	8002a6a <all_Digit_servo>

  uint8_t arr_MnTen[7] = {0,1,2,3,4,5,6};					// Pinout values for servos on pca_minutes
 8001956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195a:	4a72      	ldr	r2, [pc, #456]	; (8001b24 <main+0x39c>)
 800195c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001960:	6018      	str	r0, [r3, #0]
 8001962:	3304      	adds	r3, #4
 8001964:	8019      	strh	r1, [r3, #0]
 8001966:	3302      	adds	r3, #2
 8001968:	0c0a      	lsrs	r2, r1, #16
 800196a:	701a      	strb	r2, [r3, #0]
  init_Digit(&D_MnTen, &LS_MnTen,arr_MnTen,pca_minutes,M10);// Initialize the MnTen Digit
 800196c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001970:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8001974:	2302      	movs	r3, #2
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800197c:	4871      	ldr	r0, [pc, #452]	; (8001b44 <main+0x3bc>)
 800197e:	f000 fe59 	bl	8002634 <init_Digit>
  uint8_t m10_min_off[7] = {5,10,5,5,0,5,5};
 8001982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001986:	4a70      	ldr	r2, [pc, #448]	; (8001b48 <main+0x3c0>)
 8001988:	e892 0003 	ldmia.w	r2, {r0, r1}
 800198c:	6018      	str	r0, [r3, #0]
 800198e:	3304      	adds	r3, #4
 8001990:	8019      	strh	r1, [r3, #0]
 8001992:	3302      	adds	r3, #2
 8001994:	0c0a      	lsrs	r2, r1, #16
 8001996:	701a      	strb	r2, [r3, #0]
  uint8_t m10_max_off[7] = {48,50,48,48,48,48,48};
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4a6b      	ldr	r2, [pc, #428]	; (8001b4c <main+0x3c4>)
 800199e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019a2:	6018      	str	r0, [r3, #0]
 80019a4:	3304      	adds	r3, #4
 80019a6:	8019      	strh	r1, [r3, #0]
 80019a8:	3302      	adds	r3, #2
 80019aa:	0c0a      	lsrs	r2, r1, #16
 80019ac:	701a      	strb	r2, [r3, #0]
  init_offsets(&D_MnTen, m10_min_off, m10_max_off);
 80019ae:	f107 021c 	add.w	r2, r7, #28
 80019b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b6:	4619      	mov	r1, r3
 80019b8:	4862      	ldr	r0, [pc, #392]	; (8001b44 <main+0x3bc>)
 80019ba:	f001 f8ce 	bl	8002b5a <init_offsets>
  all_Digit_servo(&D_MnTen, 1);							// Set Digit servos to Home position
 80019be:	2101      	movs	r1, #1
 80019c0:	4860      	ldr	r0, [pc, #384]	; (8001b44 <main+0x3bc>)
 80019c2:	f001 f852 	bl	8002a6a <all_Digit_servo>

  uint8_t arr_MnOne[7] = {8,9,10,11,12,13,14};				// Pinout values for servos on pca_minutes
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4a5a      	ldr	r2, [pc, #360]	; (8001b34 <main+0x3ac>)
 80019cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019d0:	6018      	str	r0, [r3, #0]
 80019d2:	3304      	adds	r3, #4
 80019d4:	8019      	strh	r1, [r3, #0]
 80019d6:	3302      	adds	r3, #2
 80019d8:	0c0a      	lsrs	r2, r1, #16
 80019da:	701a      	strb	r2, [r3, #0]
  init_Digit(&D_MnOne, &LS_MnOne,arr_MnOne,pca_minutes,M1);	// Initialize the MnOne Digit
 80019dc:	f107 0214 	add.w	r2, r7, #20
 80019e0:	f507 718a 	add.w	r1, r7, #276	; 0x114
 80019e4:	2303      	movs	r3, #3
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80019ec:	4858      	ldr	r0, [pc, #352]	; (8001b50 <main+0x3c8>)
 80019ee:	f000 fe21 	bl	8002634 <init_Digit>
  uint8_t m1_min_off[7] = {0,5,5,10,5,0,10};
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	4a57      	ldr	r2, [pc, #348]	; (8001b54 <main+0x3cc>)
 80019f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019fc:	6018      	str	r0, [r3, #0]
 80019fe:	3304      	adds	r3, #4
 8001a00:	8019      	strh	r1, [r3, #0]
 8001a02:	3302      	adds	r3, #2
 8001a04:	0c0a      	lsrs	r2, r1, #16
 8001a06:	701a      	strb	r2, [r3, #0]
  uint8_t m1_max_off[7] = {50,48,50,50,48,42,55};
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	4a53      	ldr	r2, [pc, #332]	; (8001b58 <main+0x3d0>)
 8001a0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a10:	6018      	str	r0, [r3, #0]
 8001a12:	3304      	adds	r3, #4
 8001a14:	8019      	strh	r1, [r3, #0]
 8001a16:	3302      	adds	r3, #2
 8001a18:	0c0a      	lsrs	r2, r1, #16
 8001a1a:	701a      	strb	r2, [r3, #0]
  init_offsets(&D_MnOne, m1_min_off, m1_max_off);
 8001a1c:	1d3a      	adds	r2, r7, #4
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	4619      	mov	r1, r3
 8001a24:	484a      	ldr	r0, [pc, #296]	; (8001b50 <main+0x3c8>)
 8001a26:	f001 f898 	bl	8002b5a <init_offsets>
  all_Digit_servo(&D_MnOne, 1);							// Set Digit servos to Home position
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	4848      	ldr	r0, [pc, #288]	; (8001b50 <main+0x3c8>)
 8001a2e:	f001 f81c 	bl	8002a6a <all_Digit_servo>

  // Variables for color sweep on separator
  uint8_t angle = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b
  uint8_t angle_difference =15;
 8001a38:	230f      	movs	r3, #15
 8001a3a:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
  uint8_t i = 20;
 8001a3e:	2314      	movs	r3, #20
 8001a40:	f887 3426 	strb.w	r3, [r7, #1062]	; 0x426

  // Set Clock Digits to current time
  update_Digits(&D_HrTen, &D_HrOne, &D_MnTen, &D_MnOne, &clock);
 8001a44:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <main+0x3c8>)
 8001a4c:	4a3d      	ldr	r2, [pc, #244]	; (8001b44 <main+0x3bc>)
 8001a4e:	493a      	ldr	r1, [pc, #232]	; (8001b38 <main+0x3b0>)
 8001a50:	4835      	ldr	r0, [pc, #212]	; (8001b28 <main+0x3a0>)
 8001a52:	f000 fe47 	bl	80026e4 <update_Digits>
  render_Digits(&D_HrTen, &D_HrOne, &D_MnTen, &D_MnOne);
 8001a56:	4b3e      	ldr	r3, [pc, #248]	; (8001b50 <main+0x3c8>)
 8001a58:	4a3a      	ldr	r2, [pc, #232]	; (8001b44 <main+0x3bc>)
 8001a5a:	4937      	ldr	r1, [pc, #220]	; (8001b38 <main+0x3b0>)
 8001a5c:	4832      	ldr	r0, [pc, #200]	; (8001b28 <main+0x3a0>)
 8001a5e:	f000 fe9d 	bl	800279c <render_Digits>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){
	 // If clock state is active clock update is available
	 if(clock_state == 1){
 8001a62:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <main+0x370>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d140      	bne.n	8001aec <main+0x364>
		 get_time(&clock); // Refresh current time
 8001a6a:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fb2e 	bl	80010d0 <get_time>
		 current_sum = clock.gTime.Hours+clock.gTime.Minutes;// Sum Hours and Minutes
 8001a74:	f897 23ec 	ldrb.w	r2, [r7, #1004]	; 0x3ec
 8001a78:	f897 33ed 	ldrb.w	r3, [r7, #1005]	; 0x3ed
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f887 3425 	strb.w	r3, [r7, #1061]	; 0x425
		 if(current_sum != last_sum){
 8001a82:	f897 2425 	ldrb.w	r2, [r7, #1061]	; 0x425
 8001a86:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d00e      	beq.n	8001aac <main+0x324>
			  // Set Clock Digits to current time
			  update_Digits(&D_HrTen, &D_HrOne, &D_MnTen, &D_MnOne, &clock);
 8001a8e:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <main+0x3c8>)
 8001a96:	4a2b      	ldr	r2, [pc, #172]	; (8001b44 <main+0x3bc>)
 8001a98:	4927      	ldr	r1, [pc, #156]	; (8001b38 <main+0x3b0>)
 8001a9a:	4823      	ldr	r0, [pc, #140]	; (8001b28 <main+0x3a0>)
 8001a9c:	f000 fe22 	bl	80026e4 <update_Digits>
			  render_Digits(&D_HrTen, &D_HrOne, &D_MnTen, &D_MnOne);
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <main+0x3c8>)
 8001aa2:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <main+0x3bc>)
 8001aa4:	4924      	ldr	r1, [pc, #144]	; (8001b38 <main+0x3b0>)
 8001aa6:	4820      	ldr	r0, [pc, #128]	; (8001b28 <main+0x3a0>)
 8001aa8:	f000 fe78 	bl	800279c <render_Digits>
		 }
		 render_sep(&TimSep, angle + (i * angle_difference), 255, 10);// Update separator color
 8001aac:	f897 2426 	ldrb.w	r2, [r7, #1062]	; 0x426
 8001ab0:	f897 341a 	ldrb.w	r3, [r7, #1050]	; 0x41a
 8001ab4:	fb12 f303 	smulbb	r3, r2, r3
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 8001abe:	4413      	add	r3, r2
 8001ac0:	b2d9      	uxtb	r1, r3
 8001ac2:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001ac6:	230a      	movs	r3, #10
 8001ac8:	22ff      	movs	r2, #255	; 0xff
 8001aca:	f000 fe7e 	bl	80027ca <render_sep>
		 i++;
 8001ace:	f897 3426 	ldrb.w	r3, [r7, #1062]	; 0x426
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f887 3426 	strb.w	r3, [r7, #1062]	; 0x426
		 change_time(&clock, &cv);// Check clock vars and change if necessary
 8001ad8:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8001adc:	491f      	ldr	r1, [pc, #124]	; (8001b5c <main+0x3d4>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f001 fe30 	bl	8003744 <change_time>
		 last_sum = current_sum;
 8001ae4:	f897 3425 	ldrb.w	r3, [r7, #1061]	; 0x425
 8001ae8:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427

#ifdef SERIAL_DATE
	  serialDate(&clock); // Output date over Serial
#endif
	 }
	 HAL_Delay(DEL);
 8001aec:	2064      	movs	r0, #100	; 0x64
 8001aee:	f002 fd1b 	bl	8004528 <HAL_Delay>
	 if(clock_state == 1){
 8001af2:	e7b6      	b.n	8001a62 <main+0x2da>
 8001af4:	200005b0 	.word	0x200005b0
 8001af8:	20000320 	.word	0x20000320
 8001afc:	20000370 	.word	0x20000370
 8001b00:	200001a4 	.word	0x200001a4
 8001b04:	200001f0 	.word	0x200001f0
 8001b08:	200004a4 	.word	0x200004a4
 8001b0c:	200004f0 	.word	0x200004f0
 8001b10:	20000550 	.word	0x20000550
 8001b14:	20000444 	.word	0x20000444
 8001b18:	200003f8 	.word	0x200003f8
 8001b1c:	20000398 	.word	0x20000398
 8001b20:	20000648 	.word	0x20000648
 8001b24:	0800bacc 	.word	0x0800bacc
 8001b28:	20000288 	.word	0x20000288
 8001b2c:	0800bad4 	.word	0x0800bad4
 8001b30:	0800badc 	.word	0x0800badc
 8001b34:	0800bae4 	.word	0x0800bae4
 8001b38:	200002d4 	.word	0x200002d4
 8001b3c:	0800baec 	.word	0x0800baec
 8001b40:	0800baf4 	.word	0x0800baf4
 8001b44:	2000023c 	.word	0x2000023c
 8001b48:	0800bafc 	.word	0x0800bafc
 8001b4c:	0800bb04 	.word	0x0800bb04
 8001b50:	20000324 	.word	0x20000324
 8001b54:	0800bb0c 	.word	0x0800bb0c
 8001b58:	0800bb14 	.word	0x0800bb14
 8001b5c:	20000090 	.word	0x20000090

08001b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0a8      	sub	sp, #160	; 0xa0
 8001b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b66:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b6a:	2238      	movs	r2, #56	; 0x38
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f009 fae4 	bl	800b13c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b84:	463b      	mov	r3, r7
 8001b86:	2254      	movs	r2, #84	; 0x54
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f009 fad6 	bl	800b13c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b90:	2000      	movs	r0, #0
 8001b92:	f004 f921 	bl	8005dd8 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001b96:	f004 f90f 	bl	8005db8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <SystemClock_Config+0xf8>)
 8001b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba0:	4a2d      	ldr	r2, [pc, #180]	; (8001c58 <SystemClock_Config+0xf8>)
 8001ba2:	f023 0318 	bic.w	r3, r3, #24
 8001ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001baa:	2306      	movs	r3, #6
 8001bac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bb8:	2340      	movs	r3, #64	; 0x40
 8001bba:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001bce:	2354      	movs	r3, #84	; 0x54
 8001bd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001be0:	2302      	movs	r3, #2
 8001be2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bea:	4618      	mov	r0, r3
 8001bec:	f004 f998 	bl	8005f20 <HAL_RCC_OscConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bf6:	f000 f833 	bl	8001c60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c06:	2300      	movs	r3, #0
 8001c08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8001c0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c12:	2108      	movs	r1, #8
 8001c14:	4618      	mov	r0, r3
 8001c16:	f004 fc9b 	bl	8006550 <HAL_RCC_ClockConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c20:	f000 f81e 	bl	8001c60 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <SystemClock_Config+0xfc>)
 8001c26:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c3c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c3e:	463b      	mov	r3, r7
 8001c40:	4618      	mov	r0, r3
 8001c42:	f004 fea1 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001c4c:	f000 f808 	bl	8001c60 <Error_Handler>
  }
}
 8001c50:	bf00      	nop
 8001c52:	37a0      	adds	r7, #160	; 0xa0
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	000800e8 	.word	0x000800e8

08001c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <PCA9685_SetBit>:
#include "pca9685.h"
#include "math.h"


PCA9685_STATUS PCA9685_SetBit(I2C_HandleTypeDef *pca9685_i2c, uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b088      	sub	sp, #32
 8001c72:	af04      	add	r7, sp, #16
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	4608      	mov	r0, r1
 8001c78:	4611      	mov	r1, r2
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	70fb      	strb	r3, [r7, #3]
 8001c80:	460b      	mov	r3, r1
 8001c82:	70bb      	strb	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	if(Value) Value = 1;
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <PCA9685_SetBit+0x24>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	707b      	strb	r3, [r7, #1]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	230a      	movs	r3, #10
 8001c98:	9302      	str	r3, [sp, #8]
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	f107 030f 	add.w	r3, r7, #15
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f003 fcb7 	bl	800561c <HAL_I2C_Mem_Read>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <PCA9685_SetBit+0x4a>
	{
		return PCA9685_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e030      	b.n	8001d1a <PCA9685_SetBit+0xac>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8001cb8:	78bb      	ldrb	r3, [r7, #2]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cc6:	b25b      	sxtb	r3, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	f003 0201 	and.w	r2, r3, #1
 8001cde:	78bb      	ldrb	r3, [r7, #2]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	b25a      	sxtb	r2, r3
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	b25b      	sxtb	r3, r3
 8001cea:	4313      	orrs	r3, r2
 8001cec:	b25b      	sxtb	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	230a      	movs	r3, #10
 8001cf8:	9302      	str	r3, [sp, #8]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	f107 030f 	add.w	r3, r7, #15
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2301      	movs	r3, #1
 8001d06:	2180      	movs	r1, #128	; 0x80
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f003 fb73 	bl	80053f4 <HAL_I2C_Mem_Write>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <PCA9685_SetBit+0xaa>
	{
		return PCA9685_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <PCA9685_SetBit+0xac>
	}

	return PCA9685_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(I2C_HandleTypeDef *pca9685_i2c)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af02      	add	r7, sp, #8
 8001d28:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0x6;
 8001d2a:	2306      	movs	r3, #6
 8001d2c:	73fb      	strb	r3, [r7, #15]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8001d2e:	f107 020f 	add.w	r2, r7, #15
 8001d32:	230a      	movs	r3, #10
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2301      	movs	r3, #1
 8001d38:	2100      	movs	r1, #0
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f003 fa66 	bl	800520c <HAL_I2C_Master_Transmit>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <PCA9685_SoftwareReset+0x28>
	{
		return PCA9685_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e000      	b.n	8001d4c <PCA9685_SoftwareReset+0x2a>
	}
	return PCA9685_ERROR;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(I2C_HandleTypeDef *pca9685_i2c, uint8_t Enable)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	70fb      	strb	r3, [r7, #3]
	return PCA9685_SetBit(pca9685_i2c, PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	2204      	movs	r2, #4
 8001d64:	2100      	movs	r1, #0
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ff81 	bl	8001c6e <PCA9685_SetBit>
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(I2C_HandleTypeDef *pca9685_i2c, uint8_t Enable)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	70fb      	strb	r3, [r7, #3]
	return PCA9685_SetBit(pca9685_i2c, PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	2207      	movs	r2, #7
 8001d86:	2100      	movs	r1, #0
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff70 	bl	8001c6e <PCA9685_SetBit>
 8001d8e:	4603      	mov	r3, r0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(I2C_HandleTypeDef *pca9685_i2c, uint8_t Enable)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
	return PCA9685_SetBit(pca9685_i2c, PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	2205      	movs	r2, #5
 8001da8:	2100      	movs	r1, #0
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ff5f 	bl	8001c6e <PCA9685_SetBit>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	0000      	movs	r0, r0
 8001dbc:	0000      	movs	r0, r0
	...

08001dc0 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(I2C_HandleTypeDef *pca9685_i2c, uint16_t Frequency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af04      	add	r7, sp, #16
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d902      	bls.n	8001ddc <PCA9685_SetPwmFrequency+0x1c>
	{
		Prescale = 0x03;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	72fb      	strb	r3, [r7, #11]
 8001dda:	e046      	b.n	8001e6a <PCA9685_SetPwmFrequency+0xaa>
	}
	else if(Frequency <= 24)
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	2b18      	cmp	r3, #24
 8001de0:	d802      	bhi.n	8001de8 <PCA9685_SetPwmFrequency+0x28>
	{
		Prescale = 0xFF;
 8001de2:	23ff      	movs	r3, #255	; 0xff
 8001de4:	72fb      	strb	r3, [r7, #11]
 8001de6:	e040      	b.n	8001e6a <PCA9685_SetPwmFrequency+0xaa>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df2:	ee17 0a90 	vmov	r0, s15
 8001df6:	f7fe fbcf 	bl	8000598 <__aeabi_f2d>
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <PCA9685_SetPwmFrequency+0xf0>)
 8001e00:	f7fe fc22 	bl	8000648 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	a127      	add	r1, pc, #156	; (adr r1, 8001ea8 <PCA9685_SetPwmFrequency+0xe8>)
 8001e0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e0e:	f7fe fd45 	bl	800089c <__aeabi_ddiv>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <PCA9685_SetPwmFrequency+0xf4>)
 8001e20:	f7fe fa5a 	bl	80002d8 <__aeabi_dsub>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7fe fec6 	bl	8000bbc <__aeabi_d2f>
 8001e30:	4603      	mov	r3, r0
 8001e32:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f7fe fbaf 	bl	8000598 <__aeabi_f2d>
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <PCA9685_SetPwmFrequency+0xf8>)
 8001e40:	f7fe fa4c 	bl	80002dc <__adddf3>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	ec43 2b17 	vmov	d7, r2, r3
 8001e4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e50:	eef0 0a67 	vmov.f32	s1, s15
 8001e54:	f009 fd9c 	bl	800b990 <floor>
 8001e58:	ec53 2b10 	vmov	r2, r3, d0
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f7fe fe8c 	bl	8000b7c <__aeabi_d2uiz>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(pca9685_i2c, 1);
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff71 	bl	8001d54 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8001e72:	230a      	movs	r3, #10
 8001e74:	9302      	str	r3, [sp, #8]
 8001e76:	2301      	movs	r3, #1
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	f107 030b 	add.w	r3, r7, #11
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2301      	movs	r3, #1
 8001e82:	22fe      	movs	r2, #254	; 0xfe
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f003 fab4 	bl	80053f4 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(pca9685_i2c, 0);
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff60 	bl	8001d54 <PCA9685_SleepMode>
	PCA9685_RestartMode(pca9685_i2c, 1);
 8001e94:	2101      	movs	r1, #1
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ff6d 	bl	8001d76 <PCA9685_RestartMode>
	return PCA9685_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	4177d784 	.word	0x4177d784
 8001eb0:	40b00000 	.word	0x40b00000
 8001eb4:	3ff00000 	.word	0x3ff00000
 8001eb8:	3fe00000 	.word	0x3fe00000

08001ebc <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(I2C_HandleTypeDef *pca9685_i2c, uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af04      	add	r7, sp, #16
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	4608      	mov	r0, r1
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4603      	mov	r3, r0
 8001ecc:	72fb      	strb	r3, [r7, #11]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	813b      	strh	r3, [r7, #8]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	80fb      	strh	r3, [r7, #6]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001ed6:	7afb      	ldrb	r3, [r7, #11]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	3306      	adds	r3, #6
 8001ede:	75fb      	strb	r3, [r7, #23]
	Message[0] = OnTime & 0xFF;
 8001ee0:	893b      	ldrh	r3, [r7, #8]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	743b      	strb	r3, [r7, #16]
	Message[1] = OnTime>>8;
 8001ee6:	893b      	ldrh	r3, [r7, #8]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	747b      	strb	r3, [r7, #17]
	Message[2] = OffTime & 0xFF;
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	74bb      	strb	r3, [r7, #18]
	Message[3] = OffTime>>8;
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	74fb      	strb	r3, [r7, #19]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	230a      	movs	r3, #10
 8001f06:	9302      	str	r3, [sp, #8]
 8001f08:	2304      	movs	r3, #4
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2301      	movs	r3, #1
 8001f14:	2180      	movs	r1, #128	; 0x80
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f003 fa6c 	bl	80053f4 <HAL_I2C_Mem_Write>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <PCA9685_SetPwm+0x6a>
	{
		return PCA9685_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <PCA9685_SetPwm+0x6c>
	}

	return PCA9685_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(I2C_HandleTypeDef *pca9685_i2c, uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	4608      	mov	r0, r1
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4603      	mov	r3, r0
 8001f40:	70fb      	strb	r3, [r7, #3]
 8001f42:	460b      	mov	r3, r1
 8001f44:	803b      	strh	r3, [r7, #0]
 8001f46:	4613      	mov	r3, r2
 8001f48:	70bb      	strb	r3, [r7, #2]
  if(Value > 4095) Value = 4095;
 8001f4a:	883b      	ldrh	r3, [r7, #0]
 8001f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f50:	d302      	bcc.n	8001f58 <PCA9685_SetPin+0x28>
 8001f52:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001f56:	803b      	strh	r3, [r7, #0]

  if (Invert) {
 8001f58:	78bb      	ldrb	r3, [r7, #2]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d025      	beq.n	8001faa <PCA9685_SetPin+0x7a>
    if (Value == 0) {
 8001f5e:	883b      	ldrh	r3, [r7, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d108      	bne.n	8001f76 <PCA9685_SetPin+0x46>
      // Special value for signal fully on.
      return PCA9685_SetPwm(pca9685_i2c, Channel, 4096, 0);
 8001f64:	78f9      	ldrb	r1, [r7, #3]
 8001f66:	2300      	movs	r3, #0
 8001f68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ffa5 	bl	8001ebc <PCA9685_SetPwm>
 8001f72:	4603      	mov	r3, r0
 8001f74:	e03a      	b.n	8001fec <PCA9685_SetPin+0xbc>
    }
    else if (Value == 4095) {
 8001f76:	883b      	ldrh	r3, [r7, #0]
 8001f78:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d108      	bne.n	8001f92 <PCA9685_SetPin+0x62>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(pca9685_i2c, Channel, 0, 4096);
 8001f80:	78f9      	ldrb	r1, [r7, #3]
 8001f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f86:	2200      	movs	r2, #0
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff97 	bl	8001ebc <PCA9685_SetPwm>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	e02c      	b.n	8001fec <PCA9685_SetPin+0xbc>
    }
    else {
    	return PCA9685_SetPwm(pca9685_i2c, Channel, 0, 4095-Value);
 8001f92:	883b      	ldrh	r3, [r7, #0]
 8001f94:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001f98:	330f      	adds	r3, #15
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	78f9      	ldrb	r1, [r7, #3]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff8b 	bl	8001ebc <PCA9685_SetPwm>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	e020      	b.n	8001fec <PCA9685_SetPin+0xbc>
    }
  }
  else {
    if (Value == 4095) {
 8001faa:	883b      	ldrh	r3, [r7, #0]
 8001fac:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d108      	bne.n	8001fc6 <PCA9685_SetPin+0x96>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(pca9685_i2c, Channel, 4096, 0);
 8001fb4:	78f9      	ldrb	r1, [r7, #3]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff7d 	bl	8001ebc <PCA9685_SetPwm>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	e012      	b.n	8001fec <PCA9685_SetPin+0xbc>
    }
    else if (Value == 0) {
 8001fc6:	883b      	ldrh	r3, [r7, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d108      	bne.n	8001fde <PCA9685_SetPin+0xae>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(pca9685_i2c, Channel, 0, 4096);
 8001fcc:	78f9      	ldrb	r1, [r7, #3]
 8001fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff71 	bl	8001ebc <PCA9685_SetPwm>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	e006      	b.n	8001fec <PCA9685_SetPin+0xbc>
    }
    else {
    	return PCA9685_SetPwm(pca9685_i2c, Channel, 0, Value);
 8001fde:	883b      	ldrh	r3, [r7, #0]
 8001fe0:	78f9      	ldrb	r1, [r7, #3]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff69 	bl	8001ebc <PCA9685_SetPwm>
 8001fea:	4603      	mov	r3, r0
    }
  }
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	0000      	movs	r0, r0
	...

08001ff8 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(I2C_HandleTypeDef *pca9685_i2c, uint8_t Channel, float Angle)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	460b      	mov	r3, r1
 8002002:	ed87 0a01 	vstr	s0, [r7, #4]
 8002006:	72fb      	strb	r3, [r7, #11]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8002008:	edd7 7a01 	vldr	s15, [r7, #4]
 800200c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002014:	d502      	bpl.n	800201c <PCA9685_SetServoAngle+0x24>
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 800201c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002020:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80020a0 <PCA9685_SetServoAngle+0xa8>
 8002024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202c:	dd01      	ble.n	8002032 <PCA9685_SetServoAngle+0x3a>
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <PCA9685_SetServoAngle+0xac>)
 8002030:	607b      	str	r3, [r7, #4]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe fab0 	bl	8000598 <__aeabi_f2d>
 8002038:	a317      	add	r3, pc, #92	; (adr r3, 8002098 <PCA9685_SetServoAngle+0xa0>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe fb03 	bl	8000648 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <PCA9685_SetServoAngle+0xb0>)
 8002050:	f7fe fc24 	bl	800089c <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	4b12      	ldr	r3, [pc, #72]	; (80020ac <PCA9685_SetServoAngle+0xb4>)
 8002062:	f7fe f93b 	bl	80002dc <__adddf3>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
 800206e:	f7fe fda5 	bl	8000bbc <__aeabi_d2f>
 8002072:	4603      	mov	r3, r0
 8002074:	617b      	str	r3, [r7, #20]

	return PCA9685_SetPin(pca9685_i2c, Channel, (uint16_t)Value, 0);
 8002076:	edd7 7a05 	vldr	s15, [r7, #20]
 800207a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800207e:	ee17 3a90 	vmov	r3, s15
 8002082:	b29a      	uxth	r2, r3
 8002084:	7af9      	ldrb	r1, [r7, #11]
 8002086:	2300      	movs	r3, #0
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f7ff ff51 	bl	8001f30 <PCA9685_SetPin>
 800208e:	4603      	mov	r3, r0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	00000000 	.word	0x00000000
 800209c:	40786000 	.word	0x40786000
 80020a0:	43340000 	.word	0x43340000
 80020a4:	43340000 	.word	0x43340000
 80020a8:	40668000 	.word	0x40668000
 80020ac:	405b8000 	.word	0x405b8000

080020b0 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *pca9685_i2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	//pca9685_i2c = hi2c;

	PCA9685_SoftwareReset(pca9685_i2c);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff fe32 	bl	8001d22 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(pca9685_i2c, 48);
 80020be:	2130      	movs	r1, #48	; 0x30
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff fe7d 	bl	8001dc0 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(pca9685_i2c, 1000);
#endif
	PCA9685_AutoIncrement(pca9685_i2c, 1);
 80020c6:	2101      	movs	r1, #1
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff fe65 	bl	8001d98 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <ringbuff_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t ringbuff_init(RINGBUFF_VOLATILE ringbuff_t *buff, void *buffdata,
		size_t size) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
	if (buff == NULL || buffdata == NULL || size == 0) {
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <ringbuff_init+0x1e>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <ringbuff_init+0x1e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <ringbuff_init+0x22>
		return 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e011      	b.n	800211e <ringbuff_init+0x46>
	}

	BUF_MEMSET((void*) buff, 0x00, sizeof(*buff));
 80020fa:	221c      	movs	r2, #28
 80020fc:	2100      	movs	r1, #0
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f009 f81c 	bl	800b13c <memset>

	buff->size = size;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	609a      	str	r2, [r3, #8]
	buff->buff = buffdata;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	605a      	str	r2, [r3, #4]

#if RINGBUFF_USE_MAGIC
	buff->magic1 = 0xDEADBEEF;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <ringbuff_init+0x50>)
 8002114:	601a      	str	r2, [r3, #0]
	buff->magic2 = ~0xDEADBEEF;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <ringbuff_init+0x54>)
 800211a:	619a      	str	r2, [r3, #24]
#endif /* RINGBUFF_USE_MAGIC */

	return 1;
 800211c:	2301      	movs	r3, #1
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	deadbeef 	.word	0xdeadbeef
 800212c:	21524110 	.word	0x21524110

08002130 <ringbuff_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void ringbuff_set_evt_fn(RINGBUFF_VOLATILE ringbuff_t *buff,
		ringbuff_evt_fn evt_fn) {
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
	if (BUF_IS_VALID(buff)) {
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d014      	beq.n	800216a <ringbuff_set_evt_fn+0x3a>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <ringbuff_set_evt_fn+0x48>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10f      	bne.n	800216a <ringbuff_set_evt_fn+0x3a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	4a0b      	ldr	r2, [pc, #44]	; (800217c <ringbuff_set_evt_fn+0x4c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d10a      	bne.n	800216a <ringbuff_set_evt_fn+0x3a>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d006      	beq.n	800216a <ringbuff_set_evt_fn+0x3a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <ringbuff_set_evt_fn+0x3a>
		buff->evt_fn = evt_fn;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	615a      	str	r2, [r3, #20]
	}
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	deadbeef 	.word	0xdeadbeef
 800217c:	21524110 	.word	0x21524110

08002180 <ringbuff_read>:
 * \param[in]       buff: Buffer handle
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t ringbuff_read(RINGBUFF_VOLATILE ringbuff_t *buff, void *data, size_t btr) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
	size_t tocopy, full;
	uint8_t *d = data;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	61fb      	str	r3, [r7, #28]

	if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d017      	beq.n	80021c6 <ringbuff_read+0x46>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a38      	ldr	r2, [pc, #224]	; (800227c <ringbuff_read+0xfc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d112      	bne.n	80021c6 <ringbuff_read+0x46>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	4a36      	ldr	r2, [pc, #216]	; (8002280 <ringbuff_read+0x100>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10d      	bne.n	80021c6 <ringbuff_read+0x46>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <ringbuff_read+0x46>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <ringbuff_read+0x46>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <ringbuff_read+0x46>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <ringbuff_read+0x4a>
		return 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e053      	b.n	8002272 <ringbuff_read+0xf2>
	}

	/* Calculate maximum number of bytes available to read */
	full = ringbuff_get_full(buff);
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f8a0 	bl	8002310 <ringbuff_get_full>
 80021d0:	61b8      	str	r0, [r7, #24]
	btr = BUF_MIN(full, btr);
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	4293      	cmp	r3, r2
 80021d8:	bf28      	it	cs
 80021da:	4613      	movcs	r3, r2
 80021dc:	607b      	str	r3, [r7, #4]
	if (btr == 0) {
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <ringbuff_read+0x68>
		return 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e044      	b.n	8002272 <ringbuff_read+0xf2>
	}

	/* Step 1: Read data from linear part of buffer */
	tocopy = BUF_MIN(buff->size - buff->r, btr);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4293      	cmp	r3, r2
 80021f6:	bf28      	it	cs
 80021f8:	4613      	movcs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
	BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4413      	add	r3, r2
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4619      	mov	r1, r3
 800220a:	69f8      	ldr	r0, [r7, #28]
 800220c:	f008 ff88 	bl	800b120 <memcpy>
	buff->r += tocopy;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	441a      	add	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	60da      	str	r2, [r3, #12]
	btr -= tocopy;
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	607b      	str	r3, [r7, #4]

	/* Step 2: Read data from beginning of buffer (overflow part) */
	if (btr > 0) {
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <ringbuff_read+0xc2>
		BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	18d0      	adds	r0, r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	4619      	mov	r1, r3
 8002238:	f008 ff72 	bl	800b120 <memcpy>
		buff->r = btr;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	60da      	str	r2, [r3, #12]
	}

	/* Step 3: Check end of buffer */
	if (buff->r >= buff->size) {
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	429a      	cmp	r2, r3
 800224c:	d302      	bcc.n	8002254 <ringbuff_read+0xd4>
		buff->r = 0;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
	}
	BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, tocopy + btr);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <ringbuff_read+0xec>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	6979      	ldr	r1, [r7, #20]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	440a      	add	r2, r1
 8002266:	2100      	movs	r1, #0
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	4798      	blx	r3
	return tocopy + btr;
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
}
 8002272:	4618      	mov	r0, r3
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	deadbeef 	.word	0xdeadbeef
 8002280:	21524110 	.word	0x21524110

08002284 <ringbuff_get_free>:
/**
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t ringbuff_get_free(RINGBUFF_VOLATILE ringbuff_t *buff) {
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	size_t size, w, r;

	if (!BUF_IS_VALID(buff)) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d011      	beq.n	80022b6 <ringbuff_get_free+0x32>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <ringbuff_get_free+0x84>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d10c      	bne.n	80022b6 <ringbuff_get_free+0x32>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a1a      	ldr	r2, [pc, #104]	; (800230c <ringbuff_get_free+0x88>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d107      	bne.n	80022b6 <ringbuff_get_free+0x32>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <ringbuff_get_free+0x32>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <ringbuff_get_free+0x36>
		return 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e01f      	b.n	80022fa <ringbuff_get_free+0x76>
	}

	/* Use temporary values in case they are changed during operations */
	w = buff->w;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	613b      	str	r3, [r7, #16]
	r = buff->r;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60fb      	str	r3, [r7, #12]
	if (w == r) {
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d103      	bne.n	80022d6 <ringbuff_get_free+0x52>
		size = buff->size;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	e00f      	b.n	80022f6 <ringbuff_get_free+0x72>
	}
	else if (r > w) {
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d904      	bls.n	80022e8 <ringbuff_get_free+0x64>
		size = r - w;
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	e006      	b.n	80022f6 <ringbuff_get_free+0x72>
	}
	else {
		size = buff->size - (w - r);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	68f9      	ldr	r1, [r7, #12]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1acb      	subs	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
	}

	/* Buffer free size is always 1 less than actual size */
	return size - 1;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3b01      	subs	r3, #1
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	deadbeef 	.word	0xdeadbeef
 800230c:	21524110 	.word	0x21524110

08002310 <ringbuff_get_full>:
/**
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t ringbuff_get_full(RINGBUFF_VOLATILE ringbuff_t *buff) {
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	size_t w, r, size;

	if (!BUF_IS_VALID(buff)) {
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d011      	beq.n	8002342 <ringbuff_get_full+0x32>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a1b      	ldr	r2, [pc, #108]	; (8002390 <ringbuff_get_full+0x80>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d10c      	bne.n	8002342 <ringbuff_get_full+0x32>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a19      	ldr	r2, [pc, #100]	; (8002394 <ringbuff_get_full+0x84>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d107      	bne.n	8002342 <ringbuff_get_full+0x32>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <ringbuff_get_full+0x32>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <ringbuff_get_full+0x36>
		return 0;
 8002342:	2300      	movs	r3, #0
 8002344:	e01d      	b.n	8002382 <ringbuff_get_full+0x72>
	}

	/* Use temporary values in case they are changed during operations */
	w = buff->w;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	613b      	str	r3, [r7, #16]
	r = buff->r;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	60fb      	str	r3, [r7, #12]
	if (w == r) {
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	429a      	cmp	r2, r3
 8002358:	d102      	bne.n	8002360 <ringbuff_get_full+0x50>
		size = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e00f      	b.n	8002380 <ringbuff_get_full+0x70>
	}
	else if (w > r) {
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	429a      	cmp	r2, r3
 8002366:	d904      	bls.n	8002372 <ringbuff_get_full+0x62>
		size = w - r;
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e006      	b.n	8002380 <ringbuff_get_full+0x70>
	}
	else {
		size = buff->size - (r - w);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	6939      	ldr	r1, [r7, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1acb      	subs	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
	}
	return size;
 8002380:	697b      	ldr	r3, [r7, #20]
}
 8002382:	4618      	mov	r0, r3
 8002384:	371c      	adds	r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	deadbeef 	.word	0xdeadbeef
 8002394:	21524110 	.word	0x21524110

08002398 <ringbuff_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
ringbuff_get_linear_block_read_address(RINGBUFF_VOLATILE ringbuff_t *buff) {
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	if (!BUF_IS_VALID(buff)) {
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d011      	beq.n	80023ca <ringbuff_get_linear_block_read_address+0x32>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <ringbuff_get_linear_block_read_address+0x4c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d10c      	bne.n	80023ca <ringbuff_get_linear_block_read_address+0x32>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <ringbuff_get_linear_block_read_address+0x50>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d107      	bne.n	80023ca <ringbuff_get_linear_block_read_address+0x32>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <ringbuff_get_linear_block_read_address+0x32>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <ringbuff_get_linear_block_read_address+0x36>
		return NULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e004      	b.n	80023d8 <ringbuff_get_linear_block_read_address+0x40>
	}
	return &buff->buff[buff->r];
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4413      	add	r3, r2
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	deadbeef 	.word	0xdeadbeef
 80023e8:	21524110 	.word	0x21524110

080023ec <ringbuff_get_linear_block_read_length>:
/**
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t ringbuff_get_linear_block_read_length(RINGBUFF_VOLATILE ringbuff_t *buff) {
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	size_t w, r, len;

	if (!BUF_IS_VALID(buff)) {
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d011      	beq.n	800241e <ringbuff_get_linear_block_read_length+0x32>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <ringbuff_get_linear_block_read_length+0x7c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d10c      	bne.n	800241e <ringbuff_get_linear_block_read_length+0x32>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <ringbuff_get_linear_block_read_length+0x80>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d107      	bne.n	800241e <ringbuff_get_linear_block_read_length+0x32>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <ringbuff_get_linear_block_read_length+0x32>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <ringbuff_get_linear_block_read_length+0x36>
		return 0;
 800241e:	2300      	movs	r3, #0
 8002420:	e01b      	b.n	800245a <ringbuff_get_linear_block_read_length+0x6e>
	}

	/* Use temporary values in case they are changed during operations */
	w = buff->w;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	613b      	str	r3, [r7, #16]
	r = buff->r;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	60fb      	str	r3, [r7, #12]
	if (w > r) {
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	429a      	cmp	r2, r3
 8002434:	d904      	bls.n	8002440 <ringbuff_get_linear_block_read_length+0x54>
		len = w - r;
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e00b      	b.n	8002458 <ringbuff_get_linear_block_read_length+0x6c>
	}
	else if (r > w) {
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	429a      	cmp	r2, r3
 8002446:	d905      	bls.n	8002454 <ringbuff_get_linear_block_read_length+0x68>
		len = buff->size - r;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	e001      	b.n	8002458 <ringbuff_get_linear_block_read_length+0x6c>
	}
	else {
		len = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
	}
	return len;
 8002458:	697b      	ldr	r3, [r7, #20]
}
 800245a:	4618      	mov	r0, r3
 800245c:	371c      	adds	r7, #28
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	deadbeef 	.word	0xdeadbeef
 800246c:	21524110 	.word	0x21524110

08002470 <ringbuff_skip>:
 * \note            Useful at the end of streaming transfer such as DMA
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t ringbuff_skip(RINGBUFF_VOLATILE ringbuff_t *buff, size_t len) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
	size_t full;

	if (!BUF_IS_VALID(buff) || len == 0) {
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d014      	beq.n	80024aa <ringbuff_skip+0x3a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a20      	ldr	r2, [pc, #128]	; (8002508 <ringbuff_skip+0x98>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10f      	bne.n	80024aa <ringbuff_skip+0x3a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	4a1f      	ldr	r2, [pc, #124]	; (800250c <ringbuff_skip+0x9c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d10a      	bne.n	80024aa <ringbuff_skip+0x3a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <ringbuff_skip+0x3a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <ringbuff_skip+0x3a>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <ringbuff_skip+0x3e>
		return 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e027      	b.n	80024fe <ringbuff_skip+0x8e>
	}

	full = ringbuff_get_full(buff); /* Get buffer used length */
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff ff2e 	bl	8002310 <ringbuff_get_full>
 80024b4:	60f8      	str	r0, [r7, #12]
	len = BUF_MIN(len, full); /* Calculate max skip */
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4293      	cmp	r3, r2
 80024bc:	bf28      	it	cs
 80024be:	4613      	movcs	r3, r2
 80024c0:	603b      	str	r3, [r7, #0]
	buff->r += len; /* Advance read pointer */
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	441a      	add	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60da      	str	r2, [r3, #12]
	if (buff->r >= buff->size) { /* Subtract possible overflow */
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d306      	bcc.n	80024e8 <ringbuff_skip+0x78>
		buff->r -= buff->size;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	1ad2      	subs	r2, r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	60da      	str	r2, [r3, #12]
	}
	BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <ringbuff_skip+0x8c>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	2100      	movs	r1, #0
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
	return len;
 80024fc:	683b      	ldr	r3, [r7, #0]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	deadbeef 	.word	0xdeadbeef
 800250c:	21524110 	.word	0x21524110

08002510 <ringbuff_advance>:
 *                      of bytes written to buffer by hardware
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to advance
 * \return          Number of bytes advanced for write operation
 */
size_t ringbuff_advance(RINGBUFF_VOLATILE ringbuff_t *buff, size_t len) {
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
	size_t free;

	if (!BUF_IS_VALID(buff) || len == 0) {
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d014      	beq.n	800254a <ringbuff_advance+0x3a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <ringbuff_advance+0x98>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10f      	bne.n	800254a <ringbuff_advance+0x3a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	4a1f      	ldr	r2, [pc, #124]	; (80025ac <ringbuff_advance+0x9c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d10a      	bne.n	800254a <ringbuff_advance+0x3a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <ringbuff_advance+0x3a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <ringbuff_advance+0x3a>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <ringbuff_advance+0x3e>
		return 0;
 800254a:	2300      	movs	r3, #0
 800254c:	e027      	b.n	800259e <ringbuff_advance+0x8e>
	}

	free = ringbuff_get_free(buff); /* Get buffer free length */
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff fe98 	bl	8002284 <ringbuff_get_free>
 8002554:	60f8      	str	r0, [r7, #12]
	len = BUF_MIN(len, free); /* Calculate max advance */
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4293      	cmp	r3, r2
 800255c:	bf28      	it	cs
 800255e:	4613      	movcs	r3, r2
 8002560:	603b      	str	r3, [r7, #0]
	buff->w += len; /* Advance write pointer */
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	441a      	add	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	611a      	str	r2, [r3, #16]
	if (buff->w >= buff->size) { /* Subtract possible overflow */
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	429a      	cmp	r2, r3
 8002578:	d306      	bcc.n	8002588 <ringbuff_advance+0x78>
		buff->w -= buff->size;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691a      	ldr	r2, [r3, #16]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	1ad2      	subs	r2, r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	611a      	str	r2, [r3, #16]
	}
	BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, len);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <ringbuff_advance+0x8c>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	2101      	movs	r1, #1
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
	return len;
 800259c:	683b      	ldr	r3, [r7, #0]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	deadbeef 	.word	0xdeadbeef
 80025ac:	21524110 	.word	0x21524110

080025b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <MX_RTC_Init+0x44>)
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <MX_RTC_Init+0x48>)
 80025b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_RTC_Init+0x44>)
 80025bc:	2200      	movs	r2, #0
 80025be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <MX_RTC_Init+0x44>)
 80025c2:	227f      	movs	r2, #127	; 0x7f
 80025c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <MX_RTC_Init+0x44>)
 80025c8:	22ff      	movs	r2, #255	; 0xff
 80025ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <MX_RTC_Init+0x44>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <MX_RTC_Init+0x44>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_RTC_Init+0x44>)
 80025da:	2200      	movs	r2, #0
 80025dc:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025de:	4805      	ldr	r0, [pc, #20]	; (80025f4 <MX_RTC_Init+0x44>)
 80025e0:	f004 fc1e 	bl	8006e20 <HAL_RTC_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80025ea:	f7ff fb39 	bl	8001c60 <Error_Handler>
  }

}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000370 	.word	0x20000370
 80025f8:	40002800 	.word	0x40002800

080025fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a08      	ldr	r2, [pc, #32]	; (800262c <HAL_RTC_MspInit+0x30>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d107      	bne.n	800261e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <HAL_RTC_MspInit+0x34>)
 8002610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002614:	4a06      	ldr	r2, [pc, #24]	; (8002630 <HAL_RTC_MspInit+0x34>)
 8002616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40002800 	.word	0x40002800
 8002630:	40021000 	.word	0x40021000

08002634 <init_Digit>:
#define LEDH 2
#define LEDS 255
#define LEDL 127

// Initialize a single digit structure on the clock
void init_Digit(Digit *D, LightStrip *LS, uint8_t *chan_arr, I2C_HandleTypeDef *i2c, uint8_t dig_pos){
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
	D->LS = LS;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	601a      	str	r2, [r3, #0]
	D->chan_array = chan_arr;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	639a      	str	r2, [r3, #56]	; 0x38
	D->dig_pos = dig_pos;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	D->pca9685_i2c = i2c;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	649a      	str	r2, [r3, #72]	; 0x48
	for(int i = 0; i < 7;i++){
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	e008      	b.n	8002676 <init_Digit+0x42>
		D->set_array[i] = 0;
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	4413      	add	r3, r2
 800266a:	333c      	adds	r3, #60	; 0x3c
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 7;i++){
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3301      	adds	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b06      	cmp	r3, #6
 800267a:	ddf3      	ble.n	8002664 <init_Digit+0x30>
	}
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	371c      	adds	r7, #28
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <parse_ones>:

uint8_t parse_ones(uint8_t val){
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
	return val%10;
 8002696:	79fa      	ldrb	r2, [r7, #7]
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <parse_ones+0x2c>)
 800269a:	fba3 1302 	umull	r1, r3, r3, r2
 800269e:	08d9      	lsrs	r1, r3, #3
 80026a0:	460b      	mov	r3, r1
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	b2db      	uxtb	r3, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	cccccccd 	.word	0xcccccccd

080026bc <parse_tens>:

uint8_t parse_tens(uint8_t val){
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
	return (val/10);
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <parse_tens+0x24>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	08db      	lsrs	r3, r3, #3
 80026d0:	b2db      	uxtb	r3, r3
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	cccccccd 	.word	0xcccccccd

080026e4 <update_Digits>:

//Update all Digits from the Clock values
void update_Digits(Digit *h1,Digit *h2,Digit *m1,Digit *m2, sgTime *Time){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
	get_time(Time);
 80026f2:	69b8      	ldr	r0, [r7, #24]
 80026f4:	f7fe fcec 	bl	80010d0 <get_time>
	h1->value = parse_tens(Time->gTime.Hours);
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	7e1b      	ldrb	r3, [r3, #24]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ffdd 	bl	80026bc <parse_tens>
 8002702:	4603      	mov	r3, r0
 8002704:	461a      	mov	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	get_SetArray(h1);
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f93b 	bl	8002988 <get_SetArray>
	h2->value = parse_ones(Time->gTime.Hours);
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	7e1b      	ldrb	r3, [r3, #24]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ffb8 	bl	800268c <parse_ones>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	get_SetArray(h2);
 8002726:	68b8      	ldr	r0, [r7, #8]
 8002728:	f000 f92e 	bl	8002988 <get_SetArray>
	m1->value = parse_tens(Time->gTime.Minutes);
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	7e5b      	ldrb	r3, [r3, #25]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ffc3 	bl	80026bc <parse_tens>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	get_SetArray(m1);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f921 	bl	8002988 <get_SetArray>
	m2->value = parse_ones(Time->gTime.Minutes);
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	7e5b      	ldrb	r3, [r3, #25]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff ff9e 	bl	800268c <parse_ones>
 8002750:	4603      	mov	r3, r0
 8002752:	461a      	mov	r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	get_SetArray(m2);
 800275a:	6838      	ldr	r0, [r7, #0]
 800275c:	f000 f914 	bl	8002988 <get_SetArray>
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <transform_Digit>:

// Physically change the servos and LEDS on the Clock
void transform_Digit(Digit *D){
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	get_SetArray(D);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f909 	bl	8002988 <get_SetArray>
	get_SetLSArray(D);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f85e 	bl	8002838 <get_SetLSArray>
	set_Digit_servo(D);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f92b 	bl	80029d8 <set_Digit_servo>
	display_LEDValue(D, LEDH, LEDS, LEDL);
 8002782:	237f      	movs	r3, #127	; 0x7f
 8002784:	22ff      	movs	r2, #255	; 0xff
 8002786:	2102      	movs	r1, #2
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f8b1 	bl	80028f0 <display_LEDValue>
	HAL_Delay(10);
 800278e:	200a      	movs	r0, #10
 8002790:	f001 feca 	bl	8004528 <HAL_Delay>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <render_Digits>:

// Basically sued to update the physical Clock
void render_Digits(Digit *h1,Digit *h2,Digit *m1,Digit *m2){
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
	transform_Digit(h1);
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f7ff ffdc 	bl	8002768 <transform_Digit>
	transform_Digit(h2);
 80027b0:	68b8      	ldr	r0, [r7, #8]
 80027b2:	f7ff ffd9 	bl	8002768 <transform_Digit>
	transform_Digit(m1);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ffd6 	bl	8002768 <transform_Digit>
	transform_Digit(m2);
 80027bc:	6838      	ldr	r0, [r7, #0]
 80027be:	f7ff ffd3 	bl	8002768 <transform_Digit>
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <render_sep>:

// Setup the separator color
void render_sep(LightStrip *LS, uint8_t h, uint8_t s, uint8_t l){
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af02      	add	r7, sp, #8
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	4608      	mov	r0, r1
 80027d4:	4611      	mov	r1, r2
 80027d6:	461a      	mov	r2, r3
 80027d8:	4603      	mov	r3, r0
 80027da:	70fb      	strb	r3, [r7, #3]
 80027dc:	460b      	mov	r3, r1
 80027de:	70bb      	strb	r3, [r7, #2]
 80027e0:	4613      	mov	r3, r2
 80027e2:	707b      	strb	r3, [r7, #1]
	uint32_t rgb_color = hsl_to_rgb(h, s, l);
 80027e4:	787a      	ldrb	r2, [r7, #1]
 80027e6:	78b9      	ldrb	r1, [r7, #2]
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f001 fd3c 	bl	8004268 <hsl_to_rgb>
 80027f0:	60b8      	str	r0, [r7, #8]
	for(int i = 0; i<LS->count;i++){
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	e011      	b.n	800281c <render_sep+0x52>
		set_RGB(LS,i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	b2d9      	uxtb	r1, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	b2da      	uxtb	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	b2d8      	uxtb	r0, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	4603      	mov	r3, r0
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f001 faeb 	bl	8003dec <set_RGB>
	for(int i = 0; i<LS->count;i++){
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3301      	adds	r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4293      	cmp	r3, r2
 8002826:	dbe7      	blt.n	80027f8 <render_sep+0x2e>
	}
	write_RGB(LS);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f001 fb0d 	bl	8003e48 <write_RGB>
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <get_SetLSArray>:

// For the Digit LEDS select the LED segments that need to be set to display the number.
void get_SetLSArray(Digit *D){
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	 * 			|__3/5__|
	 * 			|		|
	 * 			6		8
	 * 			|___7___|
	 */
	uint8_t count = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	77fb      	strb	r3, [r7, #31]
	uint8_t iters[8] = {4,5,4,5,4,5,4,5};
 8002844:	4a28      	ldr	r2, [pc, #160]	; (80028e8 <get_SetLSArray+0xb0>)
 8002846:	f107 0308 	add.w	r3, r7, #8
 800284a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800284e:	e883 0003 	stmia.w	r3, {r0, r1}
			{1,1,0,0,0,1,1,0},//C
			{0,0,1,1,1,1,1,1},//d
			{1,1,1,0,1,1,1,0},//E
			{1,1,1,0,1,1,0,0},//F
	};
	for(int i = 0; i < 8; i++){
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e03c      	b.n	80028d2 <get_SetLSArray+0x9a>
		if(LUT[D->value][i] == 1){
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800285e:	4a23      	ldr	r2, [pc, #140]	; (80028ec <get_SetLSArray+0xb4>)
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	441a      	add	r2, r3
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	4413      	add	r3, r2
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d117      	bne.n	800289e <get_SetLSArray+0x66>
			for(int j = 0; j < iters[i];j++){
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e00a      	b.n	800288a <get_SetLSArray+0x52>
				D->light_digit[count] = 1;
 8002874:	7ffb      	ldrb	r3, [r7, #31]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	2201      	movs	r2, #1
 800287c:	711a      	strb	r2, [r3, #4]
				count++;
 800287e:	7ffb      	ldrb	r3, [r7, #31]
 8002880:	3301      	adds	r3, #1
 8002882:	77fb      	strb	r3, [r7, #31]
			for(int j = 0; j < iters[i];j++){
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3301      	adds	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	f107 0208 	add.w	r2, r7, #8
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4413      	add	r3, r2
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	4293      	cmp	r3, r2
 800289a:	dbeb      	blt.n	8002874 <get_SetLSArray+0x3c>
 800289c:	e016      	b.n	80028cc <get_SetLSArray+0x94>
			}
		}
		else{
			for(int j = 0; j < iters[i];j++){
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	e00a      	b.n	80028ba <get_SetLSArray+0x82>
				D->light_digit[count] = 0;
 80028a4:	7ffb      	ldrb	r3, [r7, #31]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	2200      	movs	r2, #0
 80028ac:	711a      	strb	r2, [r3, #4]
				count++;
 80028ae:	7ffb      	ldrb	r3, [r7, #31]
 80028b0:	3301      	adds	r3, #1
 80028b2:	77fb      	strb	r3, [r7, #31]
			for(int j = 0; j < iters[i];j++){
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	3301      	adds	r3, #1
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	f107 0208 	add.w	r2, r7, #8
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	4413      	add	r3, r2
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4293      	cmp	r3, r2
 80028ca:	dbeb      	blt.n	80028a4 <get_SetLSArray+0x6c>
	for(int i = 0; i < 8; i++){
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	3301      	adds	r3, #1
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b07      	cmp	r3, #7
 80028d6:	ddbf      	ble.n	8002858 <get_SetLSArray+0x20>
			}
		}
	}
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	0800bb1c 	.word	0x0800bb1c
 80028ec:	0800bb34 	.word	0x0800bb34

080028f0 <display_LEDValue>:

// Once the LED Digit value has been captured, change the LEDS
void display_LEDValue(Digit *D,uint8_t h, uint8_t s, uint8_t l){
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	4608      	mov	r0, r1
 80028fa:	4611      	mov	r1, r2
 80028fc:	461a      	mov	r2, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	70fb      	strb	r3, [r7, #3]
 8002902:	460b      	mov	r3, r1
 8002904:	70bb      	strb	r3, [r7, #2]
 8002906:	4613      	mov	r3, r2
 8002908:	707b      	strb	r3, [r7, #1]
	uint32_t rgb_color = hsl_to_rgb(h, s, l);
 800290a:	787a      	ldrb	r2, [r7, #1]
 800290c:	78b9      	ldrb	r1, [r7, #2]
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	4618      	mov	r0, r3
 8002912:	f001 fca9 	bl	8004268 <hsl_to_rgb>
 8002916:	60b8      	str	r0, [r7, #8]
	for(int i = 0; i<D->LS->count;i++){
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	e024      	b.n	8002968 <display_LEDValue+0x78>
		if(D->light_digit[i]==1){
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	3304      	adds	r3, #4
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d110      	bne.n	800294e <display_LEDValue+0x5e>
			set_RGB(D->LS,i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	b2d9      	uxtb	r1, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	0c1b      	lsrs	r3, r3, #16
 8002938:	b2da      	uxtb	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	b2dc      	uxtb	r4, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	4623      	mov	r3, r4
 8002948:	f001 fa50 	bl	8003dec <set_RGB>
 800294c:	e009      	b.n	8002962 <display_LEDValue+0x72>
		}
		else{
			set_RGB(D->LS,i, 0,0,0);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	b2d9      	uxtb	r1, r3
 8002956:	2300      	movs	r3, #0
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2300      	movs	r3, #0
 800295c:	2200      	movs	r2, #0
 800295e:	f001 fa45 	bl	8003dec <set_RGB>
	for(int i = 0; i<D->LS->count;i++){
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3301      	adds	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4293      	cmp	r3, r2
 8002974:	dbd3      	blt.n	800291e <display_LEDValue+0x2e>
		}
	}
	write_RGB(D->LS);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f001 fa64 	bl	8003e48 <write_RGB>
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	bd90      	pop	{r4, r7, pc}

08002988 <get_SetArray>:

// Like the LED array but this is for the Servos that need to be set to display the digit.
void get_SetArray(Digit *D){
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
			{1,0,0,1,1,1,0},//C
			{0,1,1,1,1,0,1},//d
			{1,0,0,1,1,1,1},//E
			{1,0,0,0,1,1,1},//F
	};
	for(int i = 0;i<7;i++){
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e014      	b.n	80029c0 <get_SetArray+0x38>
		D->set_array[i] = LUT[D->value][i];
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800299c:	4619      	mov	r1, r3
 800299e:	4a0d      	ldr	r2, [pc, #52]	; (80029d4 <get_SetArray+0x4c>)
 80029a0:	460b      	mov	r3, r1
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	1a5b      	subs	r3, r3, r1
 80029a6:	441a      	add	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4413      	add	r3, r2
 80029ac:	7819      	ldrb	r1, [r3, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	333c      	adds	r3, #60	; 0x3c
 80029b6:	460a      	mov	r2, r1
 80029b8:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<7;i++){
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3301      	adds	r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	dde7      	ble.n	8002996 <get_SetArray+0xe>
	}
}
 80029c6:	bf00      	nop
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	0800bbb4 	.word	0x0800bbb4

080029d8 <set_Digit_servo>:
	D->value = val;
	get_SetArray(D);
}

//Render the digit by moving the servos
void set_Digit_servo(Digit *D){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 7; i++){
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e039      	b.n	8002a5a <set_Digit_servo+0x82>
		if(D->set_array[i] != 0){
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	333c      	adds	r3, #60	; 0x3c
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d017      	beq.n	8002a24 <set_Digit_servo+0x4c>
			PCA9685_SetServoAngle (D->pca9685_i2c, D->chan_array[i],D->offsets[i].min);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4413      	add	r3, r2
 8002a00:	7819      	ldrb	r1, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	3214      	adds	r2, #20
 8002a08:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8002a0c:	ee07 3a90 	vmov	s15, r3
 8002a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a14:	eeb0 0a67 	vmov.f32	s0, s15
 8002a18:	f7ff faee 	bl	8001ff8 <PCA9685_SetServoAngle>
			delay_us(SERVO_DEL);
 8002a1c:	2064      	movs	r0, #100	; 0x64
 8002a1e:	f001 f98b 	bl	8003d38 <delay_us>
 8002a22:	e017      	b.n	8002a54 <set_Digit_servo+0x7c>
		}
		else{
			PCA9685_SetServoAngle (D->pca9685_i2c, D->chan_array[i],D->offsets[i].max);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4413      	add	r3, r2
 8002a30:	7819      	ldrb	r1, [r3, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3314      	adds	r3, #20
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	785b      	ldrb	r3, [r3, #1]
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a46:	eeb0 0a67 	vmov.f32	s0, s15
 8002a4a:	f7ff fad5 	bl	8001ff8 <PCA9685_SetServoAngle>
			delay_us(SERVO_DEL);
 8002a4e:	2064      	movs	r0, #100	; 0x64
 8002a50:	f001 f972 	bl	8003d38 <delay_us>
	for(int i = 0; i < 7; i++){
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3301      	adds	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b06      	cmp	r3, #6
 8002a5e:	ddc2      	ble.n	80029e6 <set_Digit_servo+0xe>
		}
	}
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <all_Digit_servo>:

//Set all Servos in a Digit to a specific angle
void all_Digit_servo(Digit *D, uint8_t l){
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	70fb      	strb	r3, [r7, #3]
	if(l == 1){
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d121      	bne.n	8002ac0 <all_Digit_servo+0x56>
		for(int i = 0; i < 7; i++){
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e01a      	b.n	8002ab8 <all_Digit_servo+0x4e>
			PCA9685_SetServoAngle (D->pca9685_i2c, D->chan_array[i],D->offsets[i].max);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	7819      	ldrb	r1, [r3, #0]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3314      	adds	r3, #20
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	785b      	ldrb	r3, [r3, #1]
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa8:	f7ff faa6 	bl	8001ff8 <PCA9685_SetServoAngle>
			delay_us(SERVO_DEL);
 8002aac:	2064      	movs	r0, #100	; 0x64
 8002aae:	f001 f943 	bl	8003d38 <delay_us>
		for(int i = 0; i < 7; i++){
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	dde1      	ble.n	8002a82 <all_Digit_servo+0x18>
			PCA9685_SetServoAngle (D->pca9685_i2c, D->chan_array[i],D->offsets[i].min);
			delay_us(SERVO_DEL);

		}
	}
}
 8002abe:	e01f      	b.n	8002b00 <all_Digit_servo+0x96>
		for(int i = 0; i < 7; i++){
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	e019      	b.n	8002afa <all_Digit_servo+0x90>
			PCA9685_SetServoAngle (D->pca9685_i2c, D->chan_array[i],D->offsets[i].min);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	7819      	ldrb	r1, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	3214      	adds	r2, #20
 8002ada:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aea:	f7ff fa85 	bl	8001ff8 <PCA9685_SetServoAngle>
			delay_us(SERVO_DEL);
 8002aee:	2064      	movs	r0, #100	; 0x64
 8002af0:	f001 f922 	bl	8003d38 <delay_us>
		for(int i = 0; i < 7; i++){
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	3301      	adds	r3, #1
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	dde2      	ble.n	8002ac6 <all_Digit_servo+0x5c>
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <set_Digit_servo_angle>:

// This is used specifically for servo calibration
void set_Digit_servo_angle(Digit *D, uint16_t ang){
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < 7; i++){
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	e017      	b.n	8002b4a <set_Digit_servo_angle+0x42>
		if(D->set_array[i] != 0){
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	333c      	adds	r3, #60	; 0x3c
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <set_Digit_servo_angle+0x3c>
			PCA9685_SetPin(D->pca9685_i2c, D->chan_array[i], ang, 0);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	7819      	ldrb	r1, [r3, #0]
 8002b36:	887a      	ldrh	r2, [r7, #2]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f7ff f9f9 	bl	8001f30 <PCA9685_SetPin>
			delay_us(SERVO_DEL);
 8002b3e:	2064      	movs	r0, #100	; 0x64
 8002b40:	f001 f8fa 	bl	8003d38 <delay_us>
	for(int i = 0; i < 7; i++){
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3301      	adds	r3, #1
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b06      	cmp	r3, #6
 8002b4e:	dde4      	ble.n	8002b1a <set_Digit_servo_angle+0x12>
		}
	}
}
 8002b50:	bf00      	nop
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <init_offsets>:

void init_offsets(Digit *D, uint8_t *min, uint8_t *max){
 8002b5a:	b480      	push	{r7}
 8002b5c:	b087      	sub	sp, #28
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < 7; i++){
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	e016      	b.n	8002b9a <init_offsets+0x40>
		D->offsets[i].min = min[i];
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4413      	add	r3, r2
 8002b72:	7819      	ldrb	r1, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	3214      	adds	r2, #20
 8002b7a:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		D->offsets[i].max = max[i];
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	4413      	add	r3, r2
 8002b84:	7819      	ldrb	r1, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3314      	adds	r3, #20
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4413      	add	r3, r2
 8002b90:	460a      	mov	r2, r1
 8002b92:	705a      	strb	r2, [r3, #1]
	for(int i = 0; i < 7; i++){
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3301      	adds	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b06      	cmp	r3, #6
 8002b9e:	dde5      	ble.n	8002b6c <init_offsets+0x12>
	}
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bbe:	6093      	str	r3, [r2, #8]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40007000 	.word	0x40007000

08002bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_MspInit+0x44>)
 8002bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bda:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <HAL_MspInit+0x44>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6613      	str	r3, [r2, #96]	; 0x60
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_MspInit+0x44>)
 8002be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <HAL_MspInit+0x44>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	4a08      	ldr	r2, [pc, #32]	; (8002c14 <HAL_MspInit+0x44>)
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_MspInit+0x44>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8002c06:	f7ff ffd3 	bl	8002bb0 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000

08002c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c2a:	e7fe      	b.n	8002c2a <HardFault_Handler+0x4>

08002c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <MemManage_Handler+0x4>

08002c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c36:	e7fe      	b.n	8002c36 <BusFault_Handler+0x4>

08002c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c3c:	e7fe      	b.n	8002c3c <UsageFault_Handler+0x4>

08002c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c6c:	f001 fc3e 	bl	80044ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <DMA1_Channel1_IRQHandler+0x10>)
 8002c7a:	f001 ff11 	bl	8004aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200004f0 	.word	0x200004f0

08002c88 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <DMA1_Channel2_IRQHandler+0x10>)
 8002c8e:	f001 ff07 	bl	8004aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000550 	.word	0x20000550

08002c9c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <DMA1_Channel3_IRQHandler+0x10>)
 8002ca2:	f001 fefd 	bl	8004aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000444 	.word	0x20000444

08002cb0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <DMA1_Channel4_IRQHandler+0x10>)
 8002cb6:	f001 fef3 	bl	8004aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000398 	.word	0x20000398

08002cc4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <DMA1_Channel5_IRQHandler+0x10>)
 8002cca:	f001 fee9 	bl	8004aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000648 	.word	0x20000648

08002cd8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <DMA1_Channel6_IRQHandler+0x10>)
 8002cde:	f001 fedf 	bl	8004aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200006a8 	.word	0x200006a8

08002cec <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002cf0:	4802      	ldr	r0, [pc, #8]	; (8002cfc <DMA1_Channel7_IRQHandler+0x10>)
 8002cf2:	f001 fed5 	bl	8004aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200007f4 	.word	0x200007f4

08002d00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d08:	f002 f9ce 	bl	80050a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002d14:	4809      	ldr	r0, [pc, #36]	; (8002d3c <UART4_IRQHandler+0x2c>)
 8002d16:	f006 faf1 	bl	80092fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
	if (__HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE)) {
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <UART4_IRQHandler+0x2c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d106      	bne.n	8002d36 <UART4_IRQHandler+0x26>
		HAL_UART_RxCpltCallback(&huart4);
 8002d28:	4804      	ldr	r0, [pc, #16]	; (8002d3c <UART4_IRQHandler+0x2c>)
 8002d2a:	f7fe fb65 	bl	80013f8 <HAL_UART_RxCpltCallback>
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8002d2e:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <UART4_IRQHandler+0x2c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2210      	movs	r2, #16
 8002d34:	621a      	str	r2, [r3, #32]
	}
  /* USER CODE END UART4_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000854 	.word	0x20000854

08002d40 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002d44:	4802      	ldr	r0, [pc, #8]	; (8002d50 <DMA2_Channel1_IRQHandler+0x10>)
 8002d46:	f001 feab 	bl	8004aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	200008e0 	.word	0x200008e0

08002d54 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002d58:	4809      	ldr	r0, [pc, #36]	; (8002d80 <LPUART1_IRQHandler+0x2c>)
 8002d5a:	f006 facf 	bl	80092fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */
	if (__HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_IDLE)) {
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <LPUART1_IRQHandler+0x2c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d106      	bne.n	8002d7a <LPUART1_IRQHandler+0x26>
		HAL_UART_RxCpltCallback(&hlpuart1);
 8002d6c:	4804      	ldr	r0, [pc, #16]	; (8002d80 <LPUART1_IRQHandler+0x2c>)
 8002d6e:	f7fe fb43 	bl	80013f8 <HAL_UART_RxCpltCallback>
		__HAL_UART_CLEAR_IDLEFLAG(&hlpuart1);
 8002d72:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <LPUART1_IRQHandler+0x2c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2210      	movs	r2, #16
 8002d78:	621a      	str	r2, [r3, #32]
	}
  /* USER CODE END LPUART1_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000708 	.word	0x20000708

08002d84 <DMA1_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA1 channel8 global interrupt.
  */
void DMA1_Channel8_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel8_IRQn 0 */

  /* USER CODE END DMA1_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002d88:	4802      	ldr	r0, [pc, #8]	; (8002d94 <DMA1_Channel8_IRQHandler+0x10>)
 8002d8a:	f001 fe89 	bl	8004aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel8_IRQn 1 */

  /* USER CODE END DMA1_Channel8_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000794 	.word	0x20000794

08002d98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <_sbrk+0x50>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <_sbrk+0x16>
		heap_end = &end;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <_sbrk+0x50>)
 8002daa:	4a10      	ldr	r2, [pc, #64]	; (8002dec <_sbrk+0x54>)
 8002dac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <_sbrk+0x50>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <_sbrk+0x50>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	466a      	mov	r2, sp
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d907      	bls.n	8002dd2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002dc2:	f008 f975 	bl	800b0b0 <__errno>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	220c      	movs	r2, #12
 8002dca:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd0:	e006      	b.n	8002de0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <_sbrk+0x50>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	4a03      	ldr	r2, [pc, #12]	; (8002de8 <_sbrk+0x50>)
 8002ddc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002dde:	68fb      	ldr	r3, [r7, #12]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	2000008c 	.word	0x2000008c
 8002dec:	20000958 	.word	0x20000958

08002df0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <SystemInit+0x28>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <SystemInit+0x28>)
 8002dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <SystemInit+0x28>)
 8002e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e0a:	609a      	str	r2, [r3, #8]
#endif
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim4_ch1;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b094      	sub	sp, #80	; 0x50
 8002e20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	605a      	str	r2, [r3, #4]
 8002e2c:	609a      	str	r2, [r3, #8]
 8002e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e3c:	463b      	mov	r3, r7
 8002e3e:	2234      	movs	r2, #52	; 0x34
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f008 f97a 	bl	800b13c <memset>

  htim1.Instance = TIM1;
 8002e48:	4b27      	ldr	r3, [pc, #156]	; (8002ee8 <MX_TIM1_Init+0xcc>)
 8002e4a:	4a28      	ldr	r2, [pc, #160]	; (8002eec <MX_TIM1_Init+0xd0>)
 8002e4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8002e4e:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <MX_TIM1_Init+0xcc>)
 8002e50:	22a7      	movs	r2, #167	; 0xa7
 8002e52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e54:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <MX_TIM1_Init+0xcc>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8002e5a:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <MX_TIM1_Init+0xcc>)
 8002e5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e62:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <MX_TIM1_Init+0xcc>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e68:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <MX_TIM1_Init+0xcc>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <MX_TIM1_Init+0xcc>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e74:	481c      	ldr	r0, [pc, #112]	; (8002ee8 <MX_TIM1_Init+0xcc>)
 8002e76:	f004 fb09 	bl	800748c <HAL_TIM_Base_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002e80:	f7fe feee 	bl	8001c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e88:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4815      	ldr	r0, [pc, #84]	; (8002ee8 <MX_TIM1_Init+0xcc>)
 8002e92:	f005 f87b 	bl	8007f8c <HAL_TIM_ConfigClockSource>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002e9c:	f7fe fee0 	bl	8001c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002eac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	480d      	ldr	r0, [pc, #52]	; (8002ee8 <MX_TIM1_Init+0xcc>)
 8002eb4:	f005 feec 	bl	8008c90 <HAL_TIMEx_MasterConfigSynchronization>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002ebe:	f7fe fecf 	bl	8001c60 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002eca:	463b      	mov	r3, r7
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4806      	ldr	r0, [pc, #24]	; (8002ee8 <MX_TIM1_Init+0xcc>)
 8002ed0:	f005 ff74 	bl	8008dbc <HAL_TIMEx_ConfigBreakDeadTime>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002eda:	f7fe fec1 	bl	8001c60 <Error_Handler>
  }

}
 8002ede:	bf00      	nop
 8002ee0:	3750      	adds	r7, #80	; 0x50
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200005b0 	.word	0x200005b0
 8002eec:	40012c00 	.word	0x40012c00

08002ef0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	; 0x30
 8002ef4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ef6:	f107 030c 	add.w	r3, r7, #12
 8002efa:	2224      	movs	r2, #36	; 0x24
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f008 f91c 	bl	800b13c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f04:	463b      	mov	r3, r7
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002f0e:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <MX_TIM2_Init+0xa4>)
 8002f10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002f16:	4b1f      	ldr	r3, [pc, #124]	; (8002f94 <MX_TIM2_Init+0xa4>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <MX_TIM2_Init+0xa4>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002f22:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <MX_TIM2_Init+0xa4>)
 8002f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f2a:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <MX_TIM2_Init+0xa4>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f30:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <MX_TIM2_Init+0xa4>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f36:	2303      	movs	r3, #3
 8002f38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8002f46:	2303      	movs	r3, #3
 8002f48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f52:	2300      	movs	r3, #0
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 3;
 8002f56:	2303      	movs	r3, #3
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002f5a:	f107 030c 	add.w	r3, r7, #12
 8002f5e:	4619      	mov	r1, r3
 8002f60:	480c      	ldr	r0, [pc, #48]	; (8002f94 <MX_TIM2_Init+0xa4>)
 8002f62:	f004 fe5d 	bl	8007c20 <HAL_TIM_Encoder_Init>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002f6c:	f7fe fe78 	bl	8001c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f70:	2300      	movs	r3, #0
 8002f72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f78:	463b      	mov	r3, r7
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4805      	ldr	r0, [pc, #20]	; (8002f94 <MX_TIM2_Init+0xa4>)
 8002f7e:	f005 fe87 	bl	8008c90 <HAL_TIMEx_MasterConfigSynchronization>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002f88:	f7fe fe6a 	bl	8001c60 <Error_Handler>
  }

}
 8002f8c:	bf00      	nop
 8002f8e:	3730      	adds	r7, #48	; 0x30
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	200005fc 	.word	0x200005fc

08002f98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08e      	sub	sp, #56	; 0x38
 8002f9c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	605a      	str	r2, [r3, #4]
 8002fa8:	609a      	str	r2, [r3, #8]
 8002faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fac:	f107 031c 	add.w	r3, r7, #28
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fb8:	463b      	mov	r3, r7
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	60da      	str	r2, [r3, #12]
 8002fc4:	611a      	str	r2, [r3, #16]
 8002fc6:	615a      	str	r2, [r3, #20]
 8002fc8:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002fca:	4b39      	ldr	r3, [pc, #228]	; (80030b0 <MX_TIM3_Init+0x118>)
 8002fcc:	4a39      	ldr	r2, [pc, #228]	; (80030b4 <MX_TIM3_Init+0x11c>)
 8002fce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002fd0:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <MX_TIM3_Init+0x118>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd6:	4b36      	ldr	r3, [pc, #216]	; (80030b0 <MX_TIM3_Init+0x118>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 209;
 8002fdc:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <MX_TIM3_Init+0x118>)
 8002fde:	22d1      	movs	r2, #209	; 0xd1
 8002fe0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe2:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <MX_TIM3_Init+0x118>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe8:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <MX_TIM3_Init+0x118>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fee:	4830      	ldr	r0, [pc, #192]	; (80030b0 <MX_TIM3_Init+0x118>)
 8002ff0:	f004 fa4c 	bl	800748c <HAL_TIM_Base_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002ffa:	f7fe fe31 	bl	8001c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003004:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003008:	4619      	mov	r1, r3
 800300a:	4829      	ldr	r0, [pc, #164]	; (80030b0 <MX_TIM3_Init+0x118>)
 800300c:	f004 ffbe 	bl	8007f8c <HAL_TIM_ConfigClockSource>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003016:	f7fe fe23 	bl	8001c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800301a:	4825      	ldr	r0, [pc, #148]	; (80030b0 <MX_TIM3_Init+0x118>)
 800301c:	f004 fabc 	bl	8007598 <HAL_TIM_PWM_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003026:	f7fe fe1b 	bl	8001c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800302e:	2300      	movs	r3, #0
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003032:	f107 031c 	add.w	r3, r7, #28
 8003036:	4619      	mov	r1, r3
 8003038:	481d      	ldr	r0, [pc, #116]	; (80030b0 <MX_TIM3_Init+0x118>)
 800303a:	f005 fe29 	bl	8008c90 <HAL_TIMEx_MasterConfigSynchronization>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003044:	f7fe fe0c 	bl	8001c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003048:	2360      	movs	r3, #96	; 0x60
 800304a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003050:	2300      	movs	r3, #0
 8003052:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003058:	463b      	mov	r3, r7
 800305a:	2200      	movs	r2, #0
 800305c:	4619      	mov	r1, r3
 800305e:	4814      	ldr	r0, [pc, #80]	; (80030b0 <MX_TIM3_Init+0x118>)
 8003060:	f004 fe84 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800306a:	f7fe fdf9 	bl	8001c60 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003072:	463b      	mov	r3, r7
 8003074:	2204      	movs	r2, #4
 8003076:	4619      	mov	r1, r3
 8003078:	480d      	ldr	r0, [pc, #52]	; (80030b0 <MX_TIM3_Init+0x118>)
 800307a:	f004 fe77 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8003084:	f7fe fdec 	bl	8001c60 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800308c:	463b      	mov	r3, r7
 800308e:	2208      	movs	r2, #8
 8003090:	4619      	mov	r1, r3
 8003092:	4807      	ldr	r0, [pc, #28]	; (80030b0 <MX_TIM3_Init+0x118>)
 8003094:	f004 fe6a 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 800309e:	f7fe fddf 	bl	8001c60 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80030a2:	4803      	ldr	r0, [pc, #12]	; (80030b0 <MX_TIM3_Init+0x118>)
 80030a4:	f000 f9fe 	bl	80034a4 <HAL_TIM_MspPostInit>

}
 80030a8:	bf00      	nop
 80030aa:	3738      	adds	r7, #56	; 0x38
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200004a4 	.word	0x200004a4
 80030b4:	40000400 	.word	0x40000400

080030b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08e      	sub	sp, #56	; 0x38
 80030bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030cc:	f107 031c 	add.w	r3, r7, #28
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030d8:	463b      	mov	r3, r7
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	611a      	str	r2, [r3, #16]
 80030e6:	615a      	str	r2, [r3, #20]
 80030e8:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80030ea:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <MX_TIM4_Init+0x100>)
 80030ec:	4a33      	ldr	r2, [pc, #204]	; (80031bc <MX_TIM4_Init+0x104>)
 80030ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80030f0:	4b31      	ldr	r3, [pc, #196]	; (80031b8 <MX_TIM4_Init+0x100>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f6:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <MX_TIM4_Init+0x100>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 209;
 80030fc:	4b2e      	ldr	r3, [pc, #184]	; (80031b8 <MX_TIM4_Init+0x100>)
 80030fe:	22d1      	movs	r2, #209	; 0xd1
 8003100:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003102:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <MX_TIM4_Init+0x100>)
 8003104:	2200      	movs	r2, #0
 8003106:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003108:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <MX_TIM4_Init+0x100>)
 800310a:	2200      	movs	r2, #0
 800310c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800310e:	482a      	ldr	r0, [pc, #168]	; (80031b8 <MX_TIM4_Init+0x100>)
 8003110:	f004 f9bc 	bl	800748c <HAL_TIM_Base_Init>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800311a:	f7fe fda1 	bl	8001c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800311e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003124:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003128:	4619      	mov	r1, r3
 800312a:	4823      	ldr	r0, [pc, #140]	; (80031b8 <MX_TIM4_Init+0x100>)
 800312c:	f004 ff2e 	bl	8007f8c <HAL_TIM_ConfigClockSource>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003136:	f7fe fd93 	bl	8001c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800313a:	481f      	ldr	r0, [pc, #124]	; (80031b8 <MX_TIM4_Init+0x100>)
 800313c:	f004 fa2c 	bl	8007598 <HAL_TIM_PWM_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003146:	f7fe fd8b 	bl	8001c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003152:	f107 031c 	add.w	r3, r7, #28
 8003156:	4619      	mov	r1, r3
 8003158:	4817      	ldr	r0, [pc, #92]	; (80031b8 <MX_TIM4_Init+0x100>)
 800315a:	f005 fd99 	bl	8008c90 <HAL_TIMEx_MasterConfigSynchronization>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003164:	f7fe fd7c 	bl	8001c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003168:	2360      	movs	r3, #96	; 0x60
 800316a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003178:	463b      	mov	r3, r7
 800317a:	2200      	movs	r2, #0
 800317c:	4619      	mov	r1, r3
 800317e:	480e      	ldr	r0, [pc, #56]	; (80031b8 <MX_TIM4_Init+0x100>)
 8003180:	f004 fdf4 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800318a:	f7fe fd69 	bl	8001c60 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003192:	463b      	mov	r3, r7
 8003194:	2204      	movs	r2, #4
 8003196:	4619      	mov	r1, r3
 8003198:	4807      	ldr	r0, [pc, #28]	; (80031b8 <MX_TIM4_Init+0x100>)
 800319a:	f004 fde7 	bl	8007d6c <HAL_TIM_PWM_ConfigChannel>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 80031a4:	f7fe fd5c 	bl	8001c60 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80031a8:	4803      	ldr	r0, [pc, #12]	; (80031b8 <MX_TIM4_Init+0x100>)
 80031aa:	f000 f97b 	bl	80034a4 <HAL_TIM_MspPostInit>

}
 80031ae:	bf00      	nop
 80031b0:	3738      	adds	r7, #56	; 0x38
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200003f8 	.word	0x200003f8
 80031bc:	40000800 	.word	0x40000800

080031c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a87      	ldr	r2, [pc, #540]	; (80033ec <HAL_TIM_Base_MspInit+0x22c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d10c      	bne.n	80031ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031d2:	4b87      	ldr	r3, [pc, #540]	; (80033f0 <HAL_TIM_Base_MspInit+0x230>)
 80031d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d6:	4a86      	ldr	r2, [pc, #536]	; (80033f0 <HAL_TIM_Base_MspInit+0x230>)
 80031d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031dc:	6613      	str	r3, [r2, #96]	; 0x60
 80031de:	4b84      	ldr	r3, [pc, #528]	; (80033f0 <HAL_TIM_Base_MspInit+0x230>)
 80031e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80031ea:	e0fa      	b.n	80033e2 <HAL_TIM_Base_MspInit+0x222>
  else if(tim_baseHandle->Instance==TIM3)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a80      	ldr	r2, [pc, #512]	; (80033f4 <HAL_TIM_Base_MspInit+0x234>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	f040 808e 	bne.w	8003314 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031f8:	4b7d      	ldr	r3, [pc, #500]	; (80033f0 <HAL_TIM_Base_MspInit+0x230>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	4a7c      	ldr	r2, [pc, #496]	; (80033f0 <HAL_TIM_Base_MspInit+0x230>)
 80031fe:	f043 0302 	orr.w	r3, r3, #2
 8003202:	6593      	str	r3, [r2, #88]	; 0x58
 8003204:	4b7a      	ldr	r3, [pc, #488]	; (80033f0 <HAL_TIM_Base_MspInit+0x230>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 8003210:	4b79      	ldr	r3, [pc, #484]	; (80033f8 <HAL_TIM_Base_MspInit+0x238>)
 8003212:	4a7a      	ldr	r2, [pc, #488]	; (80033fc <HAL_TIM_Base_MspInit+0x23c>)
 8003214:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003216:	4b78      	ldr	r3, [pc, #480]	; (80033f8 <HAL_TIM_Base_MspInit+0x238>)
 8003218:	223d      	movs	r2, #61	; 0x3d
 800321a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800321c:	4b76      	ldr	r3, [pc, #472]	; (80033f8 <HAL_TIM_Base_MspInit+0x238>)
 800321e:	2210      	movs	r2, #16
 8003220:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003222:	4b75      	ldr	r3, [pc, #468]	; (80033f8 <HAL_TIM_Base_MspInit+0x238>)
 8003224:	2200      	movs	r2, #0
 8003226:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003228:	4b73      	ldr	r3, [pc, #460]	; (80033f8 <HAL_TIM_Base_MspInit+0x238>)
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800322e:	4b72      	ldr	r3, [pc, #456]	; (80033f8 <HAL_TIM_Base_MspInit+0x238>)
 8003230:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003234:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003236:	4b70      	ldr	r3, [pc, #448]	; (80033f8 <HAL_TIM_Base_MspInit+0x238>)
 8003238:	2200      	movs	r2, #0
 800323a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 800323c:	4b6e      	ldr	r3, [pc, #440]	; (80033f8 <HAL_TIM_Base_MspInit+0x238>)
 800323e:	2220      	movs	r2, #32
 8003240:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003242:	4b6d      	ldr	r3, [pc, #436]	; (80033f8 <HAL_TIM_Base_MspInit+0x238>)
 8003244:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003248:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800324a:	486b      	ldr	r0, [pc, #428]	; (80033f8 <HAL_TIM_Base_MspInit+0x238>)
 800324c:	f001 fa9e 	bl	800478c <HAL_DMA_Init>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_TIM_Base_MspInit+0x9a>
      Error_Handler();
 8003256:	f7fe fd03 	bl	8001c60 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a66      	ldr	r2, [pc, #408]	; (80033f8 <HAL_TIM_Base_MspInit+0x238>)
 800325e:	625a      	str	r2, [r3, #36]	; 0x24
 8003260:	4a65      	ldr	r2, [pc, #404]	; (80033f8 <HAL_TIM_Base_MspInit+0x238>)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch2.Instance = DMA1_Channel2;
 8003266:	4b66      	ldr	r3, [pc, #408]	; (8003400 <HAL_TIM_Base_MspInit+0x240>)
 8003268:	4a66      	ldr	r2, [pc, #408]	; (8003404 <HAL_TIM_Base_MspInit+0x244>)
 800326a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800326c:	4b64      	ldr	r3, [pc, #400]	; (8003400 <HAL_TIM_Base_MspInit+0x240>)
 800326e:	223e      	movs	r2, #62	; 0x3e
 8003270:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003272:	4b63      	ldr	r3, [pc, #396]	; (8003400 <HAL_TIM_Base_MspInit+0x240>)
 8003274:	2210      	movs	r2, #16
 8003276:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003278:	4b61      	ldr	r3, [pc, #388]	; (8003400 <HAL_TIM_Base_MspInit+0x240>)
 800327a:	2200      	movs	r2, #0
 800327c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800327e:	4b60      	ldr	r3, [pc, #384]	; (8003400 <HAL_TIM_Base_MspInit+0x240>)
 8003280:	2280      	movs	r2, #128	; 0x80
 8003282:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003284:	4b5e      	ldr	r3, [pc, #376]	; (8003400 <HAL_TIM_Base_MspInit+0x240>)
 8003286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800328a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800328c:	4b5c      	ldr	r3, [pc, #368]	; (8003400 <HAL_TIM_Base_MspInit+0x240>)
 800328e:	2200      	movs	r2, #0
 8003290:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8003292:	4b5b      	ldr	r3, [pc, #364]	; (8003400 <HAL_TIM_Base_MspInit+0x240>)
 8003294:	2220      	movs	r2, #32
 8003296:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003298:	4b59      	ldr	r3, [pc, #356]	; (8003400 <HAL_TIM_Base_MspInit+0x240>)
 800329a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800329e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80032a0:	4857      	ldr	r0, [pc, #348]	; (8003400 <HAL_TIM_Base_MspInit+0x240>)
 80032a2:	f001 fa73 	bl	800478c <HAL_DMA_Init>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_TIM_Base_MspInit+0xf0>
      Error_Handler();
 80032ac:	f7fe fcd8 	bl	8001c60 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a53      	ldr	r2, [pc, #332]	; (8003400 <HAL_TIM_Base_MspInit+0x240>)
 80032b4:	629a      	str	r2, [r3, #40]	; 0x28
 80032b6:	4a52      	ldr	r2, [pc, #328]	; (8003400 <HAL_TIM_Base_MspInit+0x240>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel3;
 80032bc:	4b52      	ldr	r3, [pc, #328]	; (8003408 <HAL_TIM_Base_MspInit+0x248>)
 80032be:	4a53      	ldr	r2, [pc, #332]	; (800340c <HAL_TIM_Base_MspInit+0x24c>)
 80032c0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 80032c2:	4b51      	ldr	r3, [pc, #324]	; (8003408 <HAL_TIM_Base_MspInit+0x248>)
 80032c4:	223f      	movs	r2, #63	; 0x3f
 80032c6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032c8:	4b4f      	ldr	r3, [pc, #316]	; (8003408 <HAL_TIM_Base_MspInit+0x248>)
 80032ca:	2210      	movs	r2, #16
 80032cc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ce:	4b4e      	ldr	r3, [pc, #312]	; (8003408 <HAL_TIM_Base_MspInit+0x248>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80032d4:	4b4c      	ldr	r3, [pc, #304]	; (8003408 <HAL_TIM_Base_MspInit+0x248>)
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032da:	4b4b      	ldr	r3, [pc, #300]	; (8003408 <HAL_TIM_Base_MspInit+0x248>)
 80032dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032e2:	4b49      	ldr	r3, [pc, #292]	; (8003408 <HAL_TIM_Base_MspInit+0x248>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 80032e8:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_TIM_Base_MspInit+0x248>)
 80032ea:	2220      	movs	r2, #32
 80032ec:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032ee:	4b46      	ldr	r3, [pc, #280]	; (8003408 <HAL_TIM_Base_MspInit+0x248>)
 80032f0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80032f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80032f6:	4844      	ldr	r0, [pc, #272]	; (8003408 <HAL_TIM_Base_MspInit+0x248>)
 80032f8:	f001 fa48 	bl	800478c <HAL_DMA_Init>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_TIM_Base_MspInit+0x146>
      Error_Handler();
 8003302:	f7fe fcad 	bl	8001c60 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a3f      	ldr	r2, [pc, #252]	; (8003408 <HAL_TIM_Base_MspInit+0x248>)
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
 800330c:	4a3e      	ldr	r2, [pc, #248]	; (8003408 <HAL_TIM_Base_MspInit+0x248>)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003312:	e066      	b.n	80033e2 <HAL_TIM_Base_MspInit+0x222>
  else if(tim_baseHandle->Instance==TIM4)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a3d      	ldr	r2, [pc, #244]	; (8003410 <HAL_TIM_Base_MspInit+0x250>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d161      	bne.n	80033e2 <HAL_TIM_Base_MspInit+0x222>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800331e:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <HAL_TIM_Base_MspInit+0x230>)
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	4a33      	ldr	r2, [pc, #204]	; (80033f0 <HAL_TIM_Base_MspInit+0x230>)
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	6593      	str	r3, [r2, #88]	; 0x58
 800332a:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <HAL_TIM_Base_MspInit+0x230>)
 800332c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch1.Instance = DMA1_Channel5;
 8003336:	4b37      	ldr	r3, [pc, #220]	; (8003414 <HAL_TIM_Base_MspInit+0x254>)
 8003338:	4a37      	ldr	r2, [pc, #220]	; (8003418 <HAL_TIM_Base_MspInit+0x258>)
 800333a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 800333c:	4b35      	ldr	r3, [pc, #212]	; (8003414 <HAL_TIM_Base_MspInit+0x254>)
 800333e:	2243      	movs	r2, #67	; 0x43
 8003340:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003342:	4b34      	ldr	r3, [pc, #208]	; (8003414 <HAL_TIM_Base_MspInit+0x254>)
 8003344:	2210      	movs	r2, #16
 8003346:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003348:	4b32      	ldr	r3, [pc, #200]	; (8003414 <HAL_TIM_Base_MspInit+0x254>)
 800334a:	2200      	movs	r2, #0
 800334c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800334e:	4b31      	ldr	r3, [pc, #196]	; (8003414 <HAL_TIM_Base_MspInit+0x254>)
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003354:	4b2f      	ldr	r3, [pc, #188]	; (8003414 <HAL_TIM_Base_MspInit+0x254>)
 8003356:	f44f 7280 	mov.w	r2, #256	; 0x100
 800335a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800335c:	4b2d      	ldr	r3, [pc, #180]	; (8003414 <HAL_TIM_Base_MspInit+0x254>)
 800335e:	2200      	movs	r2, #0
 8003360:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8003362:	4b2c      	ldr	r3, [pc, #176]	; (8003414 <HAL_TIM_Base_MspInit+0x254>)
 8003364:	2220      	movs	r2, #32
 8003366:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003368:	4b2a      	ldr	r3, [pc, #168]	; (8003414 <HAL_TIM_Base_MspInit+0x254>)
 800336a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800336e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8003370:	4828      	ldr	r0, [pc, #160]	; (8003414 <HAL_TIM_Base_MspInit+0x254>)
 8003372:	f001 fa0b 	bl	800478c <HAL_DMA_Init>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_TIM_Base_MspInit+0x1c0>
      Error_Handler();
 800337c:	f7fe fc70 	bl	8001c60 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a24      	ldr	r2, [pc, #144]	; (8003414 <HAL_TIM_Base_MspInit+0x254>)
 8003384:	625a      	str	r2, [r3, #36]	; 0x24
 8003386:	4a23      	ldr	r2, [pc, #140]	; (8003414 <HAL_TIM_Base_MspInit+0x254>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 800338c:	4b23      	ldr	r3, [pc, #140]	; (800341c <HAL_TIM_Base_MspInit+0x25c>)
 800338e:	4a24      	ldr	r2, [pc, #144]	; (8003420 <HAL_TIM_Base_MspInit+0x260>)
 8003390:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Request = DMA_REQUEST_TIM4_CH2;
 8003392:	4b22      	ldr	r3, [pc, #136]	; (800341c <HAL_TIM_Base_MspInit+0x25c>)
 8003394:	2244      	movs	r2, #68	; 0x44
 8003396:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003398:	4b20      	ldr	r3, [pc, #128]	; (800341c <HAL_TIM_Base_MspInit+0x25c>)
 800339a:	2210      	movs	r2, #16
 800339c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800339e:	4b1f      	ldr	r3, [pc, #124]	; (800341c <HAL_TIM_Base_MspInit+0x25c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_TIM_Base_MspInit+0x25c>)
 80033a6:	2280      	movs	r2, #128	; 0x80
 80033a8:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033aa:	4b1c      	ldr	r3, [pc, #112]	; (800341c <HAL_TIM_Base_MspInit+0x25c>)
 80033ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033b0:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_TIM_Base_MspInit+0x25c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 80033b8:	4b18      	ldr	r3, [pc, #96]	; (800341c <HAL_TIM_Base_MspInit+0x25c>)
 80033ba:	2220      	movs	r2, #32
 80033bc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80033be:	4b17      	ldr	r3, [pc, #92]	; (800341c <HAL_TIM_Base_MspInit+0x25c>)
 80033c0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80033c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 80033c6:	4815      	ldr	r0, [pc, #84]	; (800341c <HAL_TIM_Base_MspInit+0x25c>)
 80033c8:	f001 f9e0 	bl	800478c <HAL_DMA_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_TIM_Base_MspInit+0x216>
      Error_Handler();
 80033d2:	f7fe fc45 	bl	8001c60 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a10      	ldr	r2, [pc, #64]	; (800341c <HAL_TIM_Base_MspInit+0x25c>)
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
 80033dc:	4a0f      	ldr	r2, [pc, #60]	; (800341c <HAL_TIM_Base_MspInit+0x25c>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80033e2:	bf00      	nop
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40000400 	.word	0x40000400
 80033f8:	200004f0 	.word	0x200004f0
 80033fc:	40020008 	.word	0x40020008
 8003400:	20000550 	.word	0x20000550
 8003404:	4002001c 	.word	0x4002001c
 8003408:	20000444 	.word	0x20000444
 800340c:	40020030 	.word	0x40020030
 8003410:	40000800 	.word	0x40000800
 8003414:	20000648 	.word	0x20000648
 8003418:	40020058 	.word	0x40020058
 800341c:	20000398 	.word	0x20000398
 8003420:	40020044 	.word	0x40020044

08003424 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003444:	d128      	bne.n	8003498 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003446:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	4a15      	ldr	r2, [pc, #84]	; (80034a0 <HAL_TIM_Encoder_MspInit+0x7c>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6593      	str	r3, [r2, #88]	; 0x58
 8003452:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003462:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_TIM_Encoder_MspInit+0x7c>)
 800346c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = enc_A_Pin|enc_B_Pin;
 8003476:	2303      	movs	r3, #3
 8003478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003482:	2300      	movs	r3, #0
 8003484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003486:	2301      	movs	r3, #1
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	4619      	mov	r1, r3
 8003490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003494:	f001 fc54 	bl	8004d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003498:	bf00      	nop
 800349a:	3728      	adds	r7, #40	; 0x28
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000

080034a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	; 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a31      	ldr	r2, [pc, #196]	; (8003588 <HAL_TIM_MspPostInit+0xe4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d139      	bne.n	800353a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c6:	4b31      	ldr	r3, [pc, #196]	; (800358c <HAL_TIM_MspPostInit+0xe8>)
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	4a30      	ldr	r2, [pc, #192]	; (800358c <HAL_TIM_MspPostInit+0xe8>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034d2:	4b2e      	ldr	r3, [pc, #184]	; (800358c <HAL_TIM_MspPostInit+0xe8>)
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034de:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_TIM_MspPostInit+0xe8>)
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	4a2a      	ldr	r2, [pc, #168]	; (800358c <HAL_TIM_MspPostInit+0xe8>)
 80034e4:	f043 0302 	orr.w	r3, r3, #2
 80034e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ea:	4b28      	ldr	r3, [pc, #160]	; (800358c <HAL_TIM_MspPostInit+0xe8>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = str_1_Pin|str_2_Pin;
 80034f6:	23c0      	movs	r3, #192	; 0xc0
 80034f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fa:	2302      	movs	r3, #2
 80034fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003506:	2302      	movs	r3, #2
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350a:	f107 0314 	add.w	r3, r7, #20
 800350e:	4619      	mov	r1, r3
 8003510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003514:	f001 fc14 	bl	8004d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = str_3_Pin;
 8003518:	2301      	movs	r3, #1
 800351a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351c:	2302      	movs	r3, #2
 800351e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003524:	2300      	movs	r3, #0
 8003526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003528:	2302      	movs	r3, #2
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(str_3_GPIO_Port, &GPIO_InitStruct);
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4619      	mov	r1, r3
 8003532:	4817      	ldr	r0, [pc, #92]	; (8003590 <HAL_TIM_MspPostInit+0xec>)
 8003534:	f001 fc04 	bl	8004d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003538:	e022      	b.n	8003580 <HAL_TIM_MspPostInit+0xdc>
  else if(timHandle->Instance==TIM4)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a15      	ldr	r2, [pc, #84]	; (8003594 <HAL_TIM_MspPostInit+0xf0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d11d      	bne.n	8003580 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003544:	4b11      	ldr	r3, [pc, #68]	; (800358c <HAL_TIM_MspPostInit+0xe8>)
 8003546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003548:	4a10      	ldr	r2, [pc, #64]	; (800358c <HAL_TIM_MspPostInit+0xe8>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003550:	4b0e      	ldr	r3, [pc, #56]	; (800358c <HAL_TIM_MspPostInit+0xe8>)
 8003552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = str_5_Pin|str_4_Pin;
 800355c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003562:	2302      	movs	r3, #2
 8003564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800356e:	230a      	movs	r3, #10
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003572:	f107 0314 	add.w	r3, r7, #20
 8003576:	4619      	mov	r1, r3
 8003578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800357c:	f001 fbe0 	bl	8004d40 <HAL_GPIO_Init>
}
 8003580:	bf00      	nop
 8003582:	3728      	adds	r7, #40	; 0x28
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40000400 	.word	0x40000400
 800358c:	40021000 	.word	0x40021000
 8003590:	48000400 	.word	0x48000400
 8003594:	40000800 	.word	0x40000800

08003598 <init_handler>:

ClockVars cv = {0};
ServoCal sc = {0};


void init_handler() {
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
	cv.state = 99;
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <init_handler+0x18>)
 800359e:	2263      	movs	r2, #99	; 0x63
 80035a0:	70da      	strb	r2, [r3, #3]
	ringbuff_set_evt_fn(&rx_rb, Process_Uart_In);
 80035a2:	4904      	ldr	r1, [pc, #16]	; (80035b4 <init_handler+0x1c>)
 80035a4:	4804      	ldr	r0, [pc, #16]	; (80035b8 <init_handler+0x20>)
 80035a6:	f7fe fdc3 	bl	8002130 <ringbuff_set_evt_fn>
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000090 	.word	0x20000090
 80035b4:	080035bd 	.word	0x080035bd
 80035b8:	20000188 	.word	0x20000188

080035bc <Process_Uart_In>:


void Process_Uart_In(ringbuff_t *buff, ringbuff_evt_type_t type, size_t len) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	460b      	mov	r3, r1
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80035ca:	2120      	movs	r1, #32
 80035cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d0:	f001 fd50 	bl	8005074 <HAL_GPIO_TogglePin>
	if (type == RINGBUFF_EVT_READ) {
 80035d4:	7afb      	ldrb	r3, [r7, #11]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f040 80a5 	bne.w	8003726 <Process_Uart_In+0x16a>
		if (!(memcmp(&pbuff[len - 4], &eom, 4))) {
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3b04      	subs	r3, #4
 80035e0:	4a53      	ldr	r2, [pc, #332]	; (8003730 <Process_Uart_In+0x174>)
 80035e2:	4413      	add	r3, r2
 80035e4:	2204      	movs	r2, #4
 80035e6:	4953      	ldr	r1, [pc, #332]	; (8003734 <Process_Uart_In+0x178>)
 80035e8:	4618      	mov	r0, r3
 80035ea:	f007 fd8b 	bl	800b104 <memcmp>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f040 8094 	bne.w	800371e <Process_Uart_In+0x162>
			switch(pbuff[0]){
 80035f6:	4b4e      	ldr	r3, [pc, #312]	; (8003730 <Process_Uart_In+0x174>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	3b41      	subs	r3, #65	; 0x41
 80035fc:	2b19      	cmp	r3, #25
 80035fe:	f200 8092 	bhi.w	8003726 <Process_Uart_In+0x16a>
 8003602:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <Process_Uart_In+0x4c>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	080036a1 	.word	0x080036a1
 800360c:	08003727 	.word	0x08003727
 8003610:	08003727 	.word	0x08003727
 8003614:	08003727 	.word	0x08003727
 8003618:	08003727 	.word	0x08003727
 800361c:	08003727 	.word	0x08003727
 8003620:	08003727 	.word	0x08003727
 8003624:	08003671 	.word	0x08003671
 8003628:	08003727 	.word	0x08003727
 800362c:	08003727 	.word	0x08003727
 8003630:	08003727 	.word	0x08003727
 8003634:	08003727 	.word	0x08003727
 8003638:	08003681 	.word	0x08003681
 800363c:	08003727 	.word	0x08003727
 8003640:	08003727 	.word	0x08003727
 8003644:	08003727 	.word	0x08003727
 8003648:	08003727 	.word	0x08003727
 800364c:	08003727 	.word	0x08003727
 8003650:	08003691 	.word	0x08003691
 8003654:	080036c1 	.word	0x080036c1
 8003658:	08003727 	.word	0x08003727
 800365c:	08003727 	.word	0x08003727
 8003660:	08003727 	.word	0x08003727
 8003664:	08003727 	.word	0x08003727
 8003668:	08003727 	.word	0x08003727
 800366c:	080036d7 	.word	0x080036d7
				case 'H':	// Get value to set Hours
					cv.hms[0] = pbuff[1];
 8003670:	4b2f      	ldr	r3, [pc, #188]	; (8003730 <Process_Uart_In+0x174>)
 8003672:	785a      	ldrb	r2, [r3, #1]
 8003674:	4b30      	ldr	r3, [pc, #192]	; (8003738 <Process_Uart_In+0x17c>)
 8003676:	701a      	strb	r2, [r3, #0]
					cv.state = 1;
 8003678:	4b2f      	ldr	r3, [pc, #188]	; (8003738 <Process_Uart_In+0x17c>)
 800367a:	2201      	movs	r2, #1
 800367c:	70da      	strb	r2, [r3, #3]
					break;
 800367e:	e052      	b.n	8003726 <Process_Uart_In+0x16a>
				case 'M':	// Get value to set Minutes
					cv.hms[1] = pbuff[1];
 8003680:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <Process_Uart_In+0x174>)
 8003682:	785a      	ldrb	r2, [r3, #1]
 8003684:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <Process_Uart_In+0x17c>)
 8003686:	705a      	strb	r2, [r3, #1]
					cv.state = 2;
 8003688:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <Process_Uart_In+0x17c>)
 800368a:	2202      	movs	r2, #2
 800368c:	70da      	strb	r2, [r3, #3]
					break;
 800368e:	e04a      	b.n	8003726 <Process_Uart_In+0x16a>
				case 'S':	// Get value to set Seconds
					cv.hms[2] = pbuff[1];
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <Process_Uart_In+0x174>)
 8003692:	785a      	ldrb	r2, [r3, #1]
 8003694:	4b28      	ldr	r3, [pc, #160]	; (8003738 <Process_Uart_In+0x17c>)
 8003696:	709a      	strb	r2, [r3, #2]
					cv.state = 3;
 8003698:	4b27      	ldr	r3, [pc, #156]	; (8003738 <Process_Uart_In+0x17c>)
 800369a:	2203      	movs	r2, #3
 800369c:	70da      	strb	r2, [r3, #3]
					break;
 800369e:	e042      	b.n	8003726 <Process_Uart_In+0x16a>
				case 'A':	// Get values to set all time values
					cv.hms[0] = pbuff[1];//H
 80036a0:	4b23      	ldr	r3, [pc, #140]	; (8003730 <Process_Uart_In+0x174>)
 80036a2:	785a      	ldrb	r2, [r3, #1]
 80036a4:	4b24      	ldr	r3, [pc, #144]	; (8003738 <Process_Uart_In+0x17c>)
 80036a6:	701a      	strb	r2, [r3, #0]
					cv.hms[1] = pbuff[2];//M
 80036a8:	4b21      	ldr	r3, [pc, #132]	; (8003730 <Process_Uart_In+0x174>)
 80036aa:	789a      	ldrb	r2, [r3, #2]
 80036ac:	4b22      	ldr	r3, [pc, #136]	; (8003738 <Process_Uart_In+0x17c>)
 80036ae:	705a      	strb	r2, [r3, #1]
					cv.hms[2] = pbuff[3];//S
 80036b0:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <Process_Uart_In+0x174>)
 80036b2:	78da      	ldrb	r2, [r3, #3]
 80036b4:	4b20      	ldr	r3, [pc, #128]	; (8003738 <Process_Uart_In+0x17c>)
 80036b6:	709a      	strb	r2, [r3, #2]
					cv.state = 4;
 80036b8:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <Process_Uart_In+0x17c>)
 80036ba:	2204      	movs	r2, #4
 80036bc:	70da      	strb	r2, [r3, #3]
					break;
 80036be:	e032      	b.n	8003726 <Process_Uart_In+0x16a>
				case 'T':
					clock_state = !clock_state; // Toggle Clock State
 80036c0:	4b1e      	ldr	r3, [pc, #120]	; (800373c <Process_Uart_In+0x180>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b1a      	ldr	r3, [pc, #104]	; (800373c <Process_Uart_In+0x180>)
 80036d2:	701a      	strb	r2, [r3, #0]
					break;
 80036d4:	e027      	b.n	8003726 <Process_Uart_In+0x16a>
				case 'Z':						// Set servos. Can only work when Clock state is 0
					if(clock_state == 0){
 80036d6:	4b19      	ldr	r3, [pc, #100]	; (800373c <Process_Uart_In+0x180>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d123      	bne.n	8003726 <Process_Uart_In+0x16a>
						sc.d_srv[0] = pbuff[1]; //HR_Tens
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <Process_Uart_In+0x174>)
 80036e0:	785a      	ldrb	r2, [r3, #1]
 80036e2:	4b17      	ldr	r3, [pc, #92]	; (8003740 <Process_Uart_In+0x184>)
 80036e4:	701a      	strb	r2, [r3, #0]
						sc.d_srv[1] = pbuff[2]; //HR_Ones
 80036e6:	4b12      	ldr	r3, [pc, #72]	; (8003730 <Process_Uart_In+0x174>)
 80036e8:	789a      	ldrb	r2, [r3, #2]
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <Process_Uart_In+0x184>)
 80036ec:	705a      	strb	r2, [r3, #1]
						sc.d_srv[2] = pbuff[3]; //MIN_Tens
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <Process_Uart_In+0x174>)
 80036f0:	78da      	ldrb	r2, [r3, #3]
 80036f2:	4b13      	ldr	r3, [pc, #76]	; (8003740 <Process_Uart_In+0x184>)
 80036f4:	709a      	strb	r2, [r3, #2]
						sc.d_srv[3] = pbuff[4]; //MIN_Ones
 80036f6:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <Process_Uart_In+0x174>)
 80036f8:	791a      	ldrb	r2, [r3, #4]
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <Process_Uart_In+0x184>)
 80036fc:	70da      	strb	r2, [r3, #3]
						sc.angle = (pbuff[5]<<8)|(pbuff[6]&0x00FF); // Create 16 bit value from two 8 bit values
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <Process_Uart_In+0x174>)
 8003700:	795b      	ldrb	r3, [r3, #5]
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	b21a      	sxth	r2, r3
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <Process_Uart_In+0x174>)
 8003708:	799b      	ldrb	r3, [r3, #6]
 800370a:	b21b      	sxth	r3, r3
 800370c:	4313      	orrs	r3, r2
 800370e:	b21b      	sxth	r3, r3
 8003710:	b29a      	uxth	r2, r3
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <Process_Uart_In+0x184>)
 8003714:	809a      	strh	r2, [r3, #4]
						cal_servos(&sc);
 8003716:	480a      	ldr	r0, [pc, #40]	; (8003740 <Process_Uart_In+0x184>)
 8003718:	f000 f866 	bl	80037e8 <cal_servos>
		}
		else {
			cv.state = 0;
		}
	}
}
 800371c:	e003      	b.n	8003726 <Process_Uart_In+0x16a>
			cv.state = 0;
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <Process_Uart_In+0x17c>)
 8003720:	2200      	movs	r2, #0
 8003722:	70da      	strb	r2, [r3, #3]
}
 8003724:	e7ff      	b.n	8003726 <Process_Uart_In+0x16a>
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	200000a8 	.word	0x200000a8
 8003734:	0800bc3c 	.word	0x0800bc3c
 8003738:	20000090 	.word	0x20000090
 800373c:	20000320 	.word	0x20000320
 8003740:	20000094 	.word	0x20000094

08003744 <change_time>:

void change_time(sgTime *Time, ClockVars *cv){
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
	switch(cv->state){
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	78db      	ldrb	r3, [r3, #3]
 8003752:	2b04      	cmp	r3, #4
 8003754:	dc10      	bgt.n	8003778 <change_time+0x34>
 8003756:	2b00      	cmp	r3, #0
 8003758:	dd36      	ble.n	80037c8 <change_time+0x84>
 800375a:	3b01      	subs	r3, #1
 800375c:	2b03      	cmp	r3, #3
 800375e:	d833      	bhi.n	80037c8 <change_time+0x84>
 8003760:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <change_time+0x24>)
 8003762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003766:	bf00      	nop
 8003768:	0800377f 	.word	0x0800377f
 800376c:	08003791 	.word	0x08003791
 8003770:	080037a3 	.word	0x080037a3
 8003774:	080037b5 	.word	0x080037b5
 8003778:	2b63      	cmp	r3, #99	; 0x63
 800377a:	d030      	beq.n	80037de <change_time+0x9a>
			set_time_all(Time, cv->hms[0], cv->hms[1], cv->hms[2]);// Set all time values
			break;
		case 99:
			return;
		default:
			break;
 800377c:	e024      	b.n	80037c8 <change_time+0x84>
			set_time(Time, cv->hms[0], cv->state);// Set Hours
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	7819      	ldrb	r1, [r3, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	78db      	ldrb	r3, [r3, #3]
 8003786:	461a      	mov	r2, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7fd fc1f 	bl	8000fcc <set_time>
			break;
 800378e:	e01c      	b.n	80037ca <change_time+0x86>
			set_time(Time, cv->hms[1], cv->state);// Set Minutes
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	7859      	ldrb	r1, [r3, #1]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	78db      	ldrb	r3, [r3, #3]
 8003798:	461a      	mov	r2, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fc16 	bl	8000fcc <set_time>
			break;
 80037a0:	e013      	b.n	80037ca <change_time+0x86>
			set_time(Time, cv->hms[2], cv->state);// Set Seconds
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	7899      	ldrb	r1, [r3, #2]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	78db      	ldrb	r3, [r3, #3]
 80037aa:	461a      	mov	r2, r3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7fd fc0d 	bl	8000fcc <set_time>
			break;
 80037b2:	e00a      	b.n	80037ca <change_time+0x86>
			set_time_all(Time, cv->hms[0], cv->hms[1], cv->hms[2]);// Set all time values
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	7819      	ldrb	r1, [r3, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	785a      	ldrb	r2, [r3, #1]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	789b      	ldrb	r3, [r3, #2]
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fd fc55 	bl	8001070 <set_time_all>
			break;
 80037c6:	e000      	b.n	80037ca <change_time+0x86>
			break;
 80037c8:	bf00      	nop
	}
	cv->state = 99;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2263      	movs	r2, #99	; 0x63
 80037ce:	70da      	strb	r2, [r3, #3]
	get_time(Time);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7fd fc7d 	bl	80010d0 <get_time>
	serialTime(Time);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd fc92 	bl	8001100 <serialTime>
 80037dc:	e000      	b.n	80037e0 <change_time+0x9c>
			return;
 80037de:	bf00      	nop
}
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop

080037e8 <cal_servos>:

void cal_servos(ServoCal *s){
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	; 0x28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4; i++){
 80037f0:	2300      	movs	r3, #0
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
 80037f4:	e0c0      	b.n	8003978 <cal_servos+0x190>
		uint8_t d = s->d_srv[i];
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	4413      	add	r3, r2
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	73fb      	strb	r3, [r7, #15]
		if(d != 0){
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80b4 	beq.w	8003970 <cal_servos+0x188>
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	2b03      	cmp	r3, #3
 800380c:	f200 80b1 	bhi.w	8003972 <cal_servos+0x18a>
 8003810:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <cal_servos+0x30>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	08003829 	.word	0x08003829
 800381c:	0800387b 	.word	0x0800387b
 8003820:	080038cd 	.word	0x080038cd
 8003824:	0800391f 	.word	0x0800391f
			uint8_t k;
			switch(i){
				case 0:
					k = 6;
 8003828:	2306      	movs	r3, #6
 800382a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					for(int j = 0;j<7;j++){
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	e018      	b.n	8003866 <cal_servos+0x7e>
						D_HrTen.set_array[k] = ((1<<j)&d);
 8003834:	2201      	movs	r2, #1
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	b25a      	sxtb	r2, r3
 800383e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003842:	4013      	ands	r3, r2
 8003844:	b25a      	sxtb	r2, r3
 8003846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800384a:	b2d1      	uxtb	r1, r2
 800384c:	4a4f      	ldr	r2, [pc, #316]	; (800398c <cal_servos+0x1a4>)
 800384e:	4413      	add	r3, r2
 8003850:	460a      	mov	r2, r1
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						k--;
 8003856:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800385a:	3b01      	subs	r3, #1
 800385c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					for(int j = 0;j<7;j++){
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3301      	adds	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	2b06      	cmp	r3, #6
 800386a:	dde3      	ble.n	8003834 <cal_servos+0x4c>
					}
					set_Digit_servo_angle(&D_HrTen, s->angle);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	889b      	ldrh	r3, [r3, #4]
 8003870:	4619      	mov	r1, r3
 8003872:	4846      	ldr	r0, [pc, #280]	; (800398c <cal_servos+0x1a4>)
 8003874:	f7ff f948 	bl	8002b08 <set_Digit_servo_angle>
					break;
 8003878:	e07b      	b.n	8003972 <cal_servos+0x18a>
				case 1:
					k = 6;
 800387a:	2306      	movs	r3, #6
 800387c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					for(int j = 0;j<7;j++){
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	e018      	b.n	80038b8 <cal_servos+0xd0>
						D_HrOne.set_array[k] = ((1<<j)&d);
 8003886:	2201      	movs	r2, #1
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	b25a      	sxtb	r2, r3
 8003890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003894:	4013      	ands	r3, r2
 8003896:	b25a      	sxtb	r2, r3
 8003898:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800389c:	b2d1      	uxtb	r1, r2
 800389e:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <cal_servos+0x1a8>)
 80038a0:	4413      	add	r3, r2
 80038a2:	460a      	mov	r2, r1
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						k--;
 80038a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038ac:	3b01      	subs	r3, #1
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					for(int j = 0;j<7;j++){
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b06      	cmp	r3, #6
 80038bc:	dde3      	ble.n	8003886 <cal_servos+0x9e>
					}
					set_Digit_servo_angle(&D_HrOne, s->angle);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	889b      	ldrh	r3, [r3, #4]
 80038c2:	4619      	mov	r1, r3
 80038c4:	4832      	ldr	r0, [pc, #200]	; (8003990 <cal_servos+0x1a8>)
 80038c6:	f7ff f91f 	bl	8002b08 <set_Digit_servo_angle>
					break;
 80038ca:	e052      	b.n	8003972 <cal_servos+0x18a>
				case 2:
					k = 6;
 80038cc:	2306      	movs	r3, #6
 80038ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					for(int j = 0;j<7;j++){
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	e018      	b.n	800390a <cal_servos+0x122>
						D_MnTen.set_array[k] = ((1<<j)&d);
 80038d8:	2201      	movs	r2, #1
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	b25a      	sxtb	r2, r3
 80038e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e6:	4013      	ands	r3, r2
 80038e8:	b25a      	sxtb	r2, r3
 80038ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038ee:	b2d1      	uxtb	r1, r2
 80038f0:	4a28      	ldr	r2, [pc, #160]	; (8003994 <cal_servos+0x1ac>)
 80038f2:	4413      	add	r3, r2
 80038f4:	460a      	mov	r2, r1
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						k--;
 80038fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038fe:	3b01      	subs	r3, #1
 8003900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					for(int j = 0;j<7;j++){
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	3301      	adds	r3, #1
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2b06      	cmp	r3, #6
 800390e:	dde3      	ble.n	80038d8 <cal_servos+0xf0>
					}
					set_Digit_servo_angle(&D_MnTen, s->angle);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	889b      	ldrh	r3, [r3, #4]
 8003914:	4619      	mov	r1, r3
 8003916:	481f      	ldr	r0, [pc, #124]	; (8003994 <cal_servos+0x1ac>)
 8003918:	f7ff f8f6 	bl	8002b08 <set_Digit_servo_angle>
					break;
 800391c:	e029      	b.n	8003972 <cal_servos+0x18a>
				case 3:
					k = 6;
 800391e:	2306      	movs	r3, #6
 8003920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					for(int j = 0;j<7;j++){
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	e018      	b.n	800395c <cal_servos+0x174>
						D_MnOne.set_array[k] = ((1<<j)&d);
 800392a:	2201      	movs	r2, #1
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	b25a      	sxtb	r2, r3
 8003934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003938:	4013      	ands	r3, r2
 800393a:	b25a      	sxtb	r2, r3
 800393c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003940:	b2d1      	uxtb	r1, r2
 8003942:	4a15      	ldr	r2, [pc, #84]	; (8003998 <cal_servos+0x1b0>)
 8003944:	4413      	add	r3, r2
 8003946:	460a      	mov	r2, r1
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						k--;
 800394c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003950:	3b01      	subs	r3, #1
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					for(int j = 0;j<7;j++){
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	3301      	adds	r3, #1
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	2b06      	cmp	r3, #6
 8003960:	dde3      	ble.n	800392a <cal_servos+0x142>
					}
					set_Digit_servo_angle(&D_MnOne, s->angle);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	889b      	ldrh	r3, [r3, #4]
 8003966:	4619      	mov	r1, r3
 8003968:	480b      	ldr	r0, [pc, #44]	; (8003998 <cal_servos+0x1b0>)
 800396a:	f7ff f8cd 	bl	8002b08 <set_Digit_servo_angle>
					break;
 800396e:	e000      	b.n	8003972 <cal_servos+0x18a>
			}
		}
 8003970:	bf00      	nop
	for(int i = 0; i < 4; i++){
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	3301      	adds	r3, #1
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	2b03      	cmp	r3, #3
 800397c:	f77f af3b 	ble.w	80037f6 <cal_servos+0xe>
	}
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	3728      	adds	r7, #40	; 0x28
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000288 	.word	0x20000288
 8003990:	200002d4 	.word	0x200002d4
 8003994:	2000023c 	.word	0x2000023c
 8003998:	20000324 	.word	0x20000324

0800399c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_uart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 80039a0:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <MX_LPUART1_UART_Init+0x84>)
 80039a2:	4a20      	ldr	r2, [pc, #128]	; (8003a24 <MX_LPUART1_UART_Init+0x88>)
 80039a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80039a6:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <MX_LPUART1_UART_Init+0x84>)
 80039a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039ac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039ae:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <MX_LPUART1_UART_Init+0x84>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80039b4:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <MX_LPUART1_UART_Init+0x84>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80039ba:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <MX_LPUART1_UART_Init+0x84>)
 80039bc:	2200      	movs	r2, #0
 80039be:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80039c0:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <MX_LPUART1_UART_Init+0x84>)
 80039c2:	220c      	movs	r2, #12
 80039c4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039c6:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <MX_LPUART1_UART_Init+0x84>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039cc:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <MX_LPUART1_UART_Init+0x84>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039d2:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <MX_LPUART1_UART_Init+0x84>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80039d8:	4811      	ldr	r0, [pc, #68]	; (8003a20 <MX_LPUART1_UART_Init+0x84>)
 80039da:	f005 faa1 	bl	8008f20 <HAL_UART_Init>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80039e4:	f7fe f93c 	bl	8001c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039e8:	2100      	movs	r1, #0
 80039ea:	480d      	ldr	r0, [pc, #52]	; (8003a20 <MX_LPUART1_UART_Init+0x84>)
 80039ec:	f007 fa7b 	bl	800aee6 <HAL_UARTEx_SetTxFifoThreshold>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 80039f6:	f7fe f933 	bl	8001c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039fa:	2100      	movs	r1, #0
 80039fc:	4808      	ldr	r0, [pc, #32]	; (8003a20 <MX_LPUART1_UART_Init+0x84>)
 80039fe:	f007 fab0 	bl	800af62 <HAL_UARTEx_SetRxFifoThreshold>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8003a08:	f7fe f92a 	bl	8001c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003a0c:	4804      	ldr	r0, [pc, #16]	; (8003a20 <MX_LPUART1_UART_Init+0x84>)
 8003a0e:	f007 fa31 	bl	800ae74 <HAL_UARTEx_DisableFifoMode>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8003a18:	f7fe f922 	bl	8001c60 <Error_Handler>
  }

}
 8003a1c:	bf00      	nop
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000708 	.word	0x20000708
 8003a24:	40008000 	.word	0x40008000

08003a28 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8003a2c:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003a2e:	4a23      	ldr	r2, [pc, #140]	; (8003abc <MX_UART4_Init+0x94>)
 8003a30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003a32:	4b21      	ldr	r3, [pc, #132]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003a3a:	4b1f      	ldr	r3, [pc, #124]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003a40:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003a46:	4b1c      	ldr	r3, [pc, #112]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003a4c:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003a4e:	220c      	movs	r2, #12
 8003a50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a52:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a58:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a5e:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a64:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003a70:	4811      	ldr	r0, [pc, #68]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003a72:	f005 fa55 	bl	8008f20 <HAL_UART_Init>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003a7c:	f7fe f8f0 	bl	8001c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a80:	2100      	movs	r1, #0
 8003a82:	480d      	ldr	r0, [pc, #52]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003a84:	f007 fa2f 	bl	800aee6 <HAL_UARTEx_SetTxFifoThreshold>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003a8e:	f7fe f8e7 	bl	8001c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a92:	2100      	movs	r1, #0
 8003a94:	4808      	ldr	r0, [pc, #32]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003a96:	f007 fa64 	bl	800af62 <HAL_UARTEx_SetRxFifoThreshold>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003aa0:	f7fe f8de 	bl	8001c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003aa4:	4804      	ldr	r0, [pc, #16]	; (8003ab8 <MX_UART4_Init+0x90>)
 8003aa6:	f007 f9e5 	bl	800ae74 <HAL_UARTEx_DisableFifoMode>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003ab0:	f7fe f8d6 	bl	8001c60 <Error_Handler>
  }

}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000854 	.word	0x20000854
 8003abc:	40004c00 	.word	0x40004c00

08003ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08c      	sub	sp, #48	; 0x30
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	f107 031c 	add.w	r3, r7, #28
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a8a      	ldr	r2, [pc, #552]	; (8003d08 <HAL_UART_MspInit+0x248>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	f040 8084 	bne.w	8003bec <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003ae4:	4b89      	ldr	r3, [pc, #548]	; (8003d0c <HAL_UART_MspInit+0x24c>)
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	4a88      	ldr	r2, [pc, #544]	; (8003d0c <HAL_UART_MspInit+0x24c>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003af0:	4b86      	ldr	r3, [pc, #536]	; (8003d0c <HAL_UART_MspInit+0x24c>)
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afc:	4b83      	ldr	r3, [pc, #524]	; (8003d0c <HAL_UART_MspInit+0x24c>)
 8003afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b00:	4a82      	ldr	r2, [pc, #520]	; (8003d0c <HAL_UART_MspInit+0x24c>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b08:	4b80      	ldr	r3, [pc, #512]	; (8003d0c <HAL_UART_MspInit+0x24c>)
 8003b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003b14:	230c      	movs	r3, #12
 8003b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b20:	2300      	movs	r3, #0
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003b24:	230c      	movs	r3, #12
 8003b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b28:	f107 031c 	add.w	r3, r7, #28
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b32:	f001 f905 	bl	8004d40 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel7;
 8003b36:	4b76      	ldr	r3, [pc, #472]	; (8003d10 <HAL_UART_MspInit+0x250>)
 8003b38:	4a76      	ldr	r2, [pc, #472]	; (8003d14 <HAL_UART_MspInit+0x254>)
 8003b3a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003b3c:	4b74      	ldr	r3, [pc, #464]	; (8003d10 <HAL_UART_MspInit+0x250>)
 8003b3e:	2222      	movs	r2, #34	; 0x22
 8003b40:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b42:	4b73      	ldr	r3, [pc, #460]	; (8003d10 <HAL_UART_MspInit+0x250>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b48:	4b71      	ldr	r3, [pc, #452]	; (8003d10 <HAL_UART_MspInit+0x250>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b4e:	4b70      	ldr	r3, [pc, #448]	; (8003d10 <HAL_UART_MspInit+0x250>)
 8003b50:	2280      	movs	r2, #128	; 0x80
 8003b52:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b54:	4b6e      	ldr	r3, [pc, #440]	; (8003d10 <HAL_UART_MspInit+0x250>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b5a:	4b6d      	ldr	r3, [pc, #436]	; (8003d10 <HAL_UART_MspInit+0x250>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8003b60:	4b6b      	ldr	r3, [pc, #428]	; (8003d10 <HAL_UART_MspInit+0x250>)
 8003b62:	2220      	movs	r2, #32
 8003b64:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b66:	4b6a      	ldr	r3, [pc, #424]	; (8003d10 <HAL_UART_MspInit+0x250>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003b6c:	4868      	ldr	r0, [pc, #416]	; (8003d10 <HAL_UART_MspInit+0x250>)
 8003b6e:	f000 fe0d 	bl	800478c <HAL_DMA_Init>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8003b78:	f7fe f872 	bl	8001c60 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a64      	ldr	r2, [pc, #400]	; (8003d10 <HAL_UART_MspInit+0x250>)
 8003b80:	679a      	str	r2, [r3, #120]	; 0x78
 8003b82:	4a63      	ldr	r2, [pc, #396]	; (8003d10 <HAL_UART_MspInit+0x250>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel8;
 8003b88:	4b63      	ldr	r3, [pc, #396]	; (8003d18 <HAL_UART_MspInit+0x258>)
 8003b8a:	4a64      	ldr	r2, [pc, #400]	; (8003d1c <HAL_UART_MspInit+0x25c>)
 8003b8c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003b8e:	4b62      	ldr	r3, [pc, #392]	; (8003d18 <HAL_UART_MspInit+0x258>)
 8003b90:	2223      	movs	r2, #35	; 0x23
 8003b92:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b94:	4b60      	ldr	r3, [pc, #384]	; (8003d18 <HAL_UART_MspInit+0x258>)
 8003b96:	2210      	movs	r2, #16
 8003b98:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b9a:	4b5f      	ldr	r3, [pc, #380]	; (8003d18 <HAL_UART_MspInit+0x258>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ba0:	4b5d      	ldr	r3, [pc, #372]	; (8003d18 <HAL_UART_MspInit+0x258>)
 8003ba2:	2280      	movs	r2, #128	; 0x80
 8003ba4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ba6:	4b5c      	ldr	r3, [pc, #368]	; (8003d18 <HAL_UART_MspInit+0x258>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bac:	4b5a      	ldr	r3, [pc, #360]	; (8003d18 <HAL_UART_MspInit+0x258>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_CIRCULAR;
 8003bb2:	4b59      	ldr	r3, [pc, #356]	; (8003d18 <HAL_UART_MspInit+0x258>)
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bb8:	4b57      	ldr	r3, [pc, #348]	; (8003d18 <HAL_UART_MspInit+0x258>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003bbe:	4856      	ldr	r0, [pc, #344]	; (8003d18 <HAL_UART_MspInit+0x258>)
 8003bc0:	f000 fde4 	bl	800478c <HAL_DMA_Init>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8003bca:	f7fe f849 	bl	8001c60 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a51      	ldr	r2, [pc, #324]	; (8003d18 <HAL_UART_MspInit+0x258>)
 8003bd2:	675a      	str	r2, [r3, #116]	; 0x74
 8003bd4:	4a50      	ldr	r2, [pc, #320]	; (8003d18 <HAL_UART_MspInit+0x258>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2100      	movs	r1, #0
 8003bde:	205b      	movs	r0, #91	; 0x5b
 8003be0:	f000 fd9f 	bl	8004722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003be4:	205b      	movs	r0, #91	; 0x5b
 8003be6:	f000 fdb6 	bl	8004756 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8003bea:	e088      	b.n	8003cfe <HAL_UART_MspInit+0x23e>
  else if(uartHandle->Instance==UART4)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a4b      	ldr	r2, [pc, #300]	; (8003d20 <HAL_UART_MspInit+0x260>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	f040 8083 	bne.w	8003cfe <HAL_UART_MspInit+0x23e>
    __HAL_RCC_UART4_CLK_ENABLE();
 8003bf8:	4b44      	ldr	r3, [pc, #272]	; (8003d0c <HAL_UART_MspInit+0x24c>)
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	4a43      	ldr	r2, [pc, #268]	; (8003d0c <HAL_UART_MspInit+0x24c>)
 8003bfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c02:	6593      	str	r3, [r2, #88]	; 0x58
 8003c04:	4b41      	ldr	r3, [pc, #260]	; (8003d0c <HAL_UART_MspInit+0x24c>)
 8003c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c10:	4b3e      	ldr	r3, [pc, #248]	; (8003d0c <HAL_UART_MspInit+0x24c>)
 8003c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c14:	4a3d      	ldr	r2, [pc, #244]	; (8003d0c <HAL_UART_MspInit+0x24c>)
 8003c16:	f043 0304 	orr.w	r3, r3, #4
 8003c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c1c:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <HAL_UART_MspInit+0x24c>)
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c36:	2300      	movs	r3, #0
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003c3a:	2305      	movs	r3, #5
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c3e:	f107 031c 	add.w	r3, r7, #28
 8003c42:	4619      	mov	r1, r3
 8003c44:	4837      	ldr	r0, [pc, #220]	; (8003d24 <HAL_UART_MspInit+0x264>)
 8003c46:	f001 f87b 	bl	8004d40 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Channel6;
 8003c4a:	4b37      	ldr	r3, [pc, #220]	; (8003d28 <HAL_UART_MspInit+0x268>)
 8003c4c:	4a37      	ldr	r2, [pc, #220]	; (8003d2c <HAL_UART_MspInit+0x26c>)
 8003c4e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8003c50:	4b35      	ldr	r3, [pc, #212]	; (8003d28 <HAL_UART_MspInit+0x268>)
 8003c52:	221e      	movs	r2, #30
 8003c54:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c56:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <HAL_UART_MspInit+0x268>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c5c:	4b32      	ldr	r3, [pc, #200]	; (8003d28 <HAL_UART_MspInit+0x268>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c62:	4b31      	ldr	r3, [pc, #196]	; (8003d28 <HAL_UART_MspInit+0x268>)
 8003c64:	2280      	movs	r2, #128	; 0x80
 8003c66:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c68:	4b2f      	ldr	r3, [pc, #188]	; (8003d28 <HAL_UART_MspInit+0x268>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c6e:	4b2e      	ldr	r3, [pc, #184]	; (8003d28 <HAL_UART_MspInit+0x268>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8003c74:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <HAL_UART_MspInit+0x268>)
 8003c76:	2220      	movs	r2, #32
 8003c78:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c7a:	4b2b      	ldr	r3, [pc, #172]	; (8003d28 <HAL_UART_MspInit+0x268>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003c80:	4829      	ldr	r0, [pc, #164]	; (8003d28 <HAL_UART_MspInit+0x268>)
 8003c82:	f000 fd83 	bl	800478c <HAL_DMA_Init>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8003c8c:	f7fd ffe8 	bl	8001c60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a25      	ldr	r2, [pc, #148]	; (8003d28 <HAL_UART_MspInit+0x268>)
 8003c94:	679a      	str	r2, [r3, #120]	; 0x78
 8003c96:	4a24      	ldr	r2, [pc, #144]	; (8003d28 <HAL_UART_MspInit+0x268>)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_uart4_tx.Instance = DMA2_Channel1;
 8003c9c:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <HAL_UART_MspInit+0x270>)
 8003c9e:	4a25      	ldr	r2, [pc, #148]	; (8003d34 <HAL_UART_MspInit+0x274>)
 8003ca0:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8003ca2:	4b23      	ldr	r3, [pc, #140]	; (8003d30 <HAL_UART_MspInit+0x270>)
 8003ca4:	221f      	movs	r2, #31
 8003ca6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <HAL_UART_MspInit+0x270>)
 8003caa:	2210      	movs	r2, #16
 8003cac:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cae:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <HAL_UART_MspInit+0x270>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cb4:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <HAL_UART_MspInit+0x270>)
 8003cb6:	2280      	movs	r2, #128	; 0x80
 8003cb8:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cba:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <HAL_UART_MspInit+0x270>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <HAL_UART_MspInit+0x270>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_CIRCULAR;
 8003cc6:	4b1a      	ldr	r3, [pc, #104]	; (8003d30 <HAL_UART_MspInit+0x270>)
 8003cc8:	2220      	movs	r2, #32
 8003cca:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ccc:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <HAL_UART_MspInit+0x270>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003cd2:	4817      	ldr	r0, [pc, #92]	; (8003d30 <HAL_UART_MspInit+0x270>)
 8003cd4:	f000 fd5a 	bl	800478c <HAL_DMA_Init>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_UART_MspInit+0x222>
      Error_Handler();
 8003cde:	f7fd ffbf 	bl	8001c60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <HAL_UART_MspInit+0x270>)
 8003ce6:	675a      	str	r2, [r3, #116]	; 0x74
 8003ce8:	4a11      	ldr	r2, [pc, #68]	; (8003d30 <HAL_UART_MspInit+0x270>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	2034      	movs	r0, #52	; 0x34
 8003cf4:	f000 fd15 	bl	8004722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003cf8:	2034      	movs	r0, #52	; 0x34
 8003cfa:	f000 fd2c 	bl	8004756 <HAL_NVIC_EnableIRQ>
}
 8003cfe:	bf00      	nop
 8003d00:	3730      	adds	r7, #48	; 0x30
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40008000 	.word	0x40008000
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	200007f4 	.word	0x200007f4
 8003d14:	40020080 	.word	0x40020080
 8003d18:	20000794 	.word	0x20000794
 8003d1c:	40020094 	.word	0x40020094
 8003d20:	40004c00 	.word	0x40004c00
 8003d24:	48000800 	.word	0x48000800
 8003d28:	200006a8 	.word	0x200006a8
 8003d2c:	4002006c 	.word	0x4002006c
 8003d30:	200008e0 	.word	0x200008e0
 8003d34:	40020408 	.word	0x40020408

08003d38 <delay_us>:
 *      Author: Jonathan
 */


#include "utilities.h"
void delay_us(uint16_t us) {
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // set the counter value a 0
 8003d42:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <delay_us+0x30>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2200      	movs	r2, #0
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us); // wait for the counter to reach the us input in the parameter
 8003d4a:	bf00      	nop
 8003d4c:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <delay_us+0x30>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d3f9      	bcc.n	8003d4c <delay_us+0x14>
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	200005b0 	.word	0x200005b0

08003d6c <LS_init>:
#include "ws2812b.h"

LightStrip *GLS; //Hacky way to be able to manipulate a lightstrip during DMA transfer

//Initialize LightStrip
void LS_init(LightStrip *L, uint8_t c, DMA_HandleTypeDef *dma, TIM_HandleTypeDef *tim, uint32_t tchan){
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	72fb      	strb	r3, [r7, #11]
	L->count = c;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	7afa      	ldrb	r2, [r7, #11]
 8003d80:	701a      	strb	r2, [r3, #0]
	L->wb_pos = 0;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	L->htim = tim;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	L->hdma_tim_chan = dma;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	L->timer_channel = tchan;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a3a      	ldr	r2, [r7, #32]
 8003d9e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	for(int i = 0; i< NUM_BYTES;i++){
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	e008      	b.n	8003dba <LS_init+0x4e>
		L->color_buffer[i]=0;
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	4413      	add	r3, r2
 8003dae:	3301      	adds	r3, #1
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< NUM_BYTES;i++){
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	3301      	adds	r3, #1
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b6b      	cmp	r3, #107	; 0x6b
 8003dbe:	ddf3      	ble.n	8003da8 <LS_init+0x3c>
	}
	for(int i = 0; i< WRB_LEN;i++){
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	e008      	b.n	8003dd8 <LS_init+0x6c>
		L->write_buffer[i]=0;
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4413      	add	r3, r2
 8003dcc:	336d      	adds	r3, #109	; 0x6d
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< WRB_LEN;i++){
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b2f      	cmp	r3, #47	; 0x2f
 8003ddc:	ddf3      	ble.n	8003dc6 <LS_init+0x5a>
	}
}
 8003dde:	bf00      	nop
 8003de0:	bf00      	nop
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <set_RGB>:

//Set RGB value to specific LED
void set_RGB(LightStrip *L, uint8_t index, uint8_t r, uint8_t g, uint8_t b){
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	4608      	mov	r0, r1
 8003df6:	4611      	mov	r1, r2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	70fb      	strb	r3, [r7, #3]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	70bb      	strb	r3, [r7, #2]
 8003e02:	4613      	mov	r3, r2
 8003e04:	707b      	strb	r3, [r7, #1]
	L->color_buffer[BPP*index    ] = g;
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	4413      	add	r3, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	787a      	ldrb	r2, [r7, #1]
 8003e14:	705a      	strb	r2, [r3, #1]
	L->color_buffer[BPP*index + 1] = r;
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3301      	adds	r3, #1
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4413      	add	r3, r2
 8003e24:	78ba      	ldrb	r2, [r7, #2]
 8003e26:	705a      	strb	r2, [r3, #1]
	L->color_buffer[BPP*index + 2] = b;
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	4413      	add	r3, r2
 8003e30:	3302      	adds	r3, #2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	7c3a      	ldrb	r2, [r7, #16]
 8003e38:	705a      	strb	r2, [r3, #1]
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <write_RGB>:
		set_RGB(L, i, r, g, b);
	}
}

//Render RGB data on the LightStrip
void write_RGB(LightStrip *L){
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	if(L->wb_pos != 0 || L->hdma_tim_chan->State != HAL_DMA_STATE_READY){
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d107      	bne.n	8003e6a <write_RGB+0x22>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d01d      	beq.n	8003ea6 <write_RGB+0x5e>
		// Ongoing Transfer, abort
		for(uint8_t i = 0; i < WRB_LEN; ++i){
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	73fb      	strb	r3, [r7, #15]
 8003e6e:	e008      	b.n	8003e82 <write_RGB+0x3a>
			L->write_buffer[i] = 0;
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		for(uint8_t i = 0; i < WRB_LEN; ++i){
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	73fb      	strb	r3, [r7, #15]
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	2b2f      	cmp	r3, #47	; 0x2f
 8003e86:	d9f3      	bls.n	8003e70 <write_RGB+0x28>
		}
		L->wb_pos = 0;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		HAL_TIM_PWM_Stop_DMA(L->htim, L->timer_channel);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f003 fdc8 	bl	8007a34 <HAL_TIM_PWM_Stop_DMA>
		return;
 8003ea4:	e092      	b.n	8003fcc <write_RGB+0x184>
	}
	for(uint_fast8_t i = 0; i < 8; ++i){
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	e079      	b.n	8003fa0 <write_RGB+0x158>
	    L->write_buffer[i     ] = DUTY_0 << (((L->color_buffer[0] << i) & 0x80) > 0);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	785b      	ldrb	r3, [r3, #1]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dd01      	ble.n	8003ec4 <write_RGB+0x7c>
 8003ec0:	2186      	movs	r1, #134	; 0x86
 8003ec2:	e000      	b.n	8003ec6 <write_RGB+0x7e>
 8003ec4:	2143      	movs	r1, #67	; 0x43
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4413      	add	r3, r2
 8003ecc:	336d      	adds	r3, #109	; 0x6d
 8003ece:	460a      	mov	r2, r1
 8003ed0:	701a      	strb	r2, [r3, #0]
	    L->write_buffer[i +  8] = DUTY_0 << (((L->color_buffer[1] << i) & 0x80) > 0);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	789b      	ldrb	r3, [r3, #2]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	dd01      	ble.n	8003eea <write_RGB+0xa2>
 8003ee6:	2186      	movs	r1, #134	; 0x86
 8003ee8:	e000      	b.n	8003eec <write_RGB+0xa4>
 8003eea:	2143      	movs	r1, #67	; 0x43
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	3308      	adds	r3, #8
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	460a      	mov	r2, r1
 8003ef6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	    L->write_buffer[i + 16] = DUTY_0 << (((L->color_buffer[2] << i) & 0x80) > 0);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	78db      	ldrb	r3, [r3, #3]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	dd01      	ble.n	8003f12 <write_RGB+0xca>
 8003f0e:	2186      	movs	r1, #134	; 0x86
 8003f10:	e000      	b.n	8003f14 <write_RGB+0xcc>
 8003f12:	2143      	movs	r1, #67	; 0x43
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	3310      	adds	r3, #16
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	460a      	mov	r2, r1
 8003f1e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	    L->write_buffer[i + 24] = DUTY_0 << (((L->color_buffer[3] << i) & 0x80) > 0);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	791b      	ldrb	r3, [r3, #4]
 8003f26:	461a      	mov	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	dd01      	ble.n	8003f3a <write_RGB+0xf2>
 8003f36:	2186      	movs	r1, #134	; 0x86
 8003f38:	e000      	b.n	8003f3c <write_RGB+0xf4>
 8003f3a:	2143      	movs	r1, #67	; 0x43
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	3318      	adds	r3, #24
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	4413      	add	r3, r2
 8003f44:	460a      	mov	r2, r1
 8003f46:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	    L->write_buffer[i + 32] = DUTY_0 << (((L->color_buffer[4] << i) & 0x80) > 0);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	795b      	ldrb	r3, [r3, #5]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	dd01      	ble.n	8003f62 <write_RGB+0x11a>
 8003f5e:	2186      	movs	r1, #134	; 0x86
 8003f60:	e000      	b.n	8003f64 <write_RGB+0x11c>
 8003f62:	2143      	movs	r1, #67	; 0x43
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	3320      	adds	r3, #32
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	460a      	mov	r2, r1
 8003f6e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	    L->write_buffer[i + 40] = DUTY_0 << (((L->color_buffer[5] << i) & 0x80) > 0);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	799b      	ldrb	r3, [r3, #6]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	dd01      	ble.n	8003f8a <write_RGB+0x142>
 8003f86:	2186      	movs	r1, #134	; 0x86
 8003f88:	e000      	b.n	8003f8c <write_RGB+0x144>
 8003f8a:	2143      	movs	r1, #67	; 0x43
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	3328      	adds	r3, #40	; 0x28
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	460a      	mov	r2, r1
 8003f96:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	for(uint_fast8_t i = 0; i < 8; ++i){
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b07      	cmp	r3, #7
 8003fa4:	d982      	bls.n	8003eac <write_RGB+0x64>
	}
	HAL_TIM_PWM_Start_DMA(L->htim, L->timer_channel, (uint32_t *)L->write_buffer, WRB_LEN);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f103 026d 	add.w	r2, r3, #109	; 0x6d
 8003fb8:	2330      	movs	r3, #48	; 0x30
 8003fba:	f003 fb4f 	bl	800765c <HAL_TIM_PWM_Start_DMA>
	L->wb_pos = 2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	GLS = L;
 8003fc6:	4a03      	ldr	r2, [pc, #12]	; (8003fd4 <write_RGB+0x18c>)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6013      	str	r3, [r2, #0]
}
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000940 	.word	0x20000940

08003fd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

//Half-transfer of DMA buffer callback
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(write_buff_p) to LED(write_buff_p + 1)
  if(GLS->wb_pos < LED_COUNT) {
 8003fe0:	4b4a      	ldr	r3, [pc, #296]	; (800410c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x134>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fe8:	2b23      	cmp	r3, #35	; 0x23
 8003fea:	d86b      	bhi.n	80040c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xec>
    // Fill the even buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	e05d      	b.n	80040ae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd6>
      GLS->write_buffer[i     ] = DUTY_0 << (((GLS->color_buffer[3 * GLS->wb_pos    ] << i) & 0x80) > 0);
 8003ff2:	4b46      	ldr	r3, [pc, #280]	; (800410c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x134>)
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	4b45      	ldr	r3, [pc, #276]	; (800410c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x134>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003ffe:	4613      	mov	r3, r2
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	4413      	add	r3, r2
 8004004:	440b      	add	r3, r1
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	461a      	mov	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004014:	2b00      	cmp	r3, #0
 8004016:	dd01      	ble.n	800401c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x44>
 8004018:	2186      	movs	r1, #134	; 0x86
 800401a:	e000      	b.n	800401e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x46>
 800401c:	2143      	movs	r1, #67	; 0x43
 800401e:	4b3b      	ldr	r3, [pc, #236]	; (800410c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x134>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4413      	add	r3, r2
 8004026:	336d      	adds	r3, #109	; 0x6d
 8004028:	460a      	mov	r2, r1
 800402a:	701a      	strb	r2, [r3, #0]
      GLS->write_buffer[i +  8] = DUTY_0 << (((GLS->color_buffer[3 * GLS->wb_pos + 1] << i) & 0x80) > 0);
 800402c:	4b37      	ldr	r3, [pc, #220]	; (800410c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x134>)
 800402e:	6819      	ldr	r1, [r3, #0]
 8004030:	4b36      	ldr	r3, [pc, #216]	; (800410c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x134>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004038:	4613      	mov	r3, r2
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4413      	add	r3, r2
 800403e:	3301      	adds	r3, #1
 8004040:	440b      	add	r3, r1
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	461a      	mov	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004050:	2b00      	cmp	r3, #0
 8004052:	dd01      	ble.n	8004058 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x80>
 8004054:	2186      	movs	r1, #134	; 0x86
 8004056:	e000      	b.n	800405a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x82>
 8004058:	2143      	movs	r1, #67	; 0x43
 800405a:	4b2c      	ldr	r3, [pc, #176]	; (800410c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x134>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3308      	adds	r3, #8
 8004062:	4413      	add	r3, r2
 8004064:	460a      	mov	r2, r1
 8004066:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
      GLS->write_buffer[i + 16] = DUTY_0 << (((GLS->color_buffer[3 * GLS->wb_pos + 2] << i) & 0x80) > 0);
 800406a:	4b28      	ldr	r3, [pc, #160]	; (800410c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x134>)
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	4b27      	ldr	r3, [pc, #156]	; (800410c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x134>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004076:	4613      	mov	r3, r2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	3302      	adds	r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	785b      	ldrb	r3, [r3, #1]
 8004082:	461a      	mov	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	dd01      	ble.n	8004096 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xbe>
 8004092:	2186      	movs	r1, #134	; 0x86
 8004094:	e000      	b.n	8004098 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc0>
 8004096:	2143      	movs	r1, #67	; 0x43
 8004098:	4b1c      	ldr	r3, [pc, #112]	; (800410c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x134>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3310      	adds	r3, #16
 80040a0:	4413      	add	r3, r2
 80040a2:	460a      	mov	r2, r1
 80040a4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3301      	adds	r3, #1
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b07      	cmp	r3, #7
 80040b2:	d99e      	bls.n	8003ff2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1a>
    }
    GLS->wb_pos++;
 80040b4:	4b15      	ldr	r3, [pc, #84]	; (800410c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x134>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80040bc:	3201      	adds	r2, #1
 80040be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  } else if (GLS->wb_pos < LED_COUNT + 2) {
    // First half reset zero fill
    for(uint8_t i = 0; i < WRB_LEN / 2; ++i) GLS->write_buffer[i] = 0;
    GLS->wb_pos++;
  }
}
 80040c2:	e01c      	b.n	80040fe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x126>
  } else if (GLS->wb_pos < LED_COUNT + 2) {
 80040c4:	4b11      	ldr	r3, [pc, #68]	; (800410c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x134>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040cc:	2b25      	cmp	r3, #37	; 0x25
 80040ce:	d816      	bhi.n	80040fe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x126>
    for(uint8_t i = 0; i < WRB_LEN / 2; ++i) GLS->write_buffer[i] = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	72fb      	strb	r3, [r7, #11]
 80040d4:	e009      	b.n	80040ea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x112>
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x134>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	7afb      	ldrb	r3, [r7, #11]
 80040dc:	4413      	add	r3, r2
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 80040e4:	7afb      	ldrb	r3, [r7, #11]
 80040e6:	3301      	adds	r3, #1
 80040e8:	72fb      	strb	r3, [r7, #11]
 80040ea:	7afb      	ldrb	r3, [r7, #11]
 80040ec:	2b17      	cmp	r3, #23
 80040ee:	d9f2      	bls.n	80040d6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfe>
    GLS->wb_pos++;
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x134>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80040f8:	3201      	adds	r2, #1
 80040fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20000940 	.word	0x20000940

08004110 <HAL_TIM_PWM_PulseFinishedCallback>:

//Complete transfer of DMA buffer callback
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(write_buff_p) to LED(write_buff_p + 1)
  if(GLS->wb_pos < LED_COUNT) {
 8004118:	4b52      	ldr	r3, [pc, #328]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004120:	2b23      	cmp	r3, #35	; 0x23
 8004122:	d86c      	bhi.n	80041fe <HAL_TIM_PWM_PulseFinishedCallback+0xee>
    // Fill the odd buffer
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e05e      	b.n	80041e8 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>
      GLS->write_buffer[i + 24] = DUTY_0 << (((GLS->color_buffer[3 * GLS->wb_pos    ] << i) & 0x80) > 0);
 800412a:	4b4e      	ldr	r3, [pc, #312]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 800412c:	6819      	ldr	r1, [r3, #0]
 800412e:	4b4d      	ldr	r3, [pc, #308]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004136:	4613      	mov	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	440b      	add	r3, r1
 800413e:	785b      	ldrb	r3, [r3, #1]
 8004140:	461a      	mov	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414c:	2b00      	cmp	r3, #0
 800414e:	dd01      	ble.n	8004154 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
 8004150:	2186      	movs	r1, #134	; 0x86
 8004152:	e000      	b.n	8004156 <HAL_TIM_PWM_PulseFinishedCallback+0x46>
 8004154:	2143      	movs	r1, #67	; 0x43
 8004156:	4b43      	ldr	r3, [pc, #268]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3318      	adds	r3, #24
 800415e:	4413      	add	r3, r2
 8004160:	460a      	mov	r2, r1
 8004162:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
      GLS->write_buffer[i + 32] = DUTY_0 << (((GLS->color_buffer[3 * GLS->wb_pos + 1] << i) & 0x80) > 0);
 8004166:	4b3f      	ldr	r3, [pc, #252]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 8004168:	6819      	ldr	r1, [r3, #0]
 800416a:	4b3e      	ldr	r3, [pc, #248]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004172:	4613      	mov	r3, r2
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	4413      	add	r3, r2
 8004178:	3301      	adds	r3, #1
 800417a:	440b      	add	r3, r1
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	461a      	mov	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	dd01      	ble.n	8004192 <HAL_TIM_PWM_PulseFinishedCallback+0x82>
 800418e:	2186      	movs	r1, #134	; 0x86
 8004190:	e000      	b.n	8004194 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
 8004192:	2143      	movs	r1, #67	; 0x43
 8004194:	4b33      	ldr	r3, [pc, #204]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3320      	adds	r3, #32
 800419c:	4413      	add	r3, r2
 800419e:	460a      	mov	r2, r1
 80041a0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
      GLS->write_buffer[i + 40] = DUTY_0 << (((GLS->color_buffer[3 * GLS->wb_pos + 2] << i) & 0x80) > 0);
 80041a4:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 80041a6:	6819      	ldr	r1, [r3, #0]
 80041a8:	4b2e      	ldr	r3, [pc, #184]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80041b0:	4613      	mov	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4413      	add	r3, r2
 80041b6:	3302      	adds	r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	785b      	ldrb	r3, [r3, #1]
 80041bc:	461a      	mov	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	dd01      	ble.n	80041d0 <HAL_TIM_PWM_PulseFinishedCallback+0xc0>
 80041cc:	2186      	movs	r1, #134	; 0x86
 80041ce:	e000      	b.n	80041d2 <HAL_TIM_PWM_PulseFinishedCallback+0xc2>
 80041d0:	2143      	movs	r1, #67	; 0x43
 80041d2:	4b24      	ldr	r3, [pc, #144]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3328      	adds	r3, #40	; 0x28
 80041da:	4413      	add	r3, r2
 80041dc:	460a      	mov	r2, r1
 80041de:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3301      	adds	r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b07      	cmp	r3, #7
 80041ec:	d99d      	bls.n	800412a <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
    }
    GLS->wb_pos++;
 80041ee:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80041f6:	3201      	adds	r2, #1
 80041f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    ++GLS->wb_pos;
  } else {
	GLS->wb_pos = 0;
    HAL_TIM_PWM_Stop_DMA(GLS->htim, GLS->timer_channel);
  }
}
 80041fc:	e02e      	b.n	800425c <HAL_TIM_PWM_PulseFinishedCallback+0x14c>
  } else if (GLS->wb_pos < LED_COUNT + 2) {
 80041fe:	4b19      	ldr	r3, [pc, #100]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004206:	2b25      	cmp	r3, #37	; 0x25
 8004208:	d817      	bhi.n	800423a <HAL_TIM_PWM_PulseFinishedCallback+0x12a>
    for(uint8_t i = WRB_LEN / 2; i < WRB_LEN; ++i) GLS->write_buffer[i] = 0;
 800420a:	2318      	movs	r3, #24
 800420c:	72fb      	strb	r3, [r7, #11]
 800420e:	e009      	b.n	8004224 <HAL_TIM_PWM_PulseFinishedCallback+0x114>
 8004210:	4b14      	ldr	r3, [pc, #80]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	7afb      	ldrb	r3, [r7, #11]
 8004216:	4413      	add	r3, r2
 8004218:	2200      	movs	r2, #0
 800421a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 800421e:	7afb      	ldrb	r3, [r7, #11]
 8004220:	3301      	adds	r3, #1
 8004222:	72fb      	strb	r3, [r7, #11]
 8004224:	7afb      	ldrb	r3, [r7, #11]
 8004226:	2b2f      	cmp	r3, #47	; 0x2f
 8004228:	d9f2      	bls.n	8004210 <HAL_TIM_PWM_PulseFinishedCallback+0x100>
    ++GLS->wb_pos;
 800422a:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004232:	3201      	adds	r2, #1
 8004234:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8004238:	e010      	b.n	800425c <HAL_TIM_PWM_PulseFinishedCallback+0x14c>
	GLS->wb_pos = 0;
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2200      	movs	r2, #0
 8004240:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    HAL_TIM_PWM_Stop_DMA(GLS->htim, GLS->timer_channel);
 8004244:	4b07      	ldr	r3, [pc, #28]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f003 fbec 	bl	8007a34 <HAL_TIM_PWM_Stop_DMA>
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20000940 	.word	0x20000940

08004268 <hsl_to_rgb>:

// Fast hsl2rgb algorithm: https://stackoverflow.com/questions/13105185/fast-algorithm-for-rgb-hsl-conversion
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	71fb      	strb	r3, [r7, #7]
 8004272:	460b      	mov	r3, r1
 8004274:	71bb      	strb	r3, [r7, #6]
 8004276:	4613      	mov	r3, r2
 8004278:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 800427a:	797b      	ldrb	r3, [r7, #5]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <hsl_to_rgb+0x1c>
 8004280:	2300      	movs	r3, #0
 8004282:	e0b1      	b.n	80043e8 <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8004284:	797b      	ldrb	r3, [r7, #5]
 8004286:	b29b      	uxth	r3, r3
 8004288:	3301      	adds	r3, #1
 800428a:	b29b      	uxth	r3, r3
 800428c:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 800428e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004292:	2b00      	cmp	r3, #0
 8004294:	db09      	blt.n	80042aa <hsl_to_rgb+0x42>
 8004296:	89bb      	ldrh	r3, [r7, #12]
 8004298:	b29b      	uxth	r3, r3
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	79ba      	ldrb	r2, [r7, #6]
 800429e:	fb02 f303 	mul.w	r3, r2, r3
 80042a2:	121b      	asrs	r3, r3, #8
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	74fb      	strb	r3, [r7, #19]
 80042a8:	e00a      	b.n	80042c0 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 80042aa:	89bb      	ldrh	r3, [r7, #12]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80042b4:	79ba      	ldrb	r2, [r7, #6]
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	121b      	asrs	r3, r3, #8
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	0052      	lsls	r2, r2, #1
 80042c8:	4413      	add	r3, r2
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 80042d0:	897b      	ldrh	r3, [r7, #10]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 80042d8:	7d3b      	ldrb	r3, [r7, #20]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3301      	adds	r3, #1
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 80042e4:	897b      	ldrh	r3, [r7, #10]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d109      	bne.n	8004304 <hsl_to_rgb+0x9c>
 80042f0:	89fb      	ldrh	r3, [r7, #14]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	7cfa      	ldrb	r2, [r7, #19]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	fb02 f303 	mul.w	r3, r2, r3
 80042fc:	121b      	asrs	r3, r3, #8
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	74bb      	strb	r3, [r7, #18]
 8004302:	e00a      	b.n	800431a <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8004304:	89fb      	ldrh	r3, [r7, #14]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800430c:	7cfa      	ldrb	r2, [r7, #19]
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	fb02 f303 	mul.w	r3, r2, r3
 8004314:	121b      	asrs	r3, r3, #8
 8004316:	b2db      	uxtb	r3, r3
 8004318:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 800431a:	7cfb      	ldrb	r3, [r7, #19]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	085b      	lsrs	r3, r3, #1
 8004320:	b2db      	uxtb	r3, r3
 8004322:	797a      	ldrb	r2, [r7, #5]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	b2db      	uxtb	r3, r3
 8004328:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 800432a:	897b      	ldrh	r3, [r7, #10]
 800432c:	b29b      	uxth	r3, r3
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b04      	cmp	r3, #4
 8004334:	d839      	bhi.n	80043aa <hsl_to_rgb+0x142>
 8004336:	a201      	add	r2, pc, #4	; (adr r2, 800433c <hsl_to_rgb+0xd4>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	08004351 	.word	0x08004351
 8004340:	08004363 	.word	0x08004363
 8004344:	08004375 	.word	0x08004375
 8004348:	08004387 	.word	0x08004387
 800434c:	08004399 	.word	0x08004399
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	75fb      	strb	r3, [r7, #23]
 8004356:	7cbb      	ldrb	r3, [r7, #18]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	75bb      	strb	r3, [r7, #22]
 800435c:	2300      	movs	r3, #0
 800435e:	757b      	strb	r3, [r7, #21]
 8004360:	e02c      	b.n	80043bc <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8004362:	7cbb      	ldrb	r3, [r7, #18]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	75fb      	strb	r3, [r7, #23]
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	75bb      	strb	r3, [r7, #22]
 800436e:	2300      	movs	r3, #0
 8004370:	757b      	strb	r3, [r7, #21]
 8004372:	e023      	b.n	80043bc <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8004374:	2300      	movs	r3, #0
 8004376:	75fb      	strb	r3, [r7, #23]
 8004378:	7cfb      	ldrb	r3, [r7, #19]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	75bb      	strb	r3, [r7, #22]
 800437e:	7cbb      	ldrb	r3, [r7, #18]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	757b      	strb	r3, [r7, #21]
 8004384:	e01a      	b.n	80043bc <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8004386:	2300      	movs	r3, #0
 8004388:	75fb      	strb	r3, [r7, #23]
 800438a:	7cbb      	ldrb	r3, [r7, #18]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	75bb      	strb	r3, [r7, #22]
 8004390:	7cfb      	ldrb	r3, [r7, #19]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	757b      	strb	r3, [r7, #21]
 8004396:	e011      	b.n	80043bc <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8004398:	7cbb      	ldrb	r3, [r7, #18]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	75fb      	strb	r3, [r7, #23]
 800439e:	2300      	movs	r3, #0
 80043a0:	75bb      	strb	r3, [r7, #22]
 80043a2:	7cfb      	ldrb	r3, [r7, #19]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	757b      	strb	r3, [r7, #21]
 80043a8:	e008      	b.n	80043bc <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 80043aa:	7cfb      	ldrb	r3, [r7, #19]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	75fb      	strb	r3, [r7, #23]
 80043b0:	2300      	movs	r3, #0
 80043b2:	75bb      	strb	r3, [r7, #22]
 80043b4:	7cbb      	ldrb	r3, [r7, #18]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	757b      	strb	r3, [r7, #21]
 80043ba:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	7c7b      	ldrb	r3, [r7, #17]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	4413      	add	r3, r2
 80043c8:	041a      	lsls	r2, r3, #16
 80043ca:	7dbb      	ldrb	r3, [r7, #22]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	4619      	mov	r1, r3
 80043d0:	7c7b      	ldrb	r3, [r7, #17]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	440b      	add	r3, r1
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	431a      	orrs	r2, r3
 80043da:	7d7b      	ldrb	r3, [r7, #21]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	4619      	mov	r1, r3
 80043e0:	7c7b      	ldrb	r3, [r7, #17]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	440b      	add	r3, r1
 80043e6:	4313      	orrs	r3, r2
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043f4:	480d      	ldr	r0, [pc, #52]	; (800442c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043f8:	480d      	ldr	r0, [pc, #52]	; (8004430 <LoopForever+0x6>)
  ldr r1, =_edata
 80043fa:	490e      	ldr	r1, [pc, #56]	; (8004434 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043fc:	4a0e      	ldr	r2, [pc, #56]	; (8004438 <LoopForever+0xe>)
  movs r3, #0
 80043fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004400:	e002      	b.n	8004408 <LoopCopyDataInit>

08004402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004406:	3304      	adds	r3, #4

08004408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800440a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800440c:	d3f9      	bcc.n	8004402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800440e:	4a0b      	ldr	r2, [pc, #44]	; (800443c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004410:	4c0b      	ldr	r4, [pc, #44]	; (8004440 <LoopForever+0x16>)
  movs r3, #0
 8004412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004414:	e001      	b.n	800441a <LoopFillZerobss>

08004416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004418:	3204      	adds	r2, #4

0800441a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800441a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800441c:	d3fb      	bcc.n	8004416 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800441e:	f7fe fce7 	bl	8002df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004422:	f006 fe4b 	bl	800b0bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004426:	f7fd f9af 	bl	8001788 <main>

0800442a <LoopForever>:

LoopForever:
    b LoopForever
 800442a:	e7fe      	b.n	800442a <LoopForever>
  ldr   r0, =_estack
 800442c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004434:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004438:	0800bc84 	.word	0x0800bc84
  ldr r2, =_sbss
 800443c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004440:	20000958 	.word	0x20000958

08004444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004444:	e7fe      	b.n	8004444 <ADC1_2_IRQHandler>

08004446 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004450:	2003      	movs	r0, #3
 8004452:	f000 f95b 	bl	800470c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004456:	2000      	movs	r0, #0
 8004458:	f000 f80e 	bl	8004478 <HAL_InitTick>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	71fb      	strb	r3, [r7, #7]
 8004466:	e001      	b.n	800446c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004468:	f7fe fbb2 	bl	8002bd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800446c:	79fb      	ldrb	r3, [r7, #7]

}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004484:	4b16      	ldr	r3, [pc, #88]	; (80044e0 <HAL_InitTick+0x68>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d022      	beq.n	80044d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800448c:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <HAL_InitTick+0x6c>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <HAL_InitTick+0x68>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004498:	fbb1 f3f3 	udiv	r3, r1, r3
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 f966 	bl	8004772 <HAL_SYSTICK_Config>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10f      	bne.n	80044cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b0f      	cmp	r3, #15
 80044b0:	d809      	bhi.n	80044c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044b2:	2200      	movs	r2, #0
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ba:	f000 f932 	bl	8004722 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80044be:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <HAL_InitTick+0x70>)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	e007      	b.n	80044d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
 80044ca:	e004      	b.n	80044d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	e001      	b.n	80044d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000008 	.word	0x20000008
 80044e4:	20000000 	.word	0x20000000
 80044e8:	20000004 	.word	0x20000004

080044ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <HAL_IncTick+0x1c>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <HAL_IncTick+0x20>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4413      	add	r3, r2
 80044fa:	4a03      	ldr	r2, [pc, #12]	; (8004508 <HAL_IncTick+0x1c>)
 80044fc:	6013      	str	r3, [r2, #0]
}
 80044fe:	bf00      	nop
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	20000944 	.word	0x20000944
 800450c:	20000008 	.word	0x20000008

08004510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return uwTick;
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <HAL_GetTick+0x14>)
 8004516:	681b      	ldr	r3, [r3, #0]
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000944 	.word	0x20000944

08004528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004530:	f7ff ffee 	bl	8004510 <HAL_GetTick>
 8004534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d004      	beq.n	800454c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004542:	4b09      	ldr	r3, [pc, #36]	; (8004568 <HAL_Delay+0x40>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800454c:	bf00      	nop
 800454e:	f7ff ffdf 	bl	8004510 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	429a      	cmp	r2, r3
 800455c:	d8f7      	bhi.n	800454e <HAL_Delay+0x26>
  {
  }
}
 800455e:	bf00      	nop
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000008 	.word	0x20000008

0800456c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <__NVIC_SetPriorityGrouping+0x44>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004588:	4013      	ands	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800459e:	4a04      	ldr	r2, [pc, #16]	; (80045b0 <__NVIC_SetPriorityGrouping+0x44>)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	60d3      	str	r3, [r2, #12]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	e000ed00 	.word	0xe000ed00

080045b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045b8:	4b04      	ldr	r3, [pc, #16]	; (80045cc <__NVIC_GetPriorityGrouping+0x18>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	0a1b      	lsrs	r3, r3, #8
 80045be:	f003 0307 	and.w	r3, r3, #7
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	db0b      	blt.n	80045fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	f003 021f 	and.w	r2, r3, #31
 80045e8:	4907      	ldr	r1, [pc, #28]	; (8004608 <__NVIC_EnableIRQ+0x38>)
 80045ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	2001      	movs	r0, #1
 80045f2:	fa00 f202 	lsl.w	r2, r0, r2
 80045f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	e000e100 	.word	0xe000e100

0800460c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	6039      	str	r1, [r7, #0]
 8004616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461c:	2b00      	cmp	r3, #0
 800461e:	db0a      	blt.n	8004636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	b2da      	uxtb	r2, r3
 8004624:	490c      	ldr	r1, [pc, #48]	; (8004658 <__NVIC_SetPriority+0x4c>)
 8004626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462a:	0112      	lsls	r2, r2, #4
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	440b      	add	r3, r1
 8004630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004634:	e00a      	b.n	800464c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	4908      	ldr	r1, [pc, #32]	; (800465c <__NVIC_SetPriority+0x50>)
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	3b04      	subs	r3, #4
 8004644:	0112      	lsls	r2, r2, #4
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	440b      	add	r3, r1
 800464a:	761a      	strb	r2, [r3, #24]
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	e000e100 	.word	0xe000e100
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f1c3 0307 	rsb	r3, r3, #7
 800467a:	2b04      	cmp	r3, #4
 800467c:	bf28      	it	cs
 800467e:	2304      	movcs	r3, #4
 8004680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3304      	adds	r3, #4
 8004686:	2b06      	cmp	r3, #6
 8004688:	d902      	bls.n	8004690 <NVIC_EncodePriority+0x30>
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3b03      	subs	r3, #3
 800468e:	e000      	b.n	8004692 <NVIC_EncodePriority+0x32>
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004694:	f04f 32ff 	mov.w	r2, #4294967295
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	43da      	mvns	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	401a      	ands	r2, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046a8:	f04f 31ff 	mov.w	r1, #4294967295
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	43d9      	mvns	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b8:	4313      	orrs	r3, r2
         );
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3724      	adds	r7, #36	; 0x24
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046d8:	d301      	bcc.n	80046de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046da:	2301      	movs	r3, #1
 80046dc:	e00f      	b.n	80046fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046de:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <SysTick_Config+0x40>)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046e6:	210f      	movs	r1, #15
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	f7ff ff8e 	bl	800460c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <SysTick_Config+0x40>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046f6:	4b04      	ldr	r3, [pc, #16]	; (8004708 <SysTick_Config+0x40>)
 80046f8:	2207      	movs	r2, #7
 80046fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	e000e010 	.word	0xe000e010

0800470c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ff29 	bl	800456c <__NVIC_SetPriorityGrouping>
}
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b086      	sub	sp, #24
 8004726:	af00      	add	r7, sp, #0
 8004728:	4603      	mov	r3, r0
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	607a      	str	r2, [r7, #4]
 800472e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004730:	f7ff ff40 	bl	80045b4 <__NVIC_GetPriorityGrouping>
 8004734:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	6978      	ldr	r0, [r7, #20]
 800473c:	f7ff ff90 	bl	8004660 <NVIC_EncodePriority>
 8004740:	4602      	mov	r2, r0
 8004742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff ff5f 	bl	800460c <__NVIC_SetPriority>
}
 800474e:	bf00      	nop
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	4603      	mov	r3, r0
 800475e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff ff33 	bl	80045d0 <__NVIC_EnableIRQ>
}
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff ffa4 	bl	80046c8 <SysTick_Config>
 8004780:	4603      	mov	r3, r0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e08d      	b.n	80048ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	4b47      	ldr	r3, [pc, #284]	; (80048c4 <HAL_DMA_Init+0x138>)
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d80f      	bhi.n	80047ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	4b45      	ldr	r3, [pc, #276]	; (80048c8 <HAL_DMA_Init+0x13c>)
 80047b2:	4413      	add	r3, r2
 80047b4:	4a45      	ldr	r2, [pc, #276]	; (80048cc <HAL_DMA_Init+0x140>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	091b      	lsrs	r3, r3, #4
 80047bc:	009a      	lsls	r2, r3, #2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a42      	ldr	r2, [pc, #264]	; (80048d0 <HAL_DMA_Init+0x144>)
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40
 80047c8:	e00e      	b.n	80047e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	4b40      	ldr	r3, [pc, #256]	; (80048d4 <HAL_DMA_Init+0x148>)
 80047d2:	4413      	add	r3, r2
 80047d4:	4a3d      	ldr	r2, [pc, #244]	; (80048cc <HAL_DMA_Init+0x140>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	091b      	lsrs	r3, r3, #4
 80047dc:	009a      	lsls	r2, r3, #2
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a3c      	ldr	r2, [pc, #240]	; (80048d8 <HAL_DMA_Init+0x14c>)
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800480c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004818:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004824:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fa1e 	bl	8004c7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004848:	d102      	bne.n	8004850 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004864:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d010      	beq.n	8004890 <HAL_DMA_Init+0x104>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b04      	cmp	r3, #4
 8004874:	d80c      	bhi.n	8004890 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fa3e 	bl	8004cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	e008      	b.n	80048a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40020407 	.word	0x40020407
 80048c8:	bffdfff8 	.word	0xbffdfff8
 80048cc:	cccccccd 	.word	0xcccccccd
 80048d0:	40020000 	.word	0x40020000
 80048d4:	bffdfbf8 	.word	0xbffdfbf8
 80048d8:	40020400 	.word	0x40020400

080048dc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_DMA_Start_IT+0x20>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e066      	b.n	80049ca <HAL_DMA_Start_IT+0xee>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	d155      	bne.n	80049bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0201 	bic.w	r2, r2, #1
 800492c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f962 	bl	8004bfe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	2b00      	cmp	r3, #0
 8004940:	d008      	beq.n	8004954 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 020e 	orr.w	r2, r2, #14
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	e00f      	b.n	8004974 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0204 	bic.w	r2, r2, #4
 8004962:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 020a 	orr.w	r2, r2, #10
 8004972:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004990:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0201 	orr.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e005      	b.n	80049c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80049c4:	2302      	movs	r3, #2
 80049c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d00d      	beq.n	8004a06 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2204      	movs	r2, #4
 80049ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
 8004a04:	e047      	b.n	8004a96 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 020e 	bic.w	r2, r2, #14
 8004a14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3a:	f003 021f 	and.w	r2, r3, #31
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2101      	movs	r1, #1
 8004a44:	fa01 f202 	lsl.w	r2, r1, r2
 8004a48:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a52:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00c      	beq.n	8004a76 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a74:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	4798      	blx	r3
    }
  }
  return status;
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d026      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x7a>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d021      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d107      	bne.n	8004af4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0204 	bic.w	r2, r2, #4
 8004af2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af8:	f003 021f 	and.w	r2, r3, #31
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	2104      	movs	r1, #4
 8004b02:	fa01 f202 	lsl.w	r2, r1, r2
 8004b06:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d071      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004b18:	e06c      	b.n	8004bf4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	2202      	movs	r2, #2
 8004b24:	409a      	lsls	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d02e      	beq.n	8004b8c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d029      	beq.n	8004b8c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 020a 	bic.w	r2, r2, #10
 8004b54:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	f003 021f 	and.w	r2, r3, #31
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2102      	movs	r1, #2
 8004b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b70:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d038      	beq.n	8004bf4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b8a:	e033      	b.n	8004bf4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b90:	f003 031f 	and.w	r3, r3, #31
 8004b94:	2208      	movs	r2, #8
 8004b96:	409a      	lsls	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d02a      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d025      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 020e 	bic.w	r2, r2, #14
 8004bb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	f003 021f 	and.w	r2, r3, #31
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bcc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d004      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop
}
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c14:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c26:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2c:	f003 021f 	and.w	r2, r3, #31
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	2101      	movs	r1, #1
 8004c36:	fa01 f202 	lsl.w	r2, r1, r2
 8004c3a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d108      	bne.n	8004c5e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c5c:	e007      	b.n	8004c6e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	60da      	str	r2, [r3, #12]
}
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d802      	bhi.n	8004c96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c90:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	e001      	b.n	8004c9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004c96:	4b15      	ldr	r3, [pc, #84]	; (8004cec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c98:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	3b08      	subs	r3, #8
 8004ca6:	4a12      	ldr	r2, [pc, #72]	; (8004cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb4:	089b      	lsrs	r3, r3, #2
 8004cb6:	009a      	lsls	r2, r3, #2
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4413      	add	r3, r2
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a0b      	ldr	r2, [pc, #44]	; (8004cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004cc6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 031f 	and.w	r3, r3, #31
 8004cce:	2201      	movs	r2, #1
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40020407 	.word	0x40020407
 8004ce8:	40020800 	.word	0x40020800
 8004cec:	40020820 	.word	0x40020820
 8004cf0:	cccccccd 	.word	0xcccccccd
 8004cf4:	40020880 	.word	0x40020880

08004cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	461a      	mov	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a08      	ldr	r2, [pc, #32]	; (8004d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004d1a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	2201      	movs	r2, #1
 8004d26:	409a      	lsls	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	1000823f 	.word	0x1000823f
 8004d3c:	40020940 	.word	0x40020940

08004d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d4e:	e15a      	b.n	8005006 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	2101      	movs	r1, #1
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 814c 	beq.w	8005000 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d00b      	beq.n	8004d88 <HAL_GPIO_Init+0x48>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d007      	beq.n	8004d88 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d7c:	2b11      	cmp	r3, #17
 8004d7e:	d003      	beq.n	8004d88 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b12      	cmp	r3, #18
 8004d86:	d130      	bne.n	8004dea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	2203      	movs	r2, #3
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	091b      	lsrs	r3, r3, #4
 8004dd4:	f003 0201 	and.w	r2, r3, #1
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	2203      	movs	r2, #3
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d003      	beq.n	8004e2a <HAL_GPIO_Init+0xea>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b12      	cmp	r3, #18
 8004e28:	d123      	bne.n	8004e72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	08da      	lsrs	r2, r3, #3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3208      	adds	r2, #8
 8004e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	220f      	movs	r2, #15
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	43db      	mvns	r3, r3
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	08da      	lsrs	r2, r3, #3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3208      	adds	r2, #8
 8004e6c:	6939      	ldr	r1, [r7, #16]
 8004e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43db      	mvns	r3, r3
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4013      	ands	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 0203 	and.w	r2, r3, #3
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 80a6 	beq.w	8005000 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb4:	4b5b      	ldr	r3, [pc, #364]	; (8005024 <HAL_GPIO_Init+0x2e4>)
 8004eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb8:	4a5a      	ldr	r2, [pc, #360]	; (8005024 <HAL_GPIO_Init+0x2e4>)
 8004eba:	f043 0301 	orr.w	r3, r3, #1
 8004ebe:	6613      	str	r3, [r2, #96]	; 0x60
 8004ec0:	4b58      	ldr	r3, [pc, #352]	; (8005024 <HAL_GPIO_Init+0x2e4>)
 8004ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ecc:	4a56      	ldr	r2, [pc, #344]	; (8005028 <HAL_GPIO_Init+0x2e8>)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	089b      	lsrs	r3, r3, #2
 8004ed2:	3302      	adds	r3, #2
 8004ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	220f      	movs	r2, #15
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4013      	ands	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ef6:	d01f      	beq.n	8004f38 <HAL_GPIO_Init+0x1f8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a4c      	ldr	r2, [pc, #304]	; (800502c <HAL_GPIO_Init+0x2ec>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d019      	beq.n	8004f34 <HAL_GPIO_Init+0x1f4>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a4b      	ldr	r2, [pc, #300]	; (8005030 <HAL_GPIO_Init+0x2f0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <HAL_GPIO_Init+0x1f0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a4a      	ldr	r2, [pc, #296]	; (8005034 <HAL_GPIO_Init+0x2f4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00d      	beq.n	8004f2c <HAL_GPIO_Init+0x1ec>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a49      	ldr	r2, [pc, #292]	; (8005038 <HAL_GPIO_Init+0x2f8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d007      	beq.n	8004f28 <HAL_GPIO_Init+0x1e8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a48      	ldr	r2, [pc, #288]	; (800503c <HAL_GPIO_Init+0x2fc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d101      	bne.n	8004f24 <HAL_GPIO_Init+0x1e4>
 8004f20:	2305      	movs	r3, #5
 8004f22:	e00a      	b.n	8004f3a <HAL_GPIO_Init+0x1fa>
 8004f24:	2306      	movs	r3, #6
 8004f26:	e008      	b.n	8004f3a <HAL_GPIO_Init+0x1fa>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	e006      	b.n	8004f3a <HAL_GPIO_Init+0x1fa>
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e004      	b.n	8004f3a <HAL_GPIO_Init+0x1fa>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e002      	b.n	8004f3a <HAL_GPIO_Init+0x1fa>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <HAL_GPIO_Init+0x1fa>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	f002 0203 	and.w	r2, r2, #3
 8004f40:	0092      	lsls	r2, r2, #2
 8004f42:	4093      	lsls	r3, r2
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f4a:	4937      	ldr	r1, [pc, #220]	; (8005028 <HAL_GPIO_Init+0x2e8>)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	089b      	lsrs	r3, r3, #2
 8004f50:	3302      	adds	r3, #2
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f58:	4b39      	ldr	r3, [pc, #228]	; (8005040 <HAL_GPIO_Init+0x300>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	43db      	mvns	r3, r3
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4013      	ands	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f7c:	4a30      	ldr	r2, [pc, #192]	; (8005040 <HAL_GPIO_Init+0x300>)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004f82:	4b2f      	ldr	r3, [pc, #188]	; (8005040 <HAL_GPIO_Init+0x300>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fa6:	4a26      	ldr	r2, [pc, #152]	; (8005040 <HAL_GPIO_Init+0x300>)
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fac:	4b24      	ldr	r3, [pc, #144]	; (8005040 <HAL_GPIO_Init+0x300>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fd0:	4a1b      	ldr	r2, [pc, #108]	; (8005040 <HAL_GPIO_Init+0x300>)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004fd6:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <HAL_GPIO_Init+0x300>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ffa:	4a11      	ldr	r2, [pc, #68]	; (8005040 <HAL_GPIO_Init+0x300>)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	3301      	adds	r3, #1
 8005004:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	f47f ae9d 	bne.w	8004d50 <HAL_GPIO_Init+0x10>
  }
}
 8005016:	bf00      	nop
 8005018:	bf00      	nop
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	40021000 	.word	0x40021000
 8005028:	40010000 	.word	0x40010000
 800502c:	48000400 	.word	0x48000400
 8005030:	48000800 	.word	0x48000800
 8005034:	48000c00 	.word	0x48000c00
 8005038:	48001000 	.word	0x48001000
 800503c:	48001400 	.word	0x48001400
 8005040:	40010400 	.word	0x40010400

08005044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	807b      	strh	r3, [r7, #2]
 8005050:	4613      	mov	r3, r2
 8005052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005054:	787b      	ldrb	r3, [r7, #1]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800505a:	887a      	ldrh	r2, [r7, #2]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005060:	e002      	b.n	8005068 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005062:	887a      	ldrh	r2, [r7, #2]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	695a      	ldr	r2, [r3, #20]
 8005084:	887b      	ldrh	r3, [r7, #2]
 8005086:	4013      	ands	r3, r2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800508c:	887a      	ldrh	r2, [r7, #2]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005092:	e002      	b.n	800509a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005094:	887a      	ldrh	r2, [r7, #2]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	619a      	str	r2, [r3, #24]
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
	...

080050a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050b2:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d006      	beq.n	80050cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050be:	4a05      	ldr	r2, [pc, #20]	; (80050d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 f806 	bl	80050d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40010400 	.word	0x40010400

080050d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e081      	b.n	8005204 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7fc fa85 	bl	8001624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2224      	movs	r2, #36	; 0x24
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800513e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800514e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d107      	bne.n	8005168 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005164:	609a      	str	r2, [r3, #8]
 8005166:	e006      	b.n	8005176 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005174:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d104      	bne.n	8005188 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005186:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	ea42 0103 	orr.w	r1, r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	021a      	lsls	r2, r3, #8
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69d9      	ldr	r1, [r3, #28]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1a      	ldr	r2, [r3, #32]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	461a      	mov	r2, r3
 8005218:	460b      	mov	r3, r1
 800521a:	817b      	strh	r3, [r7, #10]
 800521c:	4613      	mov	r3, r2
 800521e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b20      	cmp	r3, #32
 800522a:	f040 80da 	bne.w	80053e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_I2C_Master_Transmit+0x30>
 8005238:	2302      	movs	r3, #2
 800523a:	e0d3      	b.n	80053e4 <HAL_I2C_Master_Transmit+0x1d8>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005244:	f7ff f964 	bl	8004510 <HAL_GetTick>
 8005248:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	2319      	movs	r3, #25
 8005250:	2201      	movs	r2, #1
 8005252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fbc6 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e0be      	b.n	80053e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2221      	movs	r2, #33	; 0x21
 800526a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2210      	movs	r2, #16
 8005272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	893a      	ldrh	r2, [r7, #8]
 8005286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	2bff      	cmp	r3, #255	; 0xff
 8005296:	d90e      	bls.n	80052b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	22ff      	movs	r2, #255	; 0xff
 800529c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	8979      	ldrh	r1, [r7, #10]
 80052a6:	4b51      	ldr	r3, [pc, #324]	; (80053ec <HAL_I2C_Master_Transmit+0x1e0>)
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fcbc 	bl	8005c2c <I2C_TransferConfig>
 80052b4:	e06c      	b.n	8005390 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	8979      	ldrh	r1, [r7, #10]
 80052c8:	4b48      	ldr	r3, [pc, #288]	; (80053ec <HAL_I2C_Master_Transmit+0x1e0>)
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fcab 	bl	8005c2c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80052d6:	e05b      	b.n	8005390 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	6a39      	ldr	r1, [r7, #32]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 fbc3 	bl	8005a68 <I2C_WaitOnTXISFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e07b      	b.n	80053e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	781a      	ldrb	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d034      	beq.n	8005390 <HAL_I2C_Master_Transmit+0x184>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	d130      	bne.n	8005390 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	2200      	movs	r2, #0
 8005336:	2180      	movs	r1, #128	; 0x80
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 fb55 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e04d      	b.n	80053e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	2bff      	cmp	r3, #255	; 0xff
 8005350:	d90e      	bls.n	8005370 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	22ff      	movs	r2, #255	; 0xff
 8005356:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535c:	b2da      	uxtb	r2, r3
 800535e:	8979      	ldrh	r1, [r7, #10]
 8005360:	2300      	movs	r3, #0
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 fc5f 	bl	8005c2c <I2C_TransferConfig>
 800536e:	e00f      	b.n	8005390 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537e:	b2da      	uxtb	r2, r3
 8005380:	8979      	ldrh	r1, [r7, #10]
 8005382:	2300      	movs	r3, #0
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fc4e 	bl	8005c2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d19e      	bne.n	80052d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	6a39      	ldr	r1, [r7, #32]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fba2 	bl	8005ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e01a      	b.n	80053e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2220      	movs	r2, #32
 80053b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6859      	ldr	r1, [r3, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80053c2:	400b      	ands	r3, r1
 80053c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e000      	b.n	80053e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80053e2:	2302      	movs	r3, #2
  }
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	80002000 	.word	0x80002000
 80053f0:	fe00e800 	.word	0xfe00e800

080053f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	4608      	mov	r0, r1
 80053fe:	4611      	mov	r1, r2
 8005400:	461a      	mov	r2, r3
 8005402:	4603      	mov	r3, r0
 8005404:	817b      	strh	r3, [r7, #10]
 8005406:	460b      	mov	r3, r1
 8005408:	813b      	strh	r3, [r7, #8]
 800540a:	4613      	mov	r3, r2
 800540c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b20      	cmp	r3, #32
 8005418:	f040 80f9 	bne.w	800560e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <HAL_I2C_Mem_Write+0x34>
 8005422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005424:	2b00      	cmp	r3, #0
 8005426:	d105      	bne.n	8005434 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800542e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e0ed      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_I2C_Mem_Write+0x4e>
 800543e:	2302      	movs	r3, #2
 8005440:	e0e6      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800544a:	f7ff f861 	bl	8004510 <HAL_GetTick>
 800544e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	2319      	movs	r3, #25
 8005456:	2201      	movs	r2, #1
 8005458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fac3 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0d1      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2221      	movs	r2, #33	; 0x21
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2240      	movs	r2, #64	; 0x40
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a3a      	ldr	r2, [r7, #32]
 8005486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800548c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005494:	88f8      	ldrh	r0, [r7, #6]
 8005496:	893a      	ldrh	r2, [r7, #8]
 8005498:	8979      	ldrh	r1, [r7, #10]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	4603      	mov	r3, r0
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f9d3 	bl	8005850 <I2C_RequestMemoryWrite>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0a9      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2bff      	cmp	r3, #255	; 0xff
 80054c4:	d90e      	bls.n	80054e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	22ff      	movs	r2, #255	; 0xff
 80054ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	8979      	ldrh	r1, [r7, #10]
 80054d4:	2300      	movs	r3, #0
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 fba5 	bl	8005c2c <I2C_TransferConfig>
 80054e2:	e00f      	b.n	8005504 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	8979      	ldrh	r1, [r7, #10]
 80054f6:	2300      	movs	r3, #0
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fb94 	bl	8005c2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 faad 	bl	8005a68 <I2C_WaitOnTXISFlagUntilTimeout>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e07b      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	781a      	ldrb	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d034      	beq.n	80055bc <HAL_I2C_Mem_Write+0x1c8>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005556:	2b00      	cmp	r3, #0
 8005558:	d130      	bne.n	80055bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	2200      	movs	r2, #0
 8005562:	2180      	movs	r1, #128	; 0x80
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 fa3f 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e04d      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005578:	b29b      	uxth	r3, r3
 800557a:	2bff      	cmp	r3, #255	; 0xff
 800557c:	d90e      	bls.n	800559c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	22ff      	movs	r2, #255	; 0xff
 8005582:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005588:	b2da      	uxtb	r2, r3
 800558a:	8979      	ldrh	r1, [r7, #10]
 800558c:	2300      	movs	r3, #0
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fb49 	bl	8005c2c <I2C_TransferConfig>
 800559a:	e00f      	b.n	80055bc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	8979      	ldrh	r1, [r7, #10]
 80055ae:	2300      	movs	r3, #0
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fb38 	bl	8005c2c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d19e      	bne.n	8005504 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 fa8c 	bl	8005ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e01a      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2220      	movs	r2, #32
 80055e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6859      	ldr	r1, [r3, #4]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <HAL_I2C_Mem_Write+0x224>)
 80055ee:	400b      	ands	r3, r1
 80055f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	e000      	b.n	8005610 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800560e:	2302      	movs	r3, #2
  }
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	fe00e800 	.word	0xfe00e800

0800561c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	4608      	mov	r0, r1
 8005626:	4611      	mov	r1, r2
 8005628:	461a      	mov	r2, r3
 800562a:	4603      	mov	r3, r0
 800562c:	817b      	strh	r3, [r7, #10]
 800562e:	460b      	mov	r3, r1
 8005630:	813b      	strh	r3, [r7, #8]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b20      	cmp	r3, #32
 8005640:	f040 80fd 	bne.w	800583e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_I2C_Mem_Read+0x34>
 800564a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	d105      	bne.n	800565c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005656:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0f1      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_I2C_Mem_Read+0x4e>
 8005666:	2302      	movs	r3, #2
 8005668:	e0ea      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005672:	f7fe ff4d 	bl	8004510 <HAL_GetTick>
 8005676:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	2319      	movs	r3, #25
 800567e:	2201      	movs	r2, #1
 8005680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f9af 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0d5      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2222      	movs	r2, #34	; 0x22
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2240      	movs	r2, #64	; 0x40
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a3a      	ldr	r2, [r7, #32]
 80056ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056bc:	88f8      	ldrh	r0, [r7, #6]
 80056be:	893a      	ldrh	r2, [r7, #8]
 80056c0:	8979      	ldrh	r1, [r7, #10]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	4603      	mov	r3, r0
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 f913 	bl	80058f8 <I2C_RequestMemoryRead>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e0ad      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2bff      	cmp	r3, #255	; 0xff
 80056ec:	d90e      	bls.n	800570c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	22ff      	movs	r2, #255	; 0xff
 80056f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	8979      	ldrh	r1, [r7, #10]
 80056fc:	4b52      	ldr	r3, [pc, #328]	; (8005848 <HAL_I2C_Mem_Read+0x22c>)
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 fa91 	bl	8005c2c <I2C_TransferConfig>
 800570a:	e00f      	b.n	800572c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571a:	b2da      	uxtb	r2, r3
 800571c:	8979      	ldrh	r1, [r7, #10]
 800571e:	4b4a      	ldr	r3, [pc, #296]	; (8005848 <HAL_I2C_Mem_Read+0x22c>)
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 fa80 	bl	8005c2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	2200      	movs	r2, #0
 8005734:	2104      	movs	r1, #4
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 f956 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e07c      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577c:	b29b      	uxth	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d034      	beq.n	80057ec <HAL_I2C_Mem_Read+0x1d0>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005786:	2b00      	cmp	r3, #0
 8005788:	d130      	bne.n	80057ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	2200      	movs	r2, #0
 8005792:	2180      	movs	r1, #128	; 0x80
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f927 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e04d      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2bff      	cmp	r3, #255	; 0xff
 80057ac:	d90e      	bls.n	80057cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	22ff      	movs	r2, #255	; 0xff
 80057b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	8979      	ldrh	r1, [r7, #10]
 80057bc:	2300      	movs	r3, #0
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 fa31 	bl	8005c2c <I2C_TransferConfig>
 80057ca:	e00f      	b.n	80057ec <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	8979      	ldrh	r1, [r7, #10]
 80057de:	2300      	movs	r3, #0
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fa20 	bl	8005c2c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d19a      	bne.n	800572c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 f974 	bl	8005ae8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e01a      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2220      	movs	r2, #32
 8005810:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6859      	ldr	r1, [r3, #4]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	4b0b      	ldr	r3, [pc, #44]	; (800584c <HAL_I2C_Mem_Read+0x230>)
 800581e:	400b      	ands	r3, r1
 8005820:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2220      	movs	r2, #32
 8005826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	e000      	b.n	8005840 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800583e:	2302      	movs	r3, #2
  }
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	80002400 	.word	0x80002400
 800584c:	fe00e800 	.word	0xfe00e800

08005850 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af02      	add	r7, sp, #8
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	4608      	mov	r0, r1
 800585a:	4611      	mov	r1, r2
 800585c:	461a      	mov	r2, r3
 800585e:	4603      	mov	r3, r0
 8005860:	817b      	strh	r3, [r7, #10]
 8005862:	460b      	mov	r3, r1
 8005864:	813b      	strh	r3, [r7, #8]
 8005866:	4613      	mov	r3, r2
 8005868:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	b2da      	uxtb	r2, r3
 800586e:	8979      	ldrh	r1, [r7, #10]
 8005870:	4b20      	ldr	r3, [pc, #128]	; (80058f4 <I2C_RequestMemoryWrite+0xa4>)
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f9d7 	bl	8005c2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	69b9      	ldr	r1, [r7, #24]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f8f0 	bl	8005a68 <I2C_WaitOnTXISFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e02c      	b.n	80058ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d105      	bne.n	80058a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005898:	893b      	ldrh	r3, [r7, #8]
 800589a:	b2da      	uxtb	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	629a      	str	r2, [r3, #40]	; 0x28
 80058a2:	e015      	b.n	80058d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058a4:	893b      	ldrh	r3, [r7, #8]
 80058a6:	0a1b      	lsrs	r3, r3, #8
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	69b9      	ldr	r1, [r7, #24]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f8d6 	bl	8005a68 <I2C_WaitOnTXISFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e012      	b.n	80058ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058c6:	893b      	ldrh	r3, [r7, #8]
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2200      	movs	r2, #0
 80058d8:	2180      	movs	r1, #128	; 0x80
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f884 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	80002000 	.word	0x80002000

080058f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	4608      	mov	r0, r1
 8005902:	4611      	mov	r1, r2
 8005904:	461a      	mov	r2, r3
 8005906:	4603      	mov	r3, r0
 8005908:	817b      	strh	r3, [r7, #10]
 800590a:	460b      	mov	r3, r1
 800590c:	813b      	strh	r3, [r7, #8]
 800590e:	4613      	mov	r3, r2
 8005910:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	b2da      	uxtb	r2, r3
 8005916:	8979      	ldrh	r1, [r7, #10]
 8005918:	4b20      	ldr	r3, [pc, #128]	; (800599c <I2C_RequestMemoryRead+0xa4>)
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	2300      	movs	r3, #0
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 f984 	bl	8005c2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	69b9      	ldr	r1, [r7, #24]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f89d 	bl	8005a68 <I2C_WaitOnTXISFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e02c      	b.n	8005992 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005938:	88fb      	ldrh	r3, [r7, #6]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d105      	bne.n	800594a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800593e:	893b      	ldrh	r3, [r7, #8]
 8005940:	b2da      	uxtb	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	629a      	str	r2, [r3, #40]	; 0x28
 8005948:	e015      	b.n	8005976 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800594a:	893b      	ldrh	r3, [r7, #8]
 800594c:	0a1b      	lsrs	r3, r3, #8
 800594e:	b29b      	uxth	r3, r3
 8005950:	b2da      	uxtb	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	69b9      	ldr	r1, [r7, #24]
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f883 	bl	8005a68 <I2C_WaitOnTXISFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e012      	b.n	8005992 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800596c:	893b      	ldrh	r3, [r7, #8]
 800596e:	b2da      	uxtb	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2200      	movs	r2, #0
 800597e:	2140      	movs	r1, #64	; 0x40
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f831 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	80002000 	.word	0x80002000

080059a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d103      	bne.n	80059be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d007      	beq.n	80059dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	619a      	str	r2, [r3, #24]
  }
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f8:	e022      	b.n	8005a40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d01e      	beq.n	8005a40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a02:	f7fe fd85 	bl	8004510 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d302      	bcc.n	8005a18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d113      	bne.n	8005a40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1c:	f043 0220 	orr.w	r2, r3, #32
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e00f      	b.n	8005a60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d0cd      	beq.n	80059fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a74:	e02c      	b.n	8005ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f870 	bl	8005b60 <I2C_IsAcknowledgeFailed>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e02a      	b.n	8005ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d01e      	beq.n	8005ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a92:	f7fe fd3d 	bl	8004510 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d302      	bcc.n	8005aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d113      	bne.n	8005ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aac:	f043 0220 	orr.w	r2, r3, #32
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e007      	b.n	8005ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d1cb      	bne.n	8005a76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005af4:	e028      	b.n	8005b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	68b9      	ldr	r1, [r7, #8]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f830 	bl	8005b60 <I2C_IsAcknowledgeFailed>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e026      	b.n	8005b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0a:	f7fe fd01 	bl	8004510 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d302      	bcc.n	8005b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d113      	bne.n	8005b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b24:	f043 0220 	orr.w	r2, r3, #32
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e007      	b.n	8005b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d1cf      	bne.n	8005af6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b10      	cmp	r3, #16
 8005b78:	d151      	bne.n	8005c1e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b7a:	e022      	b.n	8005bc2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b82:	d01e      	beq.n	8005bc2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b84:	f7fe fcc4 	bl	8004510 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d302      	bcc.n	8005b9a <I2C_IsAcknowledgeFailed+0x3a>
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d113      	bne.n	8005bc2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9e:	f043 0220 	orr.w	r2, r3, #32
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e02e      	b.n	8005c20 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	d1d5      	bne.n	8005b7c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2210      	movs	r2, #16
 8005bd6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f7ff fedd 	bl	80059a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6859      	ldr	r1, [r3, #4]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <I2C_IsAcknowledgeFailed+0xc8>)
 8005bf2:	400b      	ands	r3, r1
 8005bf4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	f043 0204 	orr.w	r2, r3, #4
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	fe00e800 	.word	0xfe00e800

08005c2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	607b      	str	r3, [r7, #4]
 8005c36:	460b      	mov	r3, r1
 8005c38:	817b      	strh	r3, [r7, #10]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	0d5b      	lsrs	r3, r3, #21
 8005c48:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005c4c:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <I2C_TransferConfig+0x58>)
 8005c4e:	430b      	orrs	r3, r1
 8005c50:	43db      	mvns	r3, r3
 8005c52:	ea02 0103 	and.w	r1, r2, r3
 8005c56:	897b      	ldrh	r3, [r7, #10]
 8005c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c5c:	7a7b      	ldrb	r3, [r7, #9]
 8005c5e:	041b      	lsls	r3, r3, #16
 8005c60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005c76:	bf00      	nop
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	03ff63ff 	.word	0x03ff63ff

08005c88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	d138      	bne.n	8005d10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e032      	b.n	8005d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2224      	movs	r2, #36	; 0x24
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0201 	bic.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6819      	ldr	r1, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e000      	b.n	8005d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d10:	2302      	movs	r3, #2
  }
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b085      	sub	sp, #20
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d139      	bne.n	8005da8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e033      	b.n	8005daa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2224      	movs	r2, #36	; 0x24
 8005d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0201 	bic.w	r2, r2, #1
 8005d60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005d70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	e000      	b.n	8005daa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005da8:	2302      	movs	r3, #2
  }
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dbc:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a04      	ldr	r2, [pc, #16]	; (8005dd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dc6:	6013      	str	r3, [r2, #0]
}
 8005dc8:	bf00      	nop
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40007000 	.word	0x40007000

08005dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d141      	bne.n	8005e6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005de6:	4b4b      	ldr	r3, [pc, #300]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df2:	d131      	bne.n	8005e58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005df4:	4b47      	ldr	r3, [pc, #284]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dfa:	4a46      	ldr	r2, [pc, #280]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e04:	4b43      	ldr	r3, [pc, #268]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e0c:	4a41      	ldr	r2, [pc, #260]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e14:	4b40      	ldr	r3, [pc, #256]	; (8005f18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2232      	movs	r2, #50	; 0x32
 8005e1a:	fb02 f303 	mul.w	r3, r2, r3
 8005e1e:	4a3f      	ldr	r2, [pc, #252]	; (8005f1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e20:	fba2 2303 	umull	r2, r3, r2, r3
 8005e24:	0c9b      	lsrs	r3, r3, #18
 8005e26:	3301      	adds	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e2a:	e002      	b.n	8005e32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e32:	4b38      	ldr	r3, [pc, #224]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e3e:	d102      	bne.n	8005e46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f2      	bne.n	8005e2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e46:	4b33      	ldr	r3, [pc, #204]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e52:	d158      	bne.n	8005f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e057      	b.n	8005f08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e58:	4b2e      	ldr	r3, [pc, #184]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e5e:	4a2d      	ldr	r2, [pc, #180]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005e68:	e04d      	b.n	8005f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e70:	d141      	bne.n	8005ef6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e72:	4b28      	ldr	r3, [pc, #160]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e7e:	d131      	bne.n	8005ee4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e80:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e86:	4a23      	ldr	r2, [pc, #140]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e90:	4b20      	ldr	r3, [pc, #128]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e98:	4a1e      	ldr	r2, [pc, #120]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ea0:	4b1d      	ldr	r3, [pc, #116]	; (8005f18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2232      	movs	r2, #50	; 0x32
 8005ea6:	fb02 f303 	mul.w	r3, r2, r3
 8005eaa:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	0c9b      	lsrs	r3, r3, #18
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005eb6:	e002      	b.n	8005ebe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ebe:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eca:	d102      	bne.n	8005ed2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f2      	bne.n	8005eb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ed2:	4b10      	ldr	r3, [pc, #64]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ede:	d112      	bne.n	8005f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e011      	b.n	8005f08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eea:	4a0a      	ldr	r2, [pc, #40]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ef0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ef4:	e007      	b.n	8005f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ef6:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005efe:	4a05      	ldr	r2, [pc, #20]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	40007000 	.word	0x40007000
 8005f18:	20000000 	.word	0x20000000
 8005f1c:	431bde83 	.word	0x431bde83

08005f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b088      	sub	sp, #32
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e308      	b.n	8006544 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d075      	beq.n	800602a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f3e:	4ba3      	ldr	r3, [pc, #652]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 030c 	and.w	r3, r3, #12
 8005f46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f48:	4ba0      	ldr	r3, [pc, #640]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b0c      	cmp	r3, #12
 8005f56:	d102      	bne.n	8005f5e <HAL_RCC_OscConfig+0x3e>
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d002      	beq.n	8005f64 <HAL_RCC_OscConfig+0x44>
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d10b      	bne.n	8005f7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f64:	4b99      	ldr	r3, [pc, #612]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d05b      	beq.n	8006028 <HAL_RCC_OscConfig+0x108>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d157      	bne.n	8006028 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e2e3      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f84:	d106      	bne.n	8005f94 <HAL_RCC_OscConfig+0x74>
 8005f86:	4b91      	ldr	r3, [pc, #580]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a90      	ldr	r2, [pc, #576]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8005f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	e01d      	b.n	8005fd0 <HAL_RCC_OscConfig+0xb0>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x98>
 8005f9e:	4b8b      	ldr	r3, [pc, #556]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a8a      	ldr	r2, [pc, #552]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8005fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	4b88      	ldr	r3, [pc, #544]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a87      	ldr	r2, [pc, #540]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8005fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	e00b      	b.n	8005fd0 <HAL_RCC_OscConfig+0xb0>
 8005fb8:	4b84      	ldr	r3, [pc, #528]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a83      	ldr	r2, [pc, #524]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8005fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	4b81      	ldr	r3, [pc, #516]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a80      	ldr	r2, [pc, #512]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8005fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d013      	beq.n	8006000 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd8:	f7fe fa9a 	bl	8004510 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fe0:	f7fe fa96 	bl	8004510 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b64      	cmp	r3, #100	; 0x64
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e2a8      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ff2:	4b76      	ldr	r3, [pc, #472]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <HAL_RCC_OscConfig+0xc0>
 8005ffe:	e014      	b.n	800602a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006000:	f7fe fa86 	bl	8004510 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006008:	f7fe fa82 	bl	8004510 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b64      	cmp	r3, #100	; 0x64
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e294      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800601a:	4b6c      	ldr	r3, [pc, #432]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1f0      	bne.n	8006008 <HAL_RCC_OscConfig+0xe8>
 8006026:	e000      	b.n	800602a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d075      	beq.n	8006122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006036:	4b65      	ldr	r3, [pc, #404]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 030c 	and.w	r3, r3, #12
 800603e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006040:	4b62      	ldr	r3, [pc, #392]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b0c      	cmp	r3, #12
 800604e:	d102      	bne.n	8006056 <HAL_RCC_OscConfig+0x136>
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d002      	beq.n	800605c <HAL_RCC_OscConfig+0x13c>
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b04      	cmp	r3, #4
 800605a:	d11f      	bne.n	800609c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800605c:	4b5b      	ldr	r3, [pc, #364]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_RCC_OscConfig+0x154>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e267      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006074:	4b55      	ldr	r3, [pc, #340]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	061b      	lsls	r3, r3, #24
 8006082:	4952      	ldr	r1, [pc, #328]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8006084:	4313      	orrs	r3, r2
 8006086:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006088:	4b51      	ldr	r3, [pc, #324]	; (80061d0 <HAL_RCC_OscConfig+0x2b0>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe f9f3 	bl	8004478 <HAL_InitTick>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d043      	beq.n	8006120 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e253      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d023      	beq.n	80060ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060a4:	4b49      	ldr	r3, [pc, #292]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a48      	ldr	r2, [pc, #288]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 80060aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b0:	f7fe fa2e 	bl	8004510 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060b8:	f7fe fa2a 	bl	8004510 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e23c      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060ca:	4b40      	ldr	r3, [pc, #256]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d6:	4b3d      	ldr	r3, [pc, #244]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	061b      	lsls	r3, r3, #24
 80060e4:	4939      	ldr	r1, [pc, #228]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	604b      	str	r3, [r1, #4]
 80060ea:	e01a      	b.n	8006122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ec:	4b37      	ldr	r3, [pc, #220]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a36      	ldr	r2, [pc, #216]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 80060f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fe fa0a 	bl	8004510 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006100:	f7fe fa06 	bl	8004510 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e218      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006112:	4b2e      	ldr	r3, [pc, #184]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_OscConfig+0x1e0>
 800611e:	e000      	b.n	8006122 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006120:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d03c      	beq.n	80061a8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01c      	beq.n	8006170 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006136:	4b25      	ldr	r3, [pc, #148]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8006138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800613c:	4a23      	ldr	r2, [pc, #140]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 800613e:	f043 0301 	orr.w	r3, r3, #1
 8006142:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006146:	f7fe f9e3 	bl	8004510 <HAL_GetTick>
 800614a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800614e:	f7fe f9df 	bl	8004510 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e1f1      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006160:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8006162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0ef      	beq.n	800614e <HAL_RCC_OscConfig+0x22e>
 800616e:	e01b      	b.n	80061a8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006170:	4b16      	ldr	r3, [pc, #88]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8006172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006176:	4a15      	ldr	r2, [pc, #84]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 8006178:	f023 0301 	bic.w	r3, r3, #1
 800617c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006180:	f7fe f9c6 	bl	8004510 <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006188:	f7fe f9c2 	bl	8004510 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e1d4      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800619a:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 800619c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1ef      	bne.n	8006188 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80ab 	beq.w	800630c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061b6:	2300      	movs	r3, #0
 80061b8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80061ba:	4b04      	ldr	r3, [pc, #16]	; (80061cc <HAL_RCC_OscConfig+0x2ac>)
 80061bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <HAL_RCC_OscConfig+0x2b4>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e005      	b.n	80061d6 <HAL_RCC_OscConfig+0x2b6>
 80061ca:	bf00      	nop
 80061cc:	40021000 	.word	0x40021000
 80061d0:	20000004 	.word	0x20000004
 80061d4:	2300      	movs	r3, #0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00d      	beq.n	80061f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061da:	4baf      	ldr	r3, [pc, #700]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 80061dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061de:	4aae      	ldr	r2, [pc, #696]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 80061e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061e4:	6593      	str	r3, [r2, #88]	; 0x58
 80061e6:	4bac      	ldr	r3, [pc, #688]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 80061e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80061f2:	2301      	movs	r3, #1
 80061f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061f6:	4ba9      	ldr	r3, [pc, #676]	; (800649c <HAL_RCC_OscConfig+0x57c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d118      	bne.n	8006234 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006202:	4ba6      	ldr	r3, [pc, #664]	; (800649c <HAL_RCC_OscConfig+0x57c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4aa5      	ldr	r2, [pc, #660]	; (800649c <HAL_RCC_OscConfig+0x57c>)
 8006208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800620c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800620e:	f7fe f97f 	bl	8004510 <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006214:	e008      	b.n	8006228 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006216:	f7fe f97b 	bl	8004510 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e18d      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006228:	4b9c      	ldr	r3, [pc, #624]	; (800649c <HAL_RCC_OscConfig+0x57c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0f0      	beq.n	8006216 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d108      	bne.n	800624e <HAL_RCC_OscConfig+0x32e>
 800623c:	4b96      	ldr	r3, [pc, #600]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800623e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006242:	4a95      	ldr	r2, [pc, #596]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006244:	f043 0301 	orr.w	r3, r3, #1
 8006248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800624c:	e024      	b.n	8006298 <HAL_RCC_OscConfig+0x378>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	2b05      	cmp	r3, #5
 8006254:	d110      	bne.n	8006278 <HAL_RCC_OscConfig+0x358>
 8006256:	4b90      	ldr	r3, [pc, #576]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625c:	4a8e      	ldr	r2, [pc, #568]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800625e:	f043 0304 	orr.w	r3, r3, #4
 8006262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006266:	4b8c      	ldr	r3, [pc, #560]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626c:	4a8a      	ldr	r2, [pc, #552]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006276:	e00f      	b.n	8006298 <HAL_RCC_OscConfig+0x378>
 8006278:	4b87      	ldr	r3, [pc, #540]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627e:	4a86      	ldr	r2, [pc, #536]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006280:	f023 0301 	bic.w	r3, r3, #1
 8006284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006288:	4b83      	ldr	r3, [pc, #524]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800628a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628e:	4a82      	ldr	r2, [pc, #520]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006290:	f023 0304 	bic.w	r3, r3, #4
 8006294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d016      	beq.n	80062ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a0:	f7fe f936 	bl	8004510 <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062a6:	e00a      	b.n	80062be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a8:	f7fe f932 	bl	8004510 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e142      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062be:	4b76      	ldr	r3, [pc, #472]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 80062c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0ed      	beq.n	80062a8 <HAL_RCC_OscConfig+0x388>
 80062cc:	e015      	b.n	80062fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ce:	f7fe f91f 	bl	8004510 <HAL_GetTick>
 80062d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062d4:	e00a      	b.n	80062ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d6:	f7fe f91b 	bl	8004510 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e12b      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062ec:	4b6a      	ldr	r3, [pc, #424]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1ed      	bne.n	80062d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062fa:	7ffb      	ldrb	r3, [r7, #31]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d105      	bne.n	800630c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006300:	4b65      	ldr	r3, [pc, #404]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006304:	4a64      	ldr	r2, [pc, #400]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800630a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b00      	cmp	r3, #0
 8006316:	d03c      	beq.n	8006392 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01c      	beq.n	800635a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006320:	4b5d      	ldr	r3, [pc, #372]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006326:	4a5c      	ldr	r2, [pc, #368]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006328:	f043 0301 	orr.w	r3, r3, #1
 800632c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006330:	f7fe f8ee 	bl	8004510 <HAL_GetTick>
 8006334:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006338:	f7fe f8ea 	bl	8004510 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e0fc      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800634a:	4b53      	ldr	r3, [pc, #332]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800634c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0ef      	beq.n	8006338 <HAL_RCC_OscConfig+0x418>
 8006358:	e01b      	b.n	8006392 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800635a:	4b4f      	ldr	r3, [pc, #316]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800635c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006360:	4a4d      	ldr	r2, [pc, #308]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006362:	f023 0301 	bic.w	r3, r3, #1
 8006366:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636a:	f7fe f8d1 	bl	8004510 <HAL_GetTick>
 800636e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006372:	f7fe f8cd 	bl	8004510 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e0df      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006384:	4b44      	ldr	r3, [pc, #272]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006386:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1ef      	bne.n	8006372 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 80d3 	beq.w	8006542 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800639c:	4b3e      	ldr	r3, [pc, #248]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f003 030c 	and.w	r3, r3, #12
 80063a4:	2b0c      	cmp	r3, #12
 80063a6:	f000 808d 	beq.w	80064c4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d15a      	bne.n	8006468 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063b2:	4b39      	ldr	r3, [pc, #228]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a38      	ldr	r2, [pc, #224]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 80063b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063be:	f7fe f8a7 	bl	8004510 <HAL_GetTick>
 80063c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063c4:	e008      	b.n	80063d8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c6:	f7fe f8a3 	bl	8004510 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e0b5      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063d8:	4b2f      	ldr	r3, [pc, #188]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f0      	bne.n	80063c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063e4:	4b2c      	ldr	r3, [pc, #176]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	4b2d      	ldr	r3, [pc, #180]	; (80064a0 <HAL_RCC_OscConfig+0x580>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6a11      	ldr	r1, [r2, #32]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063f4:	3a01      	subs	r2, #1
 80063f6:	0112      	lsls	r2, r2, #4
 80063f8:	4311      	orrs	r1, r2
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80063fe:	0212      	lsls	r2, r2, #8
 8006400:	4311      	orrs	r1, r2
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006406:	0852      	lsrs	r2, r2, #1
 8006408:	3a01      	subs	r2, #1
 800640a:	0552      	lsls	r2, r2, #21
 800640c:	4311      	orrs	r1, r2
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006412:	0852      	lsrs	r2, r2, #1
 8006414:	3a01      	subs	r2, #1
 8006416:	0652      	lsls	r2, r2, #25
 8006418:	4311      	orrs	r1, r2
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800641e:	06d2      	lsls	r2, r2, #27
 8006420:	430a      	orrs	r2, r1
 8006422:	491d      	ldr	r1, [pc, #116]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006424:	4313      	orrs	r3, r2
 8006426:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006428:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1a      	ldr	r2, [pc, #104]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800642e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006432:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006434:	4b18      	ldr	r3, [pc, #96]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4a17      	ldr	r2, [pc, #92]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800643a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800643e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006440:	f7fe f866 	bl	8004510 <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006448:	f7fe f862 	bl	8004510 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e074      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800645a:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0f0      	beq.n	8006448 <HAL_RCC_OscConfig+0x528>
 8006466:	e06c      	b.n	8006542 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006468:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a0a      	ldr	r2, [pc, #40]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800646e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006472:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006474:	4b08      	ldr	r3, [pc, #32]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	4a07      	ldr	r2, [pc, #28]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 800647a:	f023 0303 	bic.w	r3, r3, #3
 800647e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006480:	4b05      	ldr	r3, [pc, #20]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	4a04      	ldr	r2, [pc, #16]	; (8006498 <HAL_RCC_OscConfig+0x578>)
 8006486:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800648a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800648e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006490:	f7fe f83e 	bl	8004510 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006496:	e00e      	b.n	80064b6 <HAL_RCC_OscConfig+0x596>
 8006498:	40021000 	.word	0x40021000
 800649c:	40007000 	.word	0x40007000
 80064a0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a4:	f7fe f834 	bl	8004510 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e046      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064b6:	4b25      	ldr	r3, [pc, #148]	; (800654c <HAL_RCC_OscConfig+0x62c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f0      	bne.n	80064a4 <HAL_RCC_OscConfig+0x584>
 80064c2:	e03e      	b.n	8006542 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e039      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80064d0:	4b1e      	ldr	r3, [pc, #120]	; (800654c <HAL_RCC_OscConfig+0x62c>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f003 0203 	and.w	r2, r3, #3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d12c      	bne.n	800653e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	3b01      	subs	r3, #1
 80064f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d123      	bne.n	800653e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006500:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006502:	429a      	cmp	r2, r3
 8006504:	d11b      	bne.n	800653e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006512:	429a      	cmp	r2, r3
 8006514:	d113      	bne.n	800653e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	085b      	lsrs	r3, r3, #1
 8006522:	3b01      	subs	r3, #1
 8006524:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006526:	429a      	cmp	r2, r3
 8006528:	d109      	bne.n	800653e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006534:	085b      	lsrs	r3, r3, #1
 8006536:	3b01      	subs	r3, #1
 8006538:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800653a:	429a      	cmp	r2, r3
 800653c:	d001      	beq.n	8006542 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3720      	adds	r7, #32
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40021000 	.word	0x40021000

08006550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800655a:	2300      	movs	r3, #0
 800655c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e11e      	b.n	80067a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006568:	4b91      	ldr	r3, [pc, #580]	; (80067b0 <HAL_RCC_ClockConfig+0x260>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d910      	bls.n	8006598 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006576:	4b8e      	ldr	r3, [pc, #568]	; (80067b0 <HAL_RCC_ClockConfig+0x260>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f023 020f 	bic.w	r2, r3, #15
 800657e:	498c      	ldr	r1, [pc, #560]	; (80067b0 <HAL_RCC_ClockConfig+0x260>)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	4313      	orrs	r3, r2
 8006584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006586:	4b8a      	ldr	r3, [pc, #552]	; (80067b0 <HAL_RCC_ClockConfig+0x260>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d001      	beq.n	8006598 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e106      	b.n	80067a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d073      	beq.n	800668c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d129      	bne.n	8006600 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065ac:	4b81      	ldr	r3, [pc, #516]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0f4      	b.n	80067a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80065bc:	f000 f99e 	bl	80068fc <RCC_GetSysClockFreqFromPLLSource>
 80065c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4a7c      	ldr	r2, [pc, #496]	; (80067b8 <HAL_RCC_ClockConfig+0x268>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d93f      	bls.n	800664a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80065ca:	4b7a      	ldr	r3, [pc, #488]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d033      	beq.n	800664a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d12f      	bne.n	800664a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80065ea:	4b72      	ldr	r3, [pc, #456]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065f2:	4a70      	ldr	r2, [pc, #448]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 80065f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80065fa:	2380      	movs	r3, #128	; 0x80
 80065fc:	617b      	str	r3, [r7, #20]
 80065fe:	e024      	b.n	800664a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d107      	bne.n	8006618 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006608:	4b6a      	ldr	r3, [pc, #424]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d109      	bne.n	8006628 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e0c6      	b.n	80067a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006618:	4b66      	ldr	r3, [pc, #408]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e0be      	b.n	80067a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006628:	f000 f8ce 	bl	80067c8 <HAL_RCC_GetSysClockFreq>
 800662c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4a61      	ldr	r2, [pc, #388]	; (80067b8 <HAL_RCC_ClockConfig+0x268>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d909      	bls.n	800664a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006636:	4b5f      	ldr	r3, [pc, #380]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800663e:	4a5d      	ldr	r2, [pc, #372]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 8006640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006644:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006646:	2380      	movs	r3, #128	; 0x80
 8006648:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800664a:	4b5a      	ldr	r3, [pc, #360]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f023 0203 	bic.w	r2, r3, #3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	4957      	ldr	r1, [pc, #348]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 8006658:	4313      	orrs	r3, r2
 800665a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800665c:	f7fd ff58 	bl	8004510 <HAL_GetTick>
 8006660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006662:	e00a      	b.n	800667a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006664:	f7fd ff54 	bl	8004510 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006672:	4293      	cmp	r3, r2
 8006674:	d901      	bls.n	800667a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e095      	b.n	80067a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800667a:	4b4e      	ldr	r3, [pc, #312]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 020c 	and.w	r2, r3, #12
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	429a      	cmp	r2, r3
 800668a:	d1eb      	bne.n	8006664 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d023      	beq.n	80066e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066a4:	4b43      	ldr	r3, [pc, #268]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	4a42      	ldr	r2, [pc, #264]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 80066aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0308 	and.w	r3, r3, #8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d007      	beq.n	80066cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80066bc:	4b3d      	ldr	r3, [pc, #244]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80066c4:	4a3b      	ldr	r2, [pc, #236]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 80066c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066cc:	4b39      	ldr	r3, [pc, #228]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	4936      	ldr	r1, [pc, #216]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	608b      	str	r3, [r1, #8]
 80066de:	e008      	b.n	80066f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2b80      	cmp	r3, #128	; 0x80
 80066e4:	d105      	bne.n	80066f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80066e6:	4b33      	ldr	r3, [pc, #204]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	4a32      	ldr	r2, [pc, #200]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 80066ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066f2:	4b2f      	ldr	r3, [pc, #188]	; (80067b0 <HAL_RCC_ClockConfig+0x260>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d21d      	bcs.n	800673c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006700:	4b2b      	ldr	r3, [pc, #172]	; (80067b0 <HAL_RCC_ClockConfig+0x260>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f023 020f 	bic.w	r2, r3, #15
 8006708:	4929      	ldr	r1, [pc, #164]	; (80067b0 <HAL_RCC_ClockConfig+0x260>)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	4313      	orrs	r3, r2
 800670e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006710:	f7fd fefe 	bl	8004510 <HAL_GetTick>
 8006714:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006716:	e00a      	b.n	800672e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006718:	f7fd fefa 	bl	8004510 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	f241 3288 	movw	r2, #5000	; 0x1388
 8006726:	4293      	cmp	r3, r2
 8006728:	d901      	bls.n	800672e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e03b      	b.n	80067a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800672e:	4b20      	ldr	r3, [pc, #128]	; (80067b0 <HAL_RCC_ClockConfig+0x260>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d1ed      	bne.n	8006718 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b00      	cmp	r3, #0
 8006746:	d008      	beq.n	800675a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006748:	4b1a      	ldr	r3, [pc, #104]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	4917      	ldr	r1, [pc, #92]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 8006756:	4313      	orrs	r3, r2
 8006758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0308 	and.w	r3, r3, #8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006766:	4b13      	ldr	r3, [pc, #76]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	490f      	ldr	r1, [pc, #60]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 8006776:	4313      	orrs	r3, r2
 8006778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800677a:	f000 f825 	bl	80067c8 <HAL_RCC_GetSysClockFreq>
 800677e:	4602      	mov	r2, r0
 8006780:	4b0c      	ldr	r3, [pc, #48]	; (80067b4 <HAL_RCC_ClockConfig+0x264>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	091b      	lsrs	r3, r3, #4
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	490c      	ldr	r1, [pc, #48]	; (80067bc <HAL_RCC_ClockConfig+0x26c>)
 800678c:	5ccb      	ldrb	r3, [r1, r3]
 800678e:	f003 031f 	and.w	r3, r3, #31
 8006792:	fa22 f303 	lsr.w	r3, r2, r3
 8006796:	4a0a      	ldr	r2, [pc, #40]	; (80067c0 <HAL_RCC_ClockConfig+0x270>)
 8006798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800679a:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <HAL_RCC_ClockConfig+0x274>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fd fe6a 	bl	8004478 <HAL_InitTick>
 80067a4:	4603      	mov	r3, r0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	40022000 	.word	0x40022000
 80067b4:	40021000 	.word	0x40021000
 80067b8:	04c4b400 	.word	0x04c4b400
 80067bc:	0800bc24 	.word	0x0800bc24
 80067c0:	20000000 	.word	0x20000000
 80067c4:	20000004 	.word	0x20000004

080067c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80067ce:	4b2c      	ldr	r3, [pc, #176]	; (8006880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 030c 	and.w	r3, r3, #12
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d102      	bne.n	80067e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80067da:	4b2a      	ldr	r3, [pc, #168]	; (8006884 <HAL_RCC_GetSysClockFreq+0xbc>)
 80067dc:	613b      	str	r3, [r7, #16]
 80067de:	e047      	b.n	8006870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80067e0:	4b27      	ldr	r3, [pc, #156]	; (8006880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 030c 	and.w	r3, r3, #12
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d102      	bne.n	80067f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80067ec:	4b26      	ldr	r3, [pc, #152]	; (8006888 <HAL_RCC_GetSysClockFreq+0xc0>)
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	e03e      	b.n	8006870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80067f2:	4b23      	ldr	r3, [pc, #140]	; (8006880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 030c 	and.w	r3, r3, #12
 80067fa:	2b0c      	cmp	r3, #12
 80067fc:	d136      	bne.n	800686c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067fe:	4b20      	ldr	r3, [pc, #128]	; (8006880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006808:	4b1d      	ldr	r3, [pc, #116]	; (8006880 <HAL_RCC_GetSysClockFreq+0xb8>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	3301      	adds	r3, #1
 8006814:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b03      	cmp	r3, #3
 800681a:	d10c      	bne.n	8006836 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800681c:	4a1a      	ldr	r2, [pc, #104]	; (8006888 <HAL_RCC_GetSysClockFreq+0xc0>)
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	fbb2 f3f3 	udiv	r3, r2, r3
 8006824:	4a16      	ldr	r2, [pc, #88]	; (8006880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006826:	68d2      	ldr	r2, [r2, #12]
 8006828:	0a12      	lsrs	r2, r2, #8
 800682a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800682e:	fb02 f303 	mul.w	r3, r2, r3
 8006832:	617b      	str	r3, [r7, #20]
      break;
 8006834:	e00c      	b.n	8006850 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006836:	4a13      	ldr	r2, [pc, #76]	; (8006884 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	fbb2 f3f3 	udiv	r3, r2, r3
 800683e:	4a10      	ldr	r2, [pc, #64]	; (8006880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006840:	68d2      	ldr	r2, [r2, #12]
 8006842:	0a12      	lsrs	r2, r2, #8
 8006844:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006848:	fb02 f303 	mul.w	r3, r2, r3
 800684c:	617b      	str	r3, [r7, #20]
      break;
 800684e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006850:	4b0b      	ldr	r3, [pc, #44]	; (8006880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	0e5b      	lsrs	r3, r3, #25
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	3301      	adds	r3, #1
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	fbb2 f3f3 	udiv	r3, r2, r3
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	e001      	b.n	8006870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006870:	693b      	ldr	r3, [r7, #16]
}
 8006872:	4618      	mov	r0, r3
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40021000 	.word	0x40021000
 8006884:	00f42400 	.word	0x00f42400
 8006888:	016e3600 	.word	0x016e3600

0800688c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006890:	4b03      	ldr	r3, [pc, #12]	; (80068a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006892:	681b      	ldr	r3, [r3, #0]
}
 8006894:	4618      	mov	r0, r3
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	20000000 	.word	0x20000000

080068a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80068a8:	f7ff fff0 	bl	800688c <HAL_RCC_GetHCLKFreq>
 80068ac:	4602      	mov	r2, r0
 80068ae:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	0a1b      	lsrs	r3, r3, #8
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	4904      	ldr	r1, [pc, #16]	; (80068cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80068ba:	5ccb      	ldrb	r3, [r1, r3]
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	40021000 	.word	0x40021000
 80068cc:	0800bc34 	.word	0x0800bc34

080068d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80068d4:	f7ff ffda 	bl	800688c <HAL_RCC_GetHCLKFreq>
 80068d8:	4602      	mov	r2, r0
 80068da:	4b06      	ldr	r3, [pc, #24]	; (80068f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	0adb      	lsrs	r3, r3, #11
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	4904      	ldr	r1, [pc, #16]	; (80068f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068e6:	5ccb      	ldrb	r3, [r1, r3]
 80068e8:	f003 031f 	and.w	r3, r3, #31
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	40021000 	.word	0x40021000
 80068f8:	0800bc34 	.word	0x0800bc34

080068fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006902:	4b1e      	ldr	r3, [pc, #120]	; (800697c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800690c:	4b1b      	ldr	r3, [pc, #108]	; (800697c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	3301      	adds	r3, #1
 8006918:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b03      	cmp	r3, #3
 800691e:	d10c      	bne.n	800693a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006920:	4a17      	ldr	r2, [pc, #92]	; (8006980 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	fbb2 f3f3 	udiv	r3, r2, r3
 8006928:	4a14      	ldr	r2, [pc, #80]	; (800697c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800692a:	68d2      	ldr	r2, [r2, #12]
 800692c:	0a12      	lsrs	r2, r2, #8
 800692e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006932:	fb02 f303 	mul.w	r3, r2, r3
 8006936:	617b      	str	r3, [r7, #20]
    break;
 8006938:	e00c      	b.n	8006954 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800693a:	4a12      	ldr	r2, [pc, #72]	; (8006984 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006942:	4a0e      	ldr	r2, [pc, #56]	; (800697c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006944:	68d2      	ldr	r2, [r2, #12]
 8006946:	0a12      	lsrs	r2, r2, #8
 8006948:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800694c:	fb02 f303 	mul.w	r3, r2, r3
 8006950:	617b      	str	r3, [r7, #20]
    break;
 8006952:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006954:	4b09      	ldr	r3, [pc, #36]	; (800697c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	0e5b      	lsrs	r3, r3, #25
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	3301      	adds	r3, #1
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	fbb2 f3f3 	udiv	r3, r2, r3
 800696c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800696e:	687b      	ldr	r3, [r7, #4]
}
 8006970:	4618      	mov	r0, r3
 8006972:	371c      	adds	r7, #28
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	40021000 	.word	0x40021000
 8006980:	016e3600 	.word	0x016e3600
 8006984:	00f42400 	.word	0x00f42400

08006988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006990:	2300      	movs	r3, #0
 8006992:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006994:	2300      	movs	r3, #0
 8006996:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8098 	beq.w	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069a6:	2300      	movs	r3, #0
 80069a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069aa:	4b43      	ldr	r3, [pc, #268]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10d      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069b6:	4b40      	ldr	r3, [pc, #256]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ba:	4a3f      	ldr	r2, [pc, #252]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c0:	6593      	str	r3, [r2, #88]	; 0x58
 80069c2:	4b3d      	ldr	r3, [pc, #244]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ca:	60bb      	str	r3, [r7, #8]
 80069cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069ce:	2301      	movs	r3, #1
 80069d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069d2:	4b3a      	ldr	r3, [pc, #232]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a39      	ldr	r2, [pc, #228]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069de:	f7fd fd97 	bl	8004510 <HAL_GetTick>
 80069e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069e4:	e009      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069e6:	f7fd fd93 	bl	8004510 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d902      	bls.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	74fb      	strb	r3, [r7, #19]
        break;
 80069f8:	e005      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069fa:	4b30      	ldr	r3, [pc, #192]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0ef      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a06:	7cfb      	ldrb	r3, [r7, #19]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d159      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a0c:	4b2a      	ldr	r3, [pc, #168]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01e      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d019      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a28:	4b23      	ldr	r3, [pc, #140]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a34:	4b20      	ldr	r3, [pc, #128]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a3a:	4a1f      	ldr	r2, [pc, #124]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a44:	4b1c      	ldr	r3, [pc, #112]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4a:	4a1b      	ldr	r2, [pc, #108]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a54:	4a18      	ldr	r2, [pc, #96]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d016      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a66:	f7fd fd53 	bl	8004510 <HAL_GetTick>
 8006a6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a6c:	e00b      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a6e:	f7fd fd4f 	bl	8004510 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d902      	bls.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	74fb      	strb	r3, [r7, #19]
            break;
 8006a84:	e006      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a86:	4b0c      	ldr	r3, [pc, #48]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0ec      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006a94:	7cfb      	ldrb	r3, [r7, #19]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10b      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a9a:	4b07      	ldr	r3, [pc, #28]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa8:	4903      	ldr	r1, [pc, #12]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ab2:	7cfb      	ldrb	r3, [r7, #19]
 8006ab4:	74bb      	strb	r3, [r7, #18]
 8006ab6:	e005      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac0:	7cfb      	ldrb	r3, [r7, #19]
 8006ac2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ac4:	7c7b      	ldrb	r3, [r7, #17]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d105      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aca:	4baf      	ldr	r3, [pc, #700]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ace:	4aae      	ldr	r2, [pc, #696]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ae2:	4ba9      	ldr	r3, [pc, #676]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae8:	f023 0203 	bic.w	r2, r3, #3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	49a5      	ldr	r1, [pc, #660]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00a      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b04:	4ba0      	ldr	r3, [pc, #640]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0a:	f023 020c 	bic.w	r2, r3, #12
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	499d      	ldr	r1, [pc, #628]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0304 	and.w	r3, r3, #4
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b26:	4b98      	ldr	r3, [pc, #608]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	4994      	ldr	r1, [pc, #592]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00a      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b48:	4b8f      	ldr	r3, [pc, #572]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	498c      	ldr	r1, [pc, #560]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0310 	and.w	r3, r3, #16
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b6a:	4b87      	ldr	r3, [pc, #540]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	4983      	ldr	r1, [pc, #524]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0320 	and.w	r3, r3, #32
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00a      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b8c:	4b7e      	ldr	r3, [pc, #504]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	497b      	ldr	r1, [pc, #492]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bae:	4b76      	ldr	r3, [pc, #472]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	4972      	ldr	r1, [pc, #456]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bd0:	4b6d      	ldr	r3, [pc, #436]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	496a      	ldr	r1, [pc, #424]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bf2:	4b65      	ldr	r3, [pc, #404]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	4961      	ldr	r1, [pc, #388]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00a      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c14:	4b5c      	ldr	r3, [pc, #368]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c1a:	f023 0203 	bic.w	r2, r3, #3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	4959      	ldr	r1, [pc, #356]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c36:	4b54      	ldr	r3, [pc, #336]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	4950      	ldr	r1, [pc, #320]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d015      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c58:	4b4b      	ldr	r3, [pc, #300]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	4948      	ldr	r1, [pc, #288]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c76:	d105      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c78:	4b43      	ldr	r3, [pc, #268]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	4a42      	ldr	r2, [pc, #264]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d015      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c90:	4b3d      	ldr	r3, [pc, #244]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9e:	493a      	ldr	r1, [pc, #232]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cae:	d105      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cb0:	4b35      	ldr	r3, [pc, #212]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	4a34      	ldr	r2, [pc, #208]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d015      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006cc8:	4b2f      	ldr	r3, [pc, #188]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	492c      	ldr	r1, [pc, #176]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ce6:	d105      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ce8:	4b27      	ldr	r3, [pc, #156]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	4a26      	ldr	r2, [pc, #152]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cf2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d015      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d00:	4b21      	ldr	r3, [pc, #132]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0e:	491e      	ldr	r1, [pc, #120]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d1e:	d105      	bne.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d20:	4b19      	ldr	r3, [pc, #100]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	4a18      	ldr	r2, [pc, #96]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d015      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d38:	4b13      	ldr	r3, [pc, #76]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	4910      	ldr	r1, [pc, #64]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d56:	d105      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d58:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	4a0a      	ldr	r2, [pc, #40]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006d5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d018      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006d70:	4b05      	ldr	r3, [pc, #20]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7e:	4902      	ldr	r1, [pc, #8]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006d86:	e001      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006d88:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d94:	d105      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d96:	4b21      	ldr	r3, [pc, #132]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	4a20      	ldr	r2, [pc, #128]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006da0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d015      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006dae:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dbc:	4917      	ldr	r1, [pc, #92]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dcc:	d105      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006dce:	4b13      	ldr	r3, [pc, #76]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	4a12      	ldr	r2, [pc, #72]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d015      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006de6:	4b0d      	ldr	r3, [pc, #52]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006de8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df4:	4909      	ldr	r1, [pc, #36]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e04:	d105      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e06:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	4a04      	ldr	r2, [pc, #16]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006e0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e10:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006e12:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40021000 	.word	0x40021000

08006e20 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d05c      	beq.n	8006eec <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d106      	bne.n	8006e4c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fb fbd8 	bl	80025fc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e54:	4b28      	ldr	r3, [pc, #160]	; (8006ef8 <HAL_RTC_Init+0xd8>)
 8006e56:	22ca      	movs	r2, #202	; 0xca
 8006e58:	625a      	str	r2, [r3, #36]	; 0x24
 8006e5a:	4b27      	ldr	r3, [pc, #156]	; (8006ef8 <HAL_RTC_Init+0xd8>)
 8006e5c:	2253      	movs	r2, #83	; 0x53
 8006e5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fa37 	bl	80072d4 <RTC_EnterInitMode>
 8006e66:	4603      	mov	r3, r0
 8006e68:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d133      	bne.n	8006ed8 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006e70:	4b21      	ldr	r3, [pc, #132]	; (8006ef8 <HAL_RTC_Init+0xd8>)
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	4a20      	ldr	r2, [pc, #128]	; (8006ef8 <HAL_RTC_Init+0xd8>)
 8006e76:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e7e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006e80:	4b1d      	ldr	r3, [pc, #116]	; (8006ef8 <HAL_RTC_Init+0xd8>)
 8006e82:	699a      	ldr	r2, [r3, #24]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6859      	ldr	r1, [r3, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	4319      	orrs	r1, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	430b      	orrs	r3, r1
 8006e94:	4918      	ldr	r1, [pc, #96]	; (8006ef8 <HAL_RTC_Init+0xd8>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	041b      	lsls	r3, r3, #16
 8006ea4:	4914      	ldr	r1, [pc, #80]	; (8006ef8 <HAL_RTC_Init+0xd8>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa46 	bl	800733c <RTC_ExitInitMode>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10e      	bne.n	8006ed8 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 8006eba:	4b0f      	ldr	r3, [pc, #60]	; (8006ef8 <HAL_RTC_Init+0xd8>)
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a19      	ldr	r1, [r3, #32]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	4319      	orrs	r1, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	4909      	ldr	r1, [pc, #36]	; (8006ef8 <HAL_RTC_Init+0xd8>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ed8:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <HAL_RTC_Init+0xd8>)
 8006eda:	22ff      	movs	r2, #255	; 0xff
 8006edc:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d103      	bne.n	8006eec <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	40002800 	.word	0x40002800

08006efc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006efc:	b590      	push	{r4, r7, lr}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_RTC_SetTime+0x1a>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e081      	b.n	800701a <HAL_RTC_SetTime+0x11e>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2202      	movs	r2, #2
 8006f22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f26:	4b3f      	ldr	r3, [pc, #252]	; (8007024 <HAL_RTC_SetTime+0x128>)
 8006f28:	22ca      	movs	r2, #202	; 0xca
 8006f2a:	625a      	str	r2, [r3, #36]	; 0x24
 8006f2c:	4b3d      	ldr	r3, [pc, #244]	; (8007024 <HAL_RTC_SetTime+0x128>)
 8006f2e:	2253      	movs	r2, #83	; 0x53
 8006f30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 f9ce 	bl	80072d4 <RTC_EnterInitMode>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006f3c:	7cfb      	ldrb	r3, [r7, #19]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d15c      	bne.n	8006ffc <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d125      	bne.n	8006f94 <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006f48:	4b36      	ldr	r3, [pc, #216]	; (8007024 <HAL_RTC_SetTime+0x128>)
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d102      	bne.n	8006f5a <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2200      	movs	r2, #0
 8006f58:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 fa2a 	bl	80073b8 <RTC_ByteToBcd2>
 8006f64:	4603      	mov	r3, r0
 8006f66:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	785b      	ldrb	r3, [r3, #1]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fa23 	bl	80073b8 <RTC_ByteToBcd2>
 8006f72:	4603      	mov	r3, r0
 8006f74:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f76:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	789b      	ldrb	r3, [r3, #2]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 fa1b 	bl	80073b8 <RTC_ByteToBcd2>
 8006f82:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f84:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	78db      	ldrb	r3, [r3, #3]
 8006f8c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	e017      	b.n	8006fc4 <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006f94:	4b23      	ldr	r3, [pc, #140]	; (8007024 <HAL_RTC_SetTime+0x128>)
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d102      	bne.n	8006fa6 <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006fb2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006fb8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	78db      	ldrb	r3, [r3, #3]
 8006fbe:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8006fc4:	4a17      	ldr	r2, [pc, #92]	; (8007024 <HAL_RTC_SetTime+0x128>)
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006fcc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006fd0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8006fd2:	4b14      	ldr	r3, [pc, #80]	; (8007024 <HAL_RTC_SetTime+0x128>)
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	4a13      	ldr	r2, [pc, #76]	; (8007024 <HAL_RTC_SetTime+0x128>)
 8006fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fdc:	6193      	str	r3, [r2, #24]

    /* Configure the RTC_CR register */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8006fde:	4b11      	ldr	r3, [pc, #68]	; (8007024 <HAL_RTC_SetTime+0x128>)
 8006fe0:	699a      	ldr	r2, [r3, #24]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	68d9      	ldr	r1, [r3, #12]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	430b      	orrs	r3, r1
 8006fec:	490d      	ldr	r1, [pc, #52]	; (8007024 <HAL_RTC_SetTime+0x128>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 f9a2 	bl	800733c <RTC_ExitInitMode>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ffc:	4b09      	ldr	r3, [pc, #36]	; (8007024 <HAL_RTC_SetTime+0x128>)
 8006ffe:	22ff      	movs	r2, #255	; 0xff
 8007000:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007002:	7cfb      	ldrb	r3, [r7, #19]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d103      	bne.n	8007010 <HAL_RTC_SetTime+0x114>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007018:	7cfb      	ldrb	r3, [r7, #19]
}
 800701a:	4618      	mov	r0, r3
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	bd90      	pop	{r4, r7, pc}
 8007022:	bf00      	nop
 8007024:	40002800 	.word	0x40002800

08007028 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8007034:	4b29      	ldr	r3, [pc, #164]	; (80070dc <HAL_RTC_GetTime+0xb4>)
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800703c:	4b27      	ldr	r3, [pc, #156]	; (80070dc <HAL_RTC_GetTime+0xb4>)
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8007048:	4b24      	ldr	r3, [pc, #144]	; (80070dc <HAL_RTC_GetTime+0xb4>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007050:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007054:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	0c1b      	lsrs	r3, r3, #16
 800705a:	b2db      	uxtb	r3, r3
 800705c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007060:	b2da      	uxtb	r2, r3
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	0a1b      	lsrs	r3, r3, #8
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007070:	b2da      	uxtb	r2, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	b2db      	uxtb	r3, r3
 800707a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707e:	b2da      	uxtb	r2, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	0d9b      	lsrs	r3, r3, #22
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d11a      	bne.n	80070d0 <HAL_RTC_GetTime+0xa8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f9aa 	bl	80073f8 <RTC_Bcd2ToByte>
 80070a4:	4603      	mov	r3, r0
 80070a6:	461a      	mov	r2, r3
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	785b      	ldrb	r3, [r3, #1]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 f9a1 	bl	80073f8 <RTC_Bcd2ToByte>
 80070b6:	4603      	mov	r3, r0
 80070b8:	461a      	mov	r2, r3
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	789b      	ldrb	r3, [r3, #2]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 f998 	bl	80073f8 <RTC_Bcd2ToByte>
 80070c8:	4603      	mov	r3, r0
 80070ca:	461a      	mov	r2, r3
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	40002800 	.word	0x40002800

080070e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <HAL_RTC_SetDate+0x1a>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e071      	b.n	80071de <HAL_RTC_SetDate+0xfe>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2202      	movs	r2, #2
 8007106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10e      	bne.n	800712e <HAL_RTC_SetDate+0x4e>
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	f003 0310 	and.w	r3, r3, #16
 8007118:	2b00      	cmp	r3, #0
 800711a:	d008      	beq.n	800712e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	785b      	ldrb	r3, [r3, #1]
 8007120:	f023 0310 	bic.w	r3, r3, #16
 8007124:	b2db      	uxtb	r3, r3
 8007126:	330a      	adds	r3, #10
 8007128:	b2da      	uxtb	r2, r3
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d11c      	bne.n	800716e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	78db      	ldrb	r3, [r3, #3]
 8007138:	4618      	mov	r0, r3
 800713a:	f000 f93d 	bl	80073b8 <RTC_ByteToBcd2>
 800713e:	4603      	mov	r3, r0
 8007140:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	4618      	mov	r0, r3
 8007148:	f000 f936 	bl	80073b8 <RTC_ByteToBcd2>
 800714c:	4603      	mov	r3, r0
 800714e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007150:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	789b      	ldrb	r3, [r3, #2]
 8007156:	4618      	mov	r0, r3
 8007158:	f000 f92e 	bl	80073b8 <RTC_ByteToBcd2>
 800715c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800715e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007168:	4313      	orrs	r3, r2
 800716a:	617b      	str	r3, [r7, #20]
 800716c:	e00e      	b.n	800718c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	78db      	ldrb	r3, [r3, #3]
 8007172:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	785b      	ldrb	r3, [r3, #1]
 8007178:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800717a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007180:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007188:	4313      	orrs	r3, r2
 800718a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800718c:	4b16      	ldr	r3, [pc, #88]	; (80071e8 <HAL_RTC_SetDate+0x108>)
 800718e:	22ca      	movs	r2, #202	; 0xca
 8007190:	625a      	str	r2, [r3, #36]	; 0x24
 8007192:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <HAL_RTC_SetDate+0x108>)
 8007194:	2253      	movs	r2, #83	; 0x53
 8007196:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f89b 	bl	80072d4 <RTC_EnterInitMode>
 800719e:	4603      	mov	r3, r0
 80071a0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80071a2:	7cfb      	ldrb	r3, [r7, #19]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10b      	bne.n	80071c0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80071a8:	4a0f      	ldr	r2, [pc, #60]	; (80071e8 <HAL_RTC_SetDate+0x108>)
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071b4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f8c0 	bl	800733c <RTC_ExitInitMode>
 80071bc:	4603      	mov	r3, r0
 80071be:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071c0:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <HAL_RTC_SetDate+0x108>)
 80071c2:	22ff      	movs	r2, #255	; 0xff
 80071c4:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 80071c6:	7cfb      	ldrb	r3, [r7, #19]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d103      	bne.n	80071d4 <HAL_RTC_SetDate+0xf4>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80071dc:	7cfb      	ldrb	r3, [r7, #19]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd90      	pop	{r4, r7, pc}
 80071e6:	bf00      	nop
 80071e8:	40002800 	.word	0x40002800

080071ec <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80071f8:	4b22      	ldr	r3, [pc, #136]	; (8007284 <HAL_RTC_GetDate+0x98>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007200:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007204:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	0c1b      	lsrs	r3, r3, #16
 800720a:	b2da      	uxtb	r2, r3
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	0a1b      	lsrs	r3, r3, #8
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f003 031f 	and.w	r3, r3, #31
 800721a:	b2da      	uxtb	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007228:	b2da      	uxtb	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	0b5b      	lsrs	r3, r3, #13
 8007232:	b2db      	uxtb	r3, r3
 8007234:	f003 0307 	and.w	r3, r3, #7
 8007238:	b2da      	uxtb	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d11a      	bne.n	800727a <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	78db      	ldrb	r3, [r3, #3]
 8007248:	4618      	mov	r0, r3
 800724a:	f000 f8d5 	bl	80073f8 <RTC_Bcd2ToByte>
 800724e:	4603      	mov	r3, r0
 8007250:	461a      	mov	r2, r3
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f8cc 	bl	80073f8 <RTC_Bcd2ToByte>
 8007260:	4603      	mov	r3, r0
 8007262:	461a      	mov	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	789b      	ldrb	r3, [r3, #2]
 800726c:	4618      	mov	r0, r3
 800726e:	f000 f8c3 	bl	80073f8 <RTC_Bcd2ToByte>
 8007272:	4603      	mov	r3, r0
 8007274:	461a      	mov	r2, r3
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	40002800 	.word	0x40002800

08007288 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);

  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 8007290:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <HAL_RTC_WaitForSynchro+0x48>)
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	4a0e      	ldr	r2, [pc, #56]	; (80072d0 <HAL_RTC_WaitForSynchro+0x48>)
 8007296:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 800729a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800729c:	f7fd f938 	bl	8004510 <HAL_GetTick>
 80072a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80072a2:	e009      	b.n	80072b8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072a4:	f7fd f934 	bl	8004510 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072b2:	d901      	bls.n	80072b8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e006      	b.n	80072c6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <HAL_RTC_WaitForSynchro+0x48>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f003 0320 	and.w	r3, r3, #32
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0ef      	beq.n	80072a4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	40002800 	.word	0x40002800

080072d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80072e0:	4b15      	ldr	r3, [pc, #84]	; (8007338 <RTC_EnterInitMode+0x64>)
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d120      	bne.n	800732e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80072ec:	4b12      	ldr	r3, [pc, #72]	; (8007338 <RTC_EnterInitMode+0x64>)
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	4a11      	ldr	r2, [pc, #68]	; (8007338 <RTC_EnterInitMode+0x64>)
 80072f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80072f8:	f7fd f90a 	bl	8004510 <HAL_GetTick>
 80072fc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80072fe:	e00d      	b.n	800731c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007300:	f7fd f906 	bl	8004510 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800730e:	d905      	bls.n	800731c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2203      	movs	r2, #3
 8007318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800731c:	4b06      	ldr	r3, [pc, #24]	; (8007338 <RTC_EnterInitMode+0x64>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d102      	bne.n	800732e <RTC_EnterInitMode+0x5a>
 8007328:	7bfb      	ldrb	r3, [r7, #15]
 800732a:	2b03      	cmp	r3, #3
 800732c:	d1e8      	bne.n	8007300 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800732e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	40002800 	.word	0x40002800

0800733c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007348:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <RTC_ExitInitMode+0x78>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	4a19      	ldr	r2, [pc, #100]	; (80073b4 <RTC_ExitInitMode+0x78>)
 800734e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007352:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007354:	4b17      	ldr	r3, [pc, #92]	; (80073b4 <RTC_ExitInitMode+0x78>)
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	f003 0320 	and.w	r3, r3, #32
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10c      	bne.n	800737a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff ff91 	bl	8007288 <HAL_RTC_WaitForSynchro>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d01e      	beq.n	80073aa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2203      	movs	r2, #3
 8007370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	73fb      	strb	r3, [r7, #15]
 8007378:	e017      	b.n	80073aa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800737a:	4b0e      	ldr	r3, [pc, #56]	; (80073b4 <RTC_ExitInitMode+0x78>)
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	4a0d      	ldr	r2, [pc, #52]	; (80073b4 <RTC_ExitInitMode+0x78>)
 8007380:	f023 0320 	bic.w	r3, r3, #32
 8007384:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7ff ff7e 	bl	8007288 <HAL_RTC_WaitForSynchro>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d005      	beq.n	800739e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2203      	movs	r2, #3
 8007396:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800739e:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <RTC_ExitInitMode+0x78>)
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	4a04      	ldr	r2, [pc, #16]	; (80073b4 <RTC_ExitInitMode+0x78>)
 80073a4:	f043 0320 	orr.w	r3, r3, #32
 80073a8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	40002800 	.word	0x40002800

080073b8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80073c6:	79fb      	ldrb	r3, [r7, #7]
 80073c8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80073ca:	e005      	b.n	80073d8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80073d2:	7afb      	ldrb	r3, [r7, #11]
 80073d4:	3b0a      	subs	r3, #10
 80073d6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80073d8:	7afb      	ldrb	r3, [r7, #11]
 80073da:	2b09      	cmp	r3, #9
 80073dc:	d8f6      	bhi.n	80073cc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	b2db      	uxtb	r3, r3
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	091b      	lsrs	r3, r3, #4
 8007406:	b2db      	uxtb	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	b2da      	uxtb	r2, r3
 8007418:	79fb      	ldrb	r3, [r7, #7]
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	b2db      	uxtb	r3, r3
 8007420:	4413      	add	r3, r2
 8007422:	b2db      	uxtb	r3, r3
}
 8007424:	4618      	mov	r0, r3
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified TAMP Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 800743c:	4b07      	ldr	r3, [pc, #28]	; (800745c <HAL_RTCEx_BKUPWrite+0x2c>)
 800743e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4413      	add	r3, r2
 8007448:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	601a      	str	r2, [r3, #0]
}
 8007450:	bf00      	nop
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	40002500 	.word	0x40002500

08007460 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB to
  *          specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 800746a:	4b07      	ldr	r3, [pc, #28]	; (8007488 <HAL_RTCEx_BKUPRead+0x28>)
 800746c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4413      	add	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	40002500 	.word	0x40002500

0800748c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e049      	b.n	8007532 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d106      	bne.n	80074b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7fb fe84 	bl	80031c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3304      	adds	r3, #4
 80074c8:	4619      	mov	r1, r3
 80074ca:	4610      	mov	r0, r2
 80074cc:	f000 ff4c 	bl	8008368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b01      	cmp	r3, #1
 800754e:	d001      	beq.n	8007554 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e019      	b.n	8007588 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689a      	ldr	r2, [r3, #8]
 8007562:	4b0c      	ldr	r3, [pc, #48]	; (8007594 <HAL_TIM_Base_Start+0x58>)
 8007564:	4013      	ands	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b06      	cmp	r3, #6
 800756c:	d00b      	beq.n	8007586 <HAL_TIM_Base_Start+0x4a>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007574:	d007      	beq.n	8007586 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0201 	orr.w	r2, r2, #1
 8007584:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	00010007 	.word	0x00010007

08007598 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e049      	b.n	800763e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d106      	bne.n	80075c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f841 	bl	8007646 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3304      	adds	r3, #4
 80075d4:	4619      	mov	r1, r3
 80075d6:	4610      	mov	r0, r2
 80075d8:	f000 fec6 	bl	8008368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
	...

0800765c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d109      	bne.n	8007684 <HAL_TIM_PWM_Start_DMA+0x28>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b02      	cmp	r3, #2
 800767a:	bf0c      	ite	eq
 800767c:	2301      	moveq	r3, #1
 800767e:	2300      	movne	r3, #0
 8007680:	b2db      	uxtb	r3, r3
 8007682:	e03c      	b.n	80076fe <HAL_TIM_PWM_Start_DMA+0xa2>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b04      	cmp	r3, #4
 8007688:	d109      	bne.n	800769e <HAL_TIM_PWM_Start_DMA+0x42>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	bf0c      	ite	eq
 8007696:	2301      	moveq	r3, #1
 8007698:	2300      	movne	r3, #0
 800769a:	b2db      	uxtb	r3, r3
 800769c:	e02f      	b.n	80076fe <HAL_TIM_PWM_Start_DMA+0xa2>
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d109      	bne.n	80076b8 <HAL_TIM_PWM_Start_DMA+0x5c>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	bf0c      	ite	eq
 80076b0:	2301      	moveq	r3, #1
 80076b2:	2300      	movne	r3, #0
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	e022      	b.n	80076fe <HAL_TIM_PWM_Start_DMA+0xa2>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b0c      	cmp	r3, #12
 80076bc:	d109      	bne.n	80076d2 <HAL_TIM_PWM_Start_DMA+0x76>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	bf0c      	ite	eq
 80076ca:	2301      	moveq	r3, #1
 80076cc:	2300      	movne	r3, #0
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	e015      	b.n	80076fe <HAL_TIM_PWM_Start_DMA+0xa2>
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2b10      	cmp	r3, #16
 80076d6:	d109      	bne.n	80076ec <HAL_TIM_PWM_Start_DMA+0x90>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	bf0c      	ite	eq
 80076e4:	2301      	moveq	r3, #1
 80076e6:	2300      	movne	r3, #0
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	e008      	b.n	80076fe <HAL_TIM_PWM_Start_DMA+0xa2>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	bf0c      	ite	eq
 80076f8:	2301      	moveq	r3, #1
 80076fa:	2300      	movne	r3, #0
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8007702:	2302      	movs	r3, #2
 8007704:	e17d      	b.n	8007a02 <HAL_TIM_PWM_Start_DMA+0x3a6>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d109      	bne.n	8007720 <HAL_TIM_PWM_Start_DMA+0xc4>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b01      	cmp	r3, #1
 8007716:	bf0c      	ite	eq
 8007718:	2301      	moveq	r3, #1
 800771a:	2300      	movne	r3, #0
 800771c:	b2db      	uxtb	r3, r3
 800771e:	e03c      	b.n	800779a <HAL_TIM_PWM_Start_DMA+0x13e>
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2b04      	cmp	r3, #4
 8007724:	d109      	bne.n	800773a <HAL_TIM_PWM_Start_DMA+0xde>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b01      	cmp	r3, #1
 8007730:	bf0c      	ite	eq
 8007732:	2301      	moveq	r3, #1
 8007734:	2300      	movne	r3, #0
 8007736:	b2db      	uxtb	r3, r3
 8007738:	e02f      	b.n	800779a <HAL_TIM_PWM_Start_DMA+0x13e>
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b08      	cmp	r3, #8
 800773e:	d109      	bne.n	8007754 <HAL_TIM_PWM_Start_DMA+0xf8>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b01      	cmp	r3, #1
 800774a:	bf0c      	ite	eq
 800774c:	2301      	moveq	r3, #1
 800774e:	2300      	movne	r3, #0
 8007750:	b2db      	uxtb	r3, r3
 8007752:	e022      	b.n	800779a <HAL_TIM_PWM_Start_DMA+0x13e>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b0c      	cmp	r3, #12
 8007758:	d109      	bne.n	800776e <HAL_TIM_PWM_Start_DMA+0x112>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b01      	cmp	r3, #1
 8007764:	bf0c      	ite	eq
 8007766:	2301      	moveq	r3, #1
 8007768:	2300      	movne	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	e015      	b.n	800779a <HAL_TIM_PWM_Start_DMA+0x13e>
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b10      	cmp	r3, #16
 8007772:	d109      	bne.n	8007788 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b01      	cmp	r3, #1
 800777e:	bf0c      	ite	eq
 8007780:	2301      	moveq	r3, #1
 8007782:	2300      	movne	r3, #0
 8007784:	b2db      	uxtb	r3, r3
 8007786:	e008      	b.n	800779a <HAL_TIM_PWM_Start_DMA+0x13e>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	bf0c      	ite	eq
 8007794:	2301      	moveq	r3, #1
 8007796:	2300      	movne	r3, #0
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d034      	beq.n	8007808 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d104      	bne.n	80077ae <HAL_TIM_PWM_Start_DMA+0x152>
 80077a4:	887b      	ldrh	r3, [r7, #2]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e129      	b.n	8007a02 <HAL_TIM_PWM_Start_DMA+0x3a6>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d104      	bne.n	80077be <HAL_TIM_PWM_Start_DMA+0x162>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077bc:	e026      	b.n	800780c <HAL_TIM_PWM_Start_DMA+0x1b0>
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d104      	bne.n	80077ce <HAL_TIM_PWM_Start_DMA+0x172>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077cc:	e01e      	b.n	800780c <HAL_TIM_PWM_Start_DMA+0x1b0>
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d104      	bne.n	80077de <HAL_TIM_PWM_Start_DMA+0x182>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077dc:	e016      	b.n	800780c <HAL_TIM_PWM_Start_DMA+0x1b0>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2b0c      	cmp	r3, #12
 80077e2:	d104      	bne.n	80077ee <HAL_TIM_PWM_Start_DMA+0x192>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077ec:	e00e      	b.n	800780c <HAL_TIM_PWM_Start_DMA+0x1b0>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b10      	cmp	r3, #16
 80077f2:	d104      	bne.n	80077fe <HAL_TIM_PWM_Start_DMA+0x1a2>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077fc:	e006      	b.n	800780c <HAL_TIM_PWM_Start_DMA+0x1b0>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2202      	movs	r2, #2
 8007802:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007806:	e001      	b.n	800780c <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e0fa      	b.n	8007a02 <HAL_TIM_PWM_Start_DMA+0x3a6>
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b0c      	cmp	r3, #12
 8007810:	f200 80ae 	bhi.w	8007970 <HAL_TIM_PWM_Start_DMA+0x314>
 8007814:	a201      	add	r2, pc, #4	; (adr r2, 800781c <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	08007851 	.word	0x08007851
 8007820:	08007971 	.word	0x08007971
 8007824:	08007971 	.word	0x08007971
 8007828:	08007971 	.word	0x08007971
 800782c:	08007899 	.word	0x08007899
 8007830:	08007971 	.word	0x08007971
 8007834:	08007971 	.word	0x08007971
 8007838:	08007971 	.word	0x08007971
 800783c:	080078e1 	.word	0x080078e1
 8007840:	08007971 	.word	0x08007971
 8007844:	08007971 	.word	0x08007971
 8007848:	08007971 	.word	0x08007971
 800784c:	08007929 	.word	0x08007929
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	4a6d      	ldr	r2, [pc, #436]	; (8007a0c <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8007856:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	4a6c      	ldr	r2, [pc, #432]	; (8007a10 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 800785e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	4a6b      	ldr	r2, [pc, #428]	; (8007a14 <HAL_TIM_PWM_Start_DMA+0x3b8>)
 8007866:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800786c:	6879      	ldr	r1, [r7, #4]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3334      	adds	r3, #52	; 0x34
 8007874:	461a      	mov	r2, r3
 8007876:	887b      	ldrh	r3, [r7, #2]
 8007878:	f7fd f830 	bl	80048dc <HAL_DMA_Start_IT>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e0bd      	b.n	8007a02 <HAL_TIM_PWM_Start_DMA+0x3a6>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007894:	60da      	str	r2, [r3, #12]
      break;
 8007896:	e06c      	b.n	8007972 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789c:	4a5b      	ldr	r2, [pc, #364]	; (8007a0c <HAL_TIM_PWM_Start_DMA+0x3b0>)
 800789e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a4:	4a5a      	ldr	r2, [pc, #360]	; (8007a10 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 80078a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	4a59      	ldr	r2, [pc, #356]	; (8007a14 <HAL_TIM_PWM_Start_DMA+0x3b8>)
 80078ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3338      	adds	r3, #56	; 0x38
 80078bc:	461a      	mov	r2, r3
 80078be:	887b      	ldrh	r3, [r7, #2]
 80078c0:	f7fd f80c 	bl	80048dc <HAL_DMA_Start_IT>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_TIM_PWM_Start_DMA+0x272>
      {
        return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e099      	b.n	8007a02 <HAL_TIM_PWM_Start_DMA+0x3a6>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078dc:	60da      	str	r2, [r3, #12]
      break;
 80078de:	e048      	b.n	8007972 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	4a49      	ldr	r2, [pc, #292]	; (8007a0c <HAL_TIM_PWM_Start_DMA+0x3b0>)
 80078e6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	4a48      	ldr	r2, [pc, #288]	; (8007a10 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 80078ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f4:	4a47      	ldr	r2, [pc, #284]	; (8007a14 <HAL_TIM_PWM_Start_DMA+0x3b8>)
 80078f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80078fc:	6879      	ldr	r1, [r7, #4]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	333c      	adds	r3, #60	; 0x3c
 8007904:	461a      	mov	r2, r3
 8007906:	887b      	ldrh	r3, [r7, #2]
 8007908:	f7fc ffe8 	bl	80048dc <HAL_DMA_Start_IT>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e075      	b.n	8007a02 <HAL_TIM_PWM_Start_DMA+0x3a6>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68da      	ldr	r2, [r3, #12]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007924:	60da      	str	r2, [r3, #12]
      break;
 8007926:	e024      	b.n	8007972 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	4a37      	ldr	r2, [pc, #220]	; (8007a0c <HAL_TIM_PWM_Start_DMA+0x3b0>)
 800792e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007934:	4a36      	ldr	r2, [pc, #216]	; (8007a10 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 8007936:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793c:	4a35      	ldr	r2, [pc, #212]	; (8007a14 <HAL_TIM_PWM_Start_DMA+0x3b8>)
 800793e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3340      	adds	r3, #64	; 0x40
 800794c:	461a      	mov	r2, r3
 800794e:	887b      	ldrh	r3, [r7, #2]
 8007950:	f7fc ffc4 	bl	80048dc <HAL_DMA_Start_IT>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <HAL_TIM_PWM_Start_DMA+0x302>
      {
        return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e051      	b.n	8007a02 <HAL_TIM_PWM_Start_DMA+0x3a6>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800796c:	60da      	str	r2, [r3, #12]
      break;
 800796e:	e000      	b.n	8007972 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8007970:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2201      	movs	r2, #1
 8007978:	68b9      	ldr	r1, [r7, #8]
 800797a:	4618      	mov	r0, r3
 800797c:	f001 f962 	bl	8008c44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a24      	ldr	r2, [pc, #144]	; (8007a18 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d018      	beq.n	80079bc <HAL_TIM_PWM_Start_DMA+0x360>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a23      	ldr	r2, [pc, #140]	; (8007a1c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d013      	beq.n	80079bc <HAL_TIM_PWM_Start_DMA+0x360>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a21      	ldr	r2, [pc, #132]	; (8007a20 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d00e      	beq.n	80079bc <HAL_TIM_PWM_Start_DMA+0x360>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a20      	ldr	r2, [pc, #128]	; (8007a24 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d009      	beq.n	80079bc <HAL_TIM_PWM_Start_DMA+0x360>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a1e      	ldr	r2, [pc, #120]	; (8007a28 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d004      	beq.n	80079bc <HAL_TIM_PWM_Start_DMA+0x360>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a1d      	ldr	r2, [pc, #116]	; (8007a2c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d101      	bne.n	80079c0 <HAL_TIM_PWM_Start_DMA+0x364>
 80079bc:	2301      	movs	r3, #1
 80079be:	e000      	b.n	80079c2 <HAL_TIM_PWM_Start_DMA+0x366>
 80079c0:	2300      	movs	r3, #0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d007      	beq.n	80079d6 <HAL_TIM_PWM_Start_DMA+0x37a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	4b14      	ldr	r3, [pc, #80]	; (8007a30 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80079de:	4013      	ands	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b06      	cmp	r3, #6
 80079e6:	d00b      	beq.n	8007a00 <HAL_TIM_PWM_Start_DMA+0x3a4>
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ee:	d007      	beq.n	8007a00 <HAL_TIM_PWM_Start_DMA+0x3a4>
  {
    __HAL_TIM_ENABLE(htim);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0201 	orr.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	08008257 	.word	0x08008257
 8007a10:	080082ff 	.word	0x080082ff
 8007a14:	080081c5 	.word	0x080081c5
 8007a18:	40012c00 	.word	0x40012c00
 8007a1c:	40013400 	.word	0x40013400
 8007a20:	40014000 	.word	0x40014000
 8007a24:	40014400 	.word	0x40014400
 8007a28:	40014800 	.word	0x40014800
 8007a2c:	40015000 	.word	0x40015000
 8007a30:	00010007 	.word	0x00010007

08007a34 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b0c      	cmp	r3, #12
 8007a42:	d855      	bhi.n	8007af0 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8007a44:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8007a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4a:	bf00      	nop
 8007a4c:	08007a81 	.word	0x08007a81
 8007a50:	08007af1 	.word	0x08007af1
 8007a54:	08007af1 	.word	0x08007af1
 8007a58:	08007af1 	.word	0x08007af1
 8007a5c:	08007a9d 	.word	0x08007a9d
 8007a60:	08007af1 	.word	0x08007af1
 8007a64:	08007af1 	.word	0x08007af1
 8007a68:	08007af1 	.word	0x08007af1
 8007a6c:	08007ab9 	.word	0x08007ab9
 8007a70:	08007af1 	.word	0x08007af1
 8007a74:	08007af1 	.word	0x08007af1
 8007a78:	08007af1 	.word	0x08007af1
 8007a7c:	08007ad5 	.word	0x08007ad5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007a8e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fc ff9c 	bl	80049d2 <HAL_DMA_Abort_IT>
      break;
 8007a9a:	e02a      	b.n	8007af2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aaa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fc ff8e 	bl	80049d2 <HAL_DMA_Abort_IT>
      break;
 8007ab6:	e01c      	b.n	8007af2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68da      	ldr	r2, [r3, #12]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ac6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fc ff80 	bl	80049d2 <HAL_DMA_Abort_IT>
      break;
 8007ad2:	e00e      	b.n	8007af2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ae2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fc ff72 	bl	80049d2 <HAL_DMA_Abort_IT>
      break;
 8007aee:	e000      	b.n	8007af2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8007af0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2200      	movs	r2, #0
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f001 f8a2 	bl	8008c44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a40      	ldr	r2, [pc, #256]	; (8007c08 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d018      	beq.n	8007b3c <HAL_TIM_PWM_Stop_DMA+0x108>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a3f      	ldr	r2, [pc, #252]	; (8007c0c <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d013      	beq.n	8007b3c <HAL_TIM_PWM_Stop_DMA+0x108>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a3d      	ldr	r2, [pc, #244]	; (8007c10 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00e      	beq.n	8007b3c <HAL_TIM_PWM_Stop_DMA+0x108>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a3c      	ldr	r2, [pc, #240]	; (8007c14 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d009      	beq.n	8007b3c <HAL_TIM_PWM_Stop_DMA+0x108>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a3a      	ldr	r2, [pc, #232]	; (8007c18 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d004      	beq.n	8007b3c <HAL_TIM_PWM_Stop_DMA+0x108>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a39      	ldr	r2, [pc, #228]	; (8007c1c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d101      	bne.n	8007b40 <HAL_TIM_PWM_Stop_DMA+0x10c>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e000      	b.n	8007b42 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007b40:	2300      	movs	r3, #0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d017      	beq.n	8007b76 <HAL_TIM_PWM_Stop_DMA+0x142>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b50:	4013      	ands	r3, r2
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10f      	bne.n	8007b76 <HAL_TIM_PWM_Stop_DMA+0x142>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6a1a      	ldr	r2, [r3, #32]
 8007b5c:	f244 4344 	movw	r3, #17476	; 0x4444
 8007b60:	4013      	ands	r3, r2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d107      	bne.n	8007b76 <HAL_TIM_PWM_Stop_DMA+0x142>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6a1a      	ldr	r2, [r3, #32]
 8007b7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b80:	4013      	ands	r3, r2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10f      	bne.n	8007ba6 <HAL_TIM_PWM_Stop_DMA+0x172>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6a1a      	ldr	r2, [r3, #32]
 8007b8c:	f244 4344 	movw	r3, #17476	; 0x4444
 8007b90:	4013      	ands	r3, r2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d107      	bne.n	8007ba6 <HAL_TIM_PWM_Stop_DMA+0x172>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0201 	bic.w	r2, r2, #1
 8007ba4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d104      	bne.n	8007bb6 <HAL_TIM_PWM_Stop_DMA+0x182>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bb4:	e023      	b.n	8007bfe <HAL_TIM_PWM_Stop_DMA+0x1ca>
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b04      	cmp	r3, #4
 8007bba:	d104      	bne.n	8007bc6 <HAL_TIM_PWM_Stop_DMA+0x192>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bc4:	e01b      	b.n	8007bfe <HAL_TIM_PWM_Stop_DMA+0x1ca>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d104      	bne.n	8007bd6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bd4:	e013      	b.n	8007bfe <HAL_TIM_PWM_Stop_DMA+0x1ca>
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	2b0c      	cmp	r3, #12
 8007bda:	d104      	bne.n	8007be6 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007be4:	e00b      	b.n	8007bfe <HAL_TIM_PWM_Stop_DMA+0x1ca>
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b10      	cmp	r3, #16
 8007bea:	d104      	bne.n	8007bf6 <HAL_TIM_PWM_Stop_DMA+0x1c2>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bf4:	e003      	b.n	8007bfe <HAL_TIM_PWM_Stop_DMA+0x1ca>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	40012c00 	.word	0x40012c00
 8007c0c:	40013400 	.word	0x40013400
 8007c10:	40014000 	.word	0x40014000
 8007c14:	40014400 	.word	0x40014400
 8007c18:	40014800 	.word	0x40014800
 8007c1c:	40015000 	.word	0x40015000

08007c20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e097      	b.n	8007d64 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d106      	bne.n	8007c4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7fb fbeb 	bl	8003424 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2202      	movs	r2, #2
 8007c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	6812      	ldr	r2, [r2, #0]
 8007c60:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007c64:	f023 0307 	bic.w	r3, r3, #7
 8007c68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3304      	adds	r3, #4
 8007c72:	4619      	mov	r1, r3
 8007c74:	4610      	mov	r0, r2
 8007c76:	f000 fb77 	bl	8008368 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ca2:	f023 0303 	bic.w	r3, r3, #3
 8007ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007cc0:	f023 030c 	bic.w	r3, r3, #12
 8007cc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ccc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	011a      	lsls	r2, r3, #4
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	031b      	lsls	r3, r3, #12
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007cfe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007d06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	011b      	lsls	r3, r3, #4
 8007d12:	4313      	orrs	r3, r2
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007d82:	2302      	movs	r3, #2
 8007d84:	e0fd      	b.n	8007f82 <HAL_TIM_PWM_ConfigChannel+0x216>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b14      	cmp	r3, #20
 8007d92:	f200 80f0 	bhi.w	8007f76 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007d96:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007df1 	.word	0x08007df1
 8007da0:	08007f77 	.word	0x08007f77
 8007da4:	08007f77 	.word	0x08007f77
 8007da8:	08007f77 	.word	0x08007f77
 8007dac:	08007e31 	.word	0x08007e31
 8007db0:	08007f77 	.word	0x08007f77
 8007db4:	08007f77 	.word	0x08007f77
 8007db8:	08007f77 	.word	0x08007f77
 8007dbc:	08007e73 	.word	0x08007e73
 8007dc0:	08007f77 	.word	0x08007f77
 8007dc4:	08007f77 	.word	0x08007f77
 8007dc8:	08007f77 	.word	0x08007f77
 8007dcc:	08007eb3 	.word	0x08007eb3
 8007dd0:	08007f77 	.word	0x08007f77
 8007dd4:	08007f77 	.word	0x08007f77
 8007dd8:	08007f77 	.word	0x08007f77
 8007ddc:	08007ef5 	.word	0x08007ef5
 8007de0:	08007f77 	.word	0x08007f77
 8007de4:	08007f77 	.word	0x08007f77
 8007de8:	08007f77 	.word	0x08007f77
 8007dec:	08007f35 	.word	0x08007f35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fb5e 	bl	80084b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699a      	ldr	r2, [r3, #24]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f042 0208 	orr.w	r2, r2, #8
 8007e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	699a      	ldr	r2, [r3, #24]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 0204 	bic.w	r2, r2, #4
 8007e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6999      	ldr	r1, [r3, #24]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	691a      	ldr	r2, [r3, #16]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	619a      	str	r2, [r3, #24]
      break;
 8007e2e:	e0a3      	b.n	8007f78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68b9      	ldr	r1, [r7, #8]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 fbd8 	bl	80085ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	699a      	ldr	r2, [r3, #24]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	699a      	ldr	r2, [r3, #24]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6999      	ldr	r1, [r3, #24]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	021a      	lsls	r2, r3, #8
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	619a      	str	r2, [r3, #24]
      break;
 8007e70:	e082      	b.n	8007f78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68b9      	ldr	r1, [r7, #8]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fc4b 	bl	8008714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69da      	ldr	r2, [r3, #28]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f042 0208 	orr.w	r2, r2, #8
 8007e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	69da      	ldr	r2, [r3, #28]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 0204 	bic.w	r2, r2, #4
 8007e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	69d9      	ldr	r1, [r3, #28]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	691a      	ldr	r2, [r3, #16]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	61da      	str	r2, [r3, #28]
      break;
 8007eb0:	e062      	b.n	8007f78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68b9      	ldr	r1, [r7, #8]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 fcbd 	bl	8008838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69da      	ldr	r2, [r3, #28]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	69da      	ldr	r2, [r3, #28]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	69d9      	ldr	r1, [r3, #28]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	021a      	lsls	r2, r3, #8
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	61da      	str	r2, [r3, #28]
      break;
 8007ef2:	e041      	b.n	8007f78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68b9      	ldr	r1, [r7, #8]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fd30 	bl	8008960 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0208 	orr.w	r2, r2, #8
 8007f0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0204 	bic.w	r2, r2, #4
 8007f1e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	691a      	ldr	r2, [r3, #16]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007f32:	e021      	b.n	8007f78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 fd7a 	bl	8008a34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f5e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	021a      	lsls	r2, r3, #8
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007f74:	e000      	b.n	8007f78 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007f76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop

08007f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_TIM_ConfigClockSource+0x18>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e0f5      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x204>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007fc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a6e      	ldr	r2, [pc, #440]	; (8008198 <HAL_TIM_ConfigClockSource+0x20c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	f000 80c1 	beq.w	8008166 <HAL_TIM_ConfigClockSource+0x1da>
 8007fe4:	4a6c      	ldr	r2, [pc, #432]	; (8008198 <HAL_TIM_ConfigClockSource+0x20c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	f200 80c6 	bhi.w	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 8007fec:	4a6b      	ldr	r2, [pc, #428]	; (800819c <HAL_TIM_ConfigClockSource+0x210>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	f000 80b9 	beq.w	8008166 <HAL_TIM_ConfigClockSource+0x1da>
 8007ff4:	4a69      	ldr	r2, [pc, #420]	; (800819c <HAL_TIM_ConfigClockSource+0x210>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	f200 80be 	bhi.w	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 8007ffc:	4a68      	ldr	r2, [pc, #416]	; (80081a0 <HAL_TIM_ConfigClockSource+0x214>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	f000 80b1 	beq.w	8008166 <HAL_TIM_ConfigClockSource+0x1da>
 8008004:	4a66      	ldr	r2, [pc, #408]	; (80081a0 <HAL_TIM_ConfigClockSource+0x214>)
 8008006:	4293      	cmp	r3, r2
 8008008:	f200 80b6 	bhi.w	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 800800c:	4a65      	ldr	r2, [pc, #404]	; (80081a4 <HAL_TIM_ConfigClockSource+0x218>)
 800800e:	4293      	cmp	r3, r2
 8008010:	f000 80a9 	beq.w	8008166 <HAL_TIM_ConfigClockSource+0x1da>
 8008014:	4a63      	ldr	r2, [pc, #396]	; (80081a4 <HAL_TIM_ConfigClockSource+0x218>)
 8008016:	4293      	cmp	r3, r2
 8008018:	f200 80ae 	bhi.w	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 800801c:	4a62      	ldr	r2, [pc, #392]	; (80081a8 <HAL_TIM_ConfigClockSource+0x21c>)
 800801e:	4293      	cmp	r3, r2
 8008020:	f000 80a1 	beq.w	8008166 <HAL_TIM_ConfigClockSource+0x1da>
 8008024:	4a60      	ldr	r2, [pc, #384]	; (80081a8 <HAL_TIM_ConfigClockSource+0x21c>)
 8008026:	4293      	cmp	r3, r2
 8008028:	f200 80a6 	bhi.w	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 800802c:	4a5f      	ldr	r2, [pc, #380]	; (80081ac <HAL_TIM_ConfigClockSource+0x220>)
 800802e:	4293      	cmp	r3, r2
 8008030:	f000 8099 	beq.w	8008166 <HAL_TIM_ConfigClockSource+0x1da>
 8008034:	4a5d      	ldr	r2, [pc, #372]	; (80081ac <HAL_TIM_ConfigClockSource+0x220>)
 8008036:	4293      	cmp	r3, r2
 8008038:	f200 809e 	bhi.w	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 800803c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008040:	f000 8091 	beq.w	8008166 <HAL_TIM_ConfigClockSource+0x1da>
 8008044:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008048:	f200 8096 	bhi.w	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 800804c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008050:	f000 8089 	beq.w	8008166 <HAL_TIM_ConfigClockSource+0x1da>
 8008054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008058:	f200 808e 	bhi.w	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 800805c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008060:	d03e      	beq.n	80080e0 <HAL_TIM_ConfigClockSource+0x154>
 8008062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008066:	f200 8087 	bhi.w	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 800806a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800806e:	f000 8085 	beq.w	800817c <HAL_TIM_ConfigClockSource+0x1f0>
 8008072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008076:	d87f      	bhi.n	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 8008078:	2b70      	cmp	r3, #112	; 0x70
 800807a:	d01a      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x126>
 800807c:	2b70      	cmp	r3, #112	; 0x70
 800807e:	d87b      	bhi.n	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 8008080:	2b60      	cmp	r3, #96	; 0x60
 8008082:	d050      	beq.n	8008126 <HAL_TIM_ConfigClockSource+0x19a>
 8008084:	2b60      	cmp	r3, #96	; 0x60
 8008086:	d877      	bhi.n	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 8008088:	2b50      	cmp	r3, #80	; 0x50
 800808a:	d03c      	beq.n	8008106 <HAL_TIM_ConfigClockSource+0x17a>
 800808c:	2b50      	cmp	r3, #80	; 0x50
 800808e:	d873      	bhi.n	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 8008090:	2b40      	cmp	r3, #64	; 0x40
 8008092:	d058      	beq.n	8008146 <HAL_TIM_ConfigClockSource+0x1ba>
 8008094:	2b40      	cmp	r3, #64	; 0x40
 8008096:	d86f      	bhi.n	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 8008098:	2b30      	cmp	r3, #48	; 0x30
 800809a:	d064      	beq.n	8008166 <HAL_TIM_ConfigClockSource+0x1da>
 800809c:	2b30      	cmp	r3, #48	; 0x30
 800809e:	d86b      	bhi.n	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 80080a0:	2b20      	cmp	r3, #32
 80080a2:	d060      	beq.n	8008166 <HAL_TIM_ConfigClockSource+0x1da>
 80080a4:	2b20      	cmp	r3, #32
 80080a6:	d867      	bhi.n	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d05c      	beq.n	8008166 <HAL_TIM_ConfigClockSource+0x1da>
 80080ac:	2b10      	cmp	r3, #16
 80080ae:	d05a      	beq.n	8008166 <HAL_TIM_ConfigClockSource+0x1da>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80080b0:	e062      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6818      	ldr	r0, [r3, #0]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	6899      	ldr	r1, [r3, #8]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	f000 fd9f 	bl	8008c04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	609a      	str	r2, [r3, #8]
      break;
 80080de:	e04e      	b.n	800817e <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6818      	ldr	r0, [r3, #0]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	6899      	ldr	r1, [r3, #8]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f000 fd88 	bl	8008c04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008102:	609a      	str	r2, [r3, #8]
      break;
 8008104:	e03b      	b.n	800817e <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6818      	ldr	r0, [r3, #0]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	6859      	ldr	r1, [r3, #4]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	461a      	mov	r2, r3
 8008114:	f000 fcfa 	bl	8008b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2150      	movs	r1, #80	; 0x50
 800811e:	4618      	mov	r0, r3
 8008120:	f000 fd53 	bl	8008bca <TIM_ITRx_SetConfig>
      break;
 8008124:	e02b      	b.n	800817e <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6818      	ldr	r0, [r3, #0]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	6859      	ldr	r1, [r3, #4]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	461a      	mov	r2, r3
 8008134:	f000 fd19 	bl	8008b6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2160      	movs	r1, #96	; 0x60
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fd43 	bl	8008bca <TIM_ITRx_SetConfig>
      break;
 8008144:	e01b      	b.n	800817e <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6818      	ldr	r0, [r3, #0]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	6859      	ldr	r1, [r3, #4]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	461a      	mov	r2, r3
 8008154:	f000 fcda 	bl	8008b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2140      	movs	r1, #64	; 0x40
 800815e:	4618      	mov	r0, r3
 8008160:	f000 fd33 	bl	8008bca <TIM_ITRx_SetConfig>
      break;
 8008164:	e00b      	b.n	800817e <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4619      	mov	r1, r3
 8008170:	4610      	mov	r0, r2
 8008172:	f000 fd2a 	bl	8008bca <TIM_ITRx_SetConfig>
      break;
 8008176:	e002      	b.n	800817e <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8008178:	bf00      	nop
 800817a:	e000      	b.n	800817e <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 800817c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	00100070 	.word	0x00100070
 800819c:	00100060 	.word	0x00100060
 80081a0:	00100050 	.word	0x00100050
 80081a4:	00100040 	.word	0x00100040
 80081a8:	00100030 	.word	0x00100030
 80081ac:	00100020 	.word	0x00100020

080081b0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d107      	bne.n	80081ec <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2201      	movs	r2, #1
 80081e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081ea:	e02a      	b.n	8008242 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d107      	bne.n	8008206 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2202      	movs	r2, #2
 80081fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008204:	e01d      	b.n	8008242 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d107      	bne.n	8008220 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2204      	movs	r2, #4
 8008214:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800821e:	e010      	b.n	8008242 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d107      	bne.n	800823a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2208      	movs	r2, #8
 800822e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008238:	e003      	b.n	8008242 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f7ff ffb4 	bl	80081b0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	771a      	strb	r2, [r3, #28]
}
 800824e:	bf00      	nop
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008262:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	429a      	cmp	r2, r3
 800826c:	d10b      	bne.n	8008286 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d136      	bne.n	80082ea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008284:	e031      	b.n	80082ea <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d10b      	bne.n	80082a8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2202      	movs	r2, #2
 8008294:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d125      	bne.n	80082ea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082a6:	e020      	b.n	80082ea <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d10b      	bne.n	80082ca <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2204      	movs	r2, #4
 80082b6:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	69db      	ldr	r3, [r3, #28]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d114      	bne.n	80082ea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082c8:	e00f      	b.n	80082ea <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d10a      	bne.n	80082ea <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2208      	movs	r2, #8
 80082d8:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d103      	bne.n	80082ea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f7fb ff10 	bl	8004110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	771a      	strb	r2, [r3, #28]
}
 80082f6:	bf00      	nop
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	429a      	cmp	r2, r3
 8008314:	d103      	bne.n	800831e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	771a      	strb	r2, [r3, #28]
 800831c:	e019      	b.n	8008352 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	429a      	cmp	r2, r3
 8008326:	d103      	bne.n	8008330 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2202      	movs	r2, #2
 800832c:	771a      	strb	r2, [r3, #28]
 800832e:	e010      	b.n	8008352 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	429a      	cmp	r2, r3
 8008338:	d103      	bne.n	8008342 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2204      	movs	r2, #4
 800833e:	771a      	strb	r2, [r3, #28]
 8008340:	e007      	b.n	8008352 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	429a      	cmp	r2, r3
 800834a:	d102      	bne.n	8008352 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2208      	movs	r2, #8
 8008350:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7fb fe40 	bl	8003fd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	771a      	strb	r2, [r3, #28]
}
 800835e:	bf00      	nop
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a46      	ldr	r2, [pc, #280]	; (8008494 <TIM_Base_SetConfig+0x12c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d017      	beq.n	80083b0 <TIM_Base_SetConfig+0x48>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008386:	d013      	beq.n	80083b0 <TIM_Base_SetConfig+0x48>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a43      	ldr	r2, [pc, #268]	; (8008498 <TIM_Base_SetConfig+0x130>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d00f      	beq.n	80083b0 <TIM_Base_SetConfig+0x48>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a42      	ldr	r2, [pc, #264]	; (800849c <TIM_Base_SetConfig+0x134>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00b      	beq.n	80083b0 <TIM_Base_SetConfig+0x48>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a41      	ldr	r2, [pc, #260]	; (80084a0 <TIM_Base_SetConfig+0x138>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d007      	beq.n	80083b0 <TIM_Base_SetConfig+0x48>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a40      	ldr	r2, [pc, #256]	; (80084a4 <TIM_Base_SetConfig+0x13c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d003      	beq.n	80083b0 <TIM_Base_SetConfig+0x48>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a3f      	ldr	r2, [pc, #252]	; (80084a8 <TIM_Base_SetConfig+0x140>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d108      	bne.n	80083c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4313      	orrs	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a33      	ldr	r2, [pc, #204]	; (8008494 <TIM_Base_SetConfig+0x12c>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d023      	beq.n	8008412 <TIM_Base_SetConfig+0xaa>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d0:	d01f      	beq.n	8008412 <TIM_Base_SetConfig+0xaa>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a30      	ldr	r2, [pc, #192]	; (8008498 <TIM_Base_SetConfig+0x130>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d01b      	beq.n	8008412 <TIM_Base_SetConfig+0xaa>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a2f      	ldr	r2, [pc, #188]	; (800849c <TIM_Base_SetConfig+0x134>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d017      	beq.n	8008412 <TIM_Base_SetConfig+0xaa>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a2e      	ldr	r2, [pc, #184]	; (80084a0 <TIM_Base_SetConfig+0x138>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d013      	beq.n	8008412 <TIM_Base_SetConfig+0xaa>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a2d      	ldr	r2, [pc, #180]	; (80084a4 <TIM_Base_SetConfig+0x13c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00f      	beq.n	8008412 <TIM_Base_SetConfig+0xaa>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a2d      	ldr	r2, [pc, #180]	; (80084ac <TIM_Base_SetConfig+0x144>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00b      	beq.n	8008412 <TIM_Base_SetConfig+0xaa>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a2c      	ldr	r2, [pc, #176]	; (80084b0 <TIM_Base_SetConfig+0x148>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d007      	beq.n	8008412 <TIM_Base_SetConfig+0xaa>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a2b      	ldr	r2, [pc, #172]	; (80084b4 <TIM_Base_SetConfig+0x14c>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d003      	beq.n	8008412 <TIM_Base_SetConfig+0xaa>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a26      	ldr	r2, [pc, #152]	; (80084a8 <TIM_Base_SetConfig+0x140>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d108      	bne.n	8008424 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	4313      	orrs	r3, r2
 8008422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	4313      	orrs	r3, r2
 8008430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a12      	ldr	r2, [pc, #72]	; (8008494 <TIM_Base_SetConfig+0x12c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d013      	beq.n	8008478 <TIM_Base_SetConfig+0x110>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a14      	ldr	r2, [pc, #80]	; (80084a4 <TIM_Base_SetConfig+0x13c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00f      	beq.n	8008478 <TIM_Base_SetConfig+0x110>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a14      	ldr	r2, [pc, #80]	; (80084ac <TIM_Base_SetConfig+0x144>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00b      	beq.n	8008478 <TIM_Base_SetConfig+0x110>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a13      	ldr	r2, [pc, #76]	; (80084b0 <TIM_Base_SetConfig+0x148>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d007      	beq.n	8008478 <TIM_Base_SetConfig+0x110>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a12      	ldr	r2, [pc, #72]	; (80084b4 <TIM_Base_SetConfig+0x14c>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_Base_SetConfig+0x110>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a0d      	ldr	r2, [pc, #52]	; (80084a8 <TIM_Base_SetConfig+0x140>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d103      	bne.n	8008480 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	691a      	ldr	r2, [r3, #16]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	615a      	str	r2, [r3, #20]
}
 8008486:	bf00      	nop
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	40012c00 	.word	0x40012c00
 8008498:	40000400 	.word	0x40000400
 800849c:	40000800 	.word	0x40000800
 80084a0:	40000c00 	.word	0x40000c00
 80084a4:	40013400 	.word	0x40013400
 80084a8:	40015000 	.word	0x40015000
 80084ac:	40014000 	.word	0x40014000
 80084b0:	40014400 	.word	0x40014400
 80084b4:	40014800 	.word	0x40014800

080084b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	f023 0201 	bic.w	r2, r3, #1
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f023 0303 	bic.w	r3, r3, #3
 80084f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f023 0302 	bic.w	r3, r3, #2
 8008504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	4313      	orrs	r3, r2
 800850e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a30      	ldr	r2, [pc, #192]	; (80085d4 <TIM_OC1_SetConfig+0x11c>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d013      	beq.n	8008540 <TIM_OC1_SetConfig+0x88>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a2f      	ldr	r2, [pc, #188]	; (80085d8 <TIM_OC1_SetConfig+0x120>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d00f      	beq.n	8008540 <TIM_OC1_SetConfig+0x88>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a2e      	ldr	r2, [pc, #184]	; (80085dc <TIM_OC1_SetConfig+0x124>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d00b      	beq.n	8008540 <TIM_OC1_SetConfig+0x88>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a2d      	ldr	r2, [pc, #180]	; (80085e0 <TIM_OC1_SetConfig+0x128>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d007      	beq.n	8008540 <TIM_OC1_SetConfig+0x88>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a2c      	ldr	r2, [pc, #176]	; (80085e4 <TIM_OC1_SetConfig+0x12c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d003      	beq.n	8008540 <TIM_OC1_SetConfig+0x88>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a2b      	ldr	r2, [pc, #172]	; (80085e8 <TIM_OC1_SetConfig+0x130>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d10c      	bne.n	800855a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	f023 0308 	bic.w	r3, r3, #8
 8008546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	4313      	orrs	r3, r2
 8008550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f023 0304 	bic.w	r3, r3, #4
 8008558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a1d      	ldr	r2, [pc, #116]	; (80085d4 <TIM_OC1_SetConfig+0x11c>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d013      	beq.n	800858a <TIM_OC1_SetConfig+0xd2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a1c      	ldr	r2, [pc, #112]	; (80085d8 <TIM_OC1_SetConfig+0x120>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d00f      	beq.n	800858a <TIM_OC1_SetConfig+0xd2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a1b      	ldr	r2, [pc, #108]	; (80085dc <TIM_OC1_SetConfig+0x124>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00b      	beq.n	800858a <TIM_OC1_SetConfig+0xd2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a1a      	ldr	r2, [pc, #104]	; (80085e0 <TIM_OC1_SetConfig+0x128>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d007      	beq.n	800858a <TIM_OC1_SetConfig+0xd2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a19      	ldr	r2, [pc, #100]	; (80085e4 <TIM_OC1_SetConfig+0x12c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d003      	beq.n	800858a <TIM_OC1_SetConfig+0xd2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a18      	ldr	r2, [pc, #96]	; (80085e8 <TIM_OC1_SetConfig+0x130>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d111      	bne.n	80085ae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	621a      	str	r2, [r3, #32]
}
 80085c8:	bf00      	nop
 80085ca:	371c      	adds	r7, #28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	40012c00 	.word	0x40012c00
 80085d8:	40013400 	.word	0x40013400
 80085dc:	40014000 	.word	0x40014000
 80085e0:	40014400 	.word	0x40014400
 80085e4:	40014800 	.word	0x40014800
 80085e8:	40015000 	.word	0x40015000

080085ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	f023 0210 	bic.w	r2, r3, #16
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800861a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4313      	orrs	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f023 0320 	bic.w	r3, r3, #32
 800863a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	011b      	lsls	r3, r3, #4
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	4313      	orrs	r3, r2
 8008646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a2c      	ldr	r2, [pc, #176]	; (80086fc <TIM_OC2_SetConfig+0x110>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d007      	beq.n	8008660 <TIM_OC2_SetConfig+0x74>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a2b      	ldr	r2, [pc, #172]	; (8008700 <TIM_OC2_SetConfig+0x114>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d003      	beq.n	8008660 <TIM_OC2_SetConfig+0x74>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a2a      	ldr	r2, [pc, #168]	; (8008704 <TIM_OC2_SetConfig+0x118>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d10d      	bne.n	800867c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	011b      	lsls	r3, r3, #4
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	4313      	orrs	r3, r2
 8008672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800867a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a1f      	ldr	r2, [pc, #124]	; (80086fc <TIM_OC2_SetConfig+0x110>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d013      	beq.n	80086ac <TIM_OC2_SetConfig+0xc0>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a1e      	ldr	r2, [pc, #120]	; (8008700 <TIM_OC2_SetConfig+0x114>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d00f      	beq.n	80086ac <TIM_OC2_SetConfig+0xc0>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a1e      	ldr	r2, [pc, #120]	; (8008708 <TIM_OC2_SetConfig+0x11c>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d00b      	beq.n	80086ac <TIM_OC2_SetConfig+0xc0>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a1d      	ldr	r2, [pc, #116]	; (800870c <TIM_OC2_SetConfig+0x120>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d007      	beq.n	80086ac <TIM_OC2_SetConfig+0xc0>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a1c      	ldr	r2, [pc, #112]	; (8008710 <TIM_OC2_SetConfig+0x124>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d003      	beq.n	80086ac <TIM_OC2_SetConfig+0xc0>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a17      	ldr	r2, [pc, #92]	; (8008704 <TIM_OC2_SetConfig+0x118>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d113      	bne.n	80086d4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	621a      	str	r2, [r3, #32]
}
 80086ee:	bf00      	nop
 80086f0:	371c      	adds	r7, #28
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	40012c00 	.word	0x40012c00
 8008700:	40013400 	.word	0x40013400
 8008704:	40015000 	.word	0x40015000
 8008708:	40014000 	.word	0x40014000
 800870c:	40014400 	.word	0x40014400
 8008710:	40014800 	.word	0x40014800

08008714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f023 0303 	bic.w	r3, r3, #3
 800874e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	021b      	lsls	r3, r3, #8
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a2b      	ldr	r2, [pc, #172]	; (8008820 <TIM_OC3_SetConfig+0x10c>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d007      	beq.n	8008786 <TIM_OC3_SetConfig+0x72>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a2a      	ldr	r2, [pc, #168]	; (8008824 <TIM_OC3_SetConfig+0x110>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d003      	beq.n	8008786 <TIM_OC3_SetConfig+0x72>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a29      	ldr	r2, [pc, #164]	; (8008828 <TIM_OC3_SetConfig+0x114>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d10d      	bne.n	80087a2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800878c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	021b      	lsls	r3, r3, #8
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	4313      	orrs	r3, r2
 8008798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a1e      	ldr	r2, [pc, #120]	; (8008820 <TIM_OC3_SetConfig+0x10c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d013      	beq.n	80087d2 <TIM_OC3_SetConfig+0xbe>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a1d      	ldr	r2, [pc, #116]	; (8008824 <TIM_OC3_SetConfig+0x110>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d00f      	beq.n	80087d2 <TIM_OC3_SetConfig+0xbe>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a1d      	ldr	r2, [pc, #116]	; (800882c <TIM_OC3_SetConfig+0x118>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d00b      	beq.n	80087d2 <TIM_OC3_SetConfig+0xbe>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a1c      	ldr	r2, [pc, #112]	; (8008830 <TIM_OC3_SetConfig+0x11c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d007      	beq.n	80087d2 <TIM_OC3_SetConfig+0xbe>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a1b      	ldr	r2, [pc, #108]	; (8008834 <TIM_OC3_SetConfig+0x120>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d003      	beq.n	80087d2 <TIM_OC3_SetConfig+0xbe>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a16      	ldr	r2, [pc, #88]	; (8008828 <TIM_OC3_SetConfig+0x114>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d113      	bne.n	80087fa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	011b      	lsls	r3, r3, #4
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	011b      	lsls	r3, r3, #4
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	685a      	ldr	r2, [r3, #4]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	621a      	str	r2, [r3, #32]
}
 8008814:	bf00      	nop
 8008816:	371c      	adds	r7, #28
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr
 8008820:	40012c00 	.word	0x40012c00
 8008824:	40013400 	.word	0x40013400
 8008828:	40015000 	.word	0x40015000
 800882c:	40014000 	.word	0x40014000
 8008830:	40014400 	.word	0x40014400
 8008834:	40014800 	.word	0x40014800

08008838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008838:	b480      	push	{r7}
 800883a:	b087      	sub	sp, #28
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800886a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	021b      	lsls	r3, r3, #8
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	4313      	orrs	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	031b      	lsls	r3, r3, #12
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	4313      	orrs	r3, r2
 8008892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a2c      	ldr	r2, [pc, #176]	; (8008948 <TIM_OC4_SetConfig+0x110>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d007      	beq.n	80088ac <TIM_OC4_SetConfig+0x74>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a2b      	ldr	r2, [pc, #172]	; (800894c <TIM_OC4_SetConfig+0x114>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d003      	beq.n	80088ac <TIM_OC4_SetConfig+0x74>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a2a      	ldr	r2, [pc, #168]	; (8008950 <TIM_OC4_SetConfig+0x118>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d10d      	bne.n	80088c8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	031b      	lsls	r3, r3, #12
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	4313      	orrs	r3, r2
 80088be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a1f      	ldr	r2, [pc, #124]	; (8008948 <TIM_OC4_SetConfig+0x110>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d013      	beq.n	80088f8 <TIM_OC4_SetConfig+0xc0>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a1e      	ldr	r2, [pc, #120]	; (800894c <TIM_OC4_SetConfig+0x114>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d00f      	beq.n	80088f8 <TIM_OC4_SetConfig+0xc0>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a1e      	ldr	r2, [pc, #120]	; (8008954 <TIM_OC4_SetConfig+0x11c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d00b      	beq.n	80088f8 <TIM_OC4_SetConfig+0xc0>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a1d      	ldr	r2, [pc, #116]	; (8008958 <TIM_OC4_SetConfig+0x120>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d007      	beq.n	80088f8 <TIM_OC4_SetConfig+0xc0>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a1c      	ldr	r2, [pc, #112]	; (800895c <TIM_OC4_SetConfig+0x124>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d003      	beq.n	80088f8 <TIM_OC4_SetConfig+0xc0>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a17      	ldr	r2, [pc, #92]	; (8008950 <TIM_OC4_SetConfig+0x118>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d113      	bne.n	8008920 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008906:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	019b      	lsls	r3, r3, #6
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	4313      	orrs	r3, r2
 8008912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	019b      	lsls	r3, r3, #6
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	4313      	orrs	r3, r2
 800891e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	621a      	str	r2, [r3, #32]
}
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	40012c00 	.word	0x40012c00
 800894c:	40013400 	.word	0x40013400
 8008950:	40015000 	.word	0x40015000
 8008954:	40014000 	.word	0x40014000
 8008958:	40014400 	.word	0x40014400
 800895c:	40014800 	.word	0x40014800

08008960 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008960:	b480      	push	{r7}
 8008962:	b087      	sub	sp, #28
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800898e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	4313      	orrs	r3, r2
 800899c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80089a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	041b      	lsls	r3, r3, #16
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a19      	ldr	r2, [pc, #100]	; (8008a1c <TIM_OC5_SetConfig+0xbc>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d013      	beq.n	80089e2 <TIM_OC5_SetConfig+0x82>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a18      	ldr	r2, [pc, #96]	; (8008a20 <TIM_OC5_SetConfig+0xc0>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d00f      	beq.n	80089e2 <TIM_OC5_SetConfig+0x82>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a17      	ldr	r2, [pc, #92]	; (8008a24 <TIM_OC5_SetConfig+0xc4>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d00b      	beq.n	80089e2 <TIM_OC5_SetConfig+0x82>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a16      	ldr	r2, [pc, #88]	; (8008a28 <TIM_OC5_SetConfig+0xc8>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d007      	beq.n	80089e2 <TIM_OC5_SetConfig+0x82>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a15      	ldr	r2, [pc, #84]	; (8008a2c <TIM_OC5_SetConfig+0xcc>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d003      	beq.n	80089e2 <TIM_OC5_SetConfig+0x82>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a14      	ldr	r2, [pc, #80]	; (8008a30 <TIM_OC5_SetConfig+0xd0>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d109      	bne.n	80089f6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	021b      	lsls	r3, r3, #8
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	685a      	ldr	r2, [r3, #4]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	621a      	str	r2, [r3, #32]
}
 8008a10:	bf00      	nop
 8008a12:	371c      	adds	r7, #28
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	40012c00 	.word	0x40012c00
 8008a20:	40013400 	.word	0x40013400
 8008a24:	40014000 	.word	0x40014000
 8008a28:	40014400 	.word	0x40014400
 8008a2c:	40014800 	.word	0x40014800
 8008a30:	40015000 	.word	0x40015000

08008a34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	021b      	lsls	r3, r3, #8
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	051b      	lsls	r3, r3, #20
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a1a      	ldr	r2, [pc, #104]	; (8008af4 <TIM_OC6_SetConfig+0xc0>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d013      	beq.n	8008ab8 <TIM_OC6_SetConfig+0x84>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a19      	ldr	r2, [pc, #100]	; (8008af8 <TIM_OC6_SetConfig+0xc4>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d00f      	beq.n	8008ab8 <TIM_OC6_SetConfig+0x84>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a18      	ldr	r2, [pc, #96]	; (8008afc <TIM_OC6_SetConfig+0xc8>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d00b      	beq.n	8008ab8 <TIM_OC6_SetConfig+0x84>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a17      	ldr	r2, [pc, #92]	; (8008b00 <TIM_OC6_SetConfig+0xcc>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d007      	beq.n	8008ab8 <TIM_OC6_SetConfig+0x84>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a16      	ldr	r2, [pc, #88]	; (8008b04 <TIM_OC6_SetConfig+0xd0>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d003      	beq.n	8008ab8 <TIM_OC6_SetConfig+0x84>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a15      	ldr	r2, [pc, #84]	; (8008b08 <TIM_OC6_SetConfig+0xd4>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d109      	bne.n	8008acc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008abe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	029b      	lsls	r3, r3, #10
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	621a      	str	r2, [r3, #32]
}
 8008ae6:	bf00      	nop
 8008ae8:	371c      	adds	r7, #28
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	40012c00 	.word	0x40012c00
 8008af8:	40013400 	.word	0x40013400
 8008afc:	40014000 	.word	0x40014000
 8008b00:	40014400 	.word	0x40014400
 8008b04:	40014800 	.word	0x40014800
 8008b08:	40015000 	.word	0x40015000

08008b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f023 0201 	bic.w	r2, r3, #1
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f023 030a 	bic.w	r3, r3, #10
 8008b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	621a      	str	r2, [r3, #32]
}
 8008b5e:	bf00      	nop
 8008b60:	371c      	adds	r7, #28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b087      	sub	sp, #28
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	f023 0210 	bic.w	r2, r3, #16
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6a1b      	ldr	r3, [r3, #32]
 8008b8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	031b      	lsls	r3, r3, #12
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ba6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	011b      	lsls	r3, r3, #4
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	697a      	ldr	r2, [r7, #20]
 8008bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	621a      	str	r2, [r3, #32]
}
 8008bbe:	bf00      	nop
 8008bc0:	371c      	adds	r7, #28
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b085      	sub	sp, #20
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	f043 0307 	orr.w	r3, r3, #7
 8008bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	609a      	str	r2, [r3, #8]
}
 8008bf8:	bf00      	nop
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	021a      	lsls	r2, r3, #8
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	431a      	orrs	r2, r3
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	609a      	str	r2, [r3, #8]
}
 8008c38:	bf00      	nop
 8008c3a:	371c      	adds	r7, #28
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b087      	sub	sp, #28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	f003 031f 	and.w	r3, r3, #31
 8008c56:	2201      	movs	r2, #1
 8008c58:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6a1a      	ldr	r2, [r3, #32]
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	43db      	mvns	r3, r3
 8008c66:	401a      	ands	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6a1a      	ldr	r2, [r3, #32]
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f003 031f 	and.w	r3, r3, #31
 8008c76:	6879      	ldr	r1, [r7, #4]
 8008c78:	fa01 f303 	lsl.w	r3, r1, r3
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	621a      	str	r2, [r3, #32]
}
 8008c82:	bf00      	nop
 8008c84:	371c      	adds	r7, #28
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
	...

08008c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d101      	bne.n	8008ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	e074      	b.n	8008d92 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a34      	ldr	r2, [pc, #208]	; (8008da0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d009      	beq.n	8008ce6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a33      	ldr	r2, [pc, #204]	; (8008da4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d004      	beq.n	8008ce6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a31      	ldr	r2, [pc, #196]	; (8008da8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d108      	bne.n	8008cf8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008cec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a21      	ldr	r2, [pc, #132]	; (8008da0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d022      	beq.n	8008d66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d28:	d01d      	beq.n	8008d66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a1f      	ldr	r2, [pc, #124]	; (8008dac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d018      	beq.n	8008d66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a1d      	ldr	r2, [pc, #116]	; (8008db0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d013      	beq.n	8008d66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a1c      	ldr	r2, [pc, #112]	; (8008db4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d00e      	beq.n	8008d66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a15      	ldr	r2, [pc, #84]	; (8008da4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d009      	beq.n	8008d66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a18      	ldr	r2, [pc, #96]	; (8008db8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d004      	beq.n	8008d66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a11      	ldr	r2, [pc, #68]	; (8008da8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d10c      	bne.n	8008d80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	40012c00 	.word	0x40012c00
 8008da4:	40013400 	.word	0x40013400
 8008da8:	40015000 	.word	0x40015000
 8008dac:	40000400 	.word	0x40000400
 8008db0:	40000800 	.word	0x40000800
 8008db4:	40000c00 	.word	0x40000c00
 8008db8:	40014000 	.word	0x40014000

08008dbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d101      	bne.n	8008dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	e096      	b.n	8008f06 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	041b      	lsls	r3, r3, #16
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a2f      	ldr	r2, [pc, #188]	; (8008f14 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d009      	beq.n	8008e70 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a2d      	ldr	r2, [pc, #180]	; (8008f18 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d004      	beq.n	8008e70 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a2c      	ldr	r2, [pc, #176]	; (8008f1c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d106      	bne.n	8008e7e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a24      	ldr	r2, [pc, #144]	; (8008f14 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d009      	beq.n	8008e9c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a22      	ldr	r2, [pc, #136]	; (8008f18 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d004      	beq.n	8008e9c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a21      	ldr	r2, [pc, #132]	; (8008f1c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d12b      	bne.n	8008ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea6:	051b      	lsls	r3, r3, #20
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a11      	ldr	r2, [pc, #68]	; (8008f14 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d009      	beq.n	8008ee6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a10      	ldr	r2, [pc, #64]	; (8008f18 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d004      	beq.n	8008ee6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a0e      	ldr	r2, [pc, #56]	; (8008f1c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d106      	bne.n	8008ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	40012c00 	.word	0x40012c00
 8008f18:	40013400 	.word	0x40013400
 8008f1c:	40015000 	.word	0x40015000

08008f20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e042      	b.n	8008fb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d106      	bne.n	8008f4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7fa fdbb 	bl	8003ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2224      	movs	r2, #36	; 0x24
 8008f4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 0201 	bic.w	r2, r2, #1
 8008f60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fb4c 	bl	8009600 <UART_SetConfig>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d101      	bne.n	8008f72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e022      	b.n	8008fb8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d002      	beq.n	8008f80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f001 fcfc 	bl	800a978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	689a      	ldr	r2, [r3, #8]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f042 0201 	orr.w	r2, r2, #1
 8008fae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 fd83 	bl	800aabc <UART_CheckIdleState>
 8008fb6:	4603      	mov	r3, r0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08a      	sub	sp, #40	; 0x28
 8008fc4:	af02      	add	r7, sp, #8
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	603b      	str	r3, [r7, #0]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fd6:	2b20      	cmp	r3, #32
 8008fd8:	f040 8083 	bne.w	80090e2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <HAL_UART_Transmit+0x28>
 8008fe2:	88fb      	ldrh	r3, [r7, #6]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e07b      	b.n	80090e4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d101      	bne.n	8008ffa <HAL_UART_Transmit+0x3a>
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e074      	b.n	80090e4 <HAL_UART_Transmit+0x124>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2221      	movs	r2, #33	; 0x21
 800900e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009012:	f7fb fa7d 	bl	8004510 <HAL_GetTick>
 8009016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	88fa      	ldrh	r2, [r7, #6]
 800901c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	88fa      	ldrh	r2, [r7, #6]
 8009024:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009030:	d108      	bne.n	8009044 <HAL_UART_Transmit+0x84>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d104      	bne.n	8009044 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800903a:	2300      	movs	r3, #0
 800903c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	61bb      	str	r3, [r7, #24]
 8009042:	e003      	b.n	800904c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009048:	2300      	movs	r3, #0
 800904a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800904c:	e02c      	b.n	80090a8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2200      	movs	r2, #0
 8009056:	2180      	movs	r1, #128	; 0x80
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f001 fd77 	bl	800ab4c <UART_WaitOnFlagUntilTimeout>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e03d      	b.n	80090e4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10b      	bne.n	8009086 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800907c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	3302      	adds	r3, #2
 8009082:	61bb      	str	r3, [r7, #24]
 8009084:	e007      	b.n	8009096 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	781a      	ldrb	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	3301      	adds	r3, #1
 8009094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800909c:	b29b      	uxth	r3, r3
 800909e:	3b01      	subs	r3, #1
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1cc      	bne.n	800904e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2200      	movs	r2, #0
 80090bc:	2140      	movs	r1, #64	; 0x40
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f001 fd44 	bl	800ab4c <UART_WaitOnFlagUntilTimeout>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e00a      	b.n	80090e4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2220      	movs	r2, #32
 80090d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	e000      	b.n	80090e4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80090e2:	2302      	movs	r3, #2
  }
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3720      	adds	r7, #32
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	4613      	mov	r3, r2
 80090f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009100:	2b20      	cmp	r3, #32
 8009102:	d168      	bne.n	80091d6 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d002      	beq.n	8009110 <HAL_UART_Transmit_DMA+0x24>
 800910a:	88fb      	ldrh	r3, [r7, #6]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e061      	b.n	80091d8 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800911a:	2b01      	cmp	r3, #1
 800911c:	d101      	bne.n	8009122 <HAL_UART_Transmit_DMA+0x36>
 800911e:	2302      	movs	r3, #2
 8009120:	e05a      	b.n	80091d8 <HAL_UART_Transmit_DMA+0xec>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	88fa      	ldrh	r2, [r7, #6]
 8009134:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	88fa      	ldrh	r2, [r7, #6]
 800913c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2221      	movs	r2, #33	; 0x21
 800914c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009154:	2b00      	cmp	r3, #0
 8009156:	d02c      	beq.n	80091b2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800915c:	4a20      	ldr	r2, [pc, #128]	; (80091e0 <HAL_UART_Transmit_DMA+0xf4>)
 800915e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009164:	4a1f      	ldr	r2, [pc, #124]	; (80091e4 <HAL_UART_Transmit_DMA+0xf8>)
 8009166:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800916c:	4a1e      	ldr	r2, [pc, #120]	; (80091e8 <HAL_UART_Transmit_DMA+0xfc>)
 800916e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009174:	2200      	movs	r2, #0
 8009176:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009180:	4619      	mov	r1, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3328      	adds	r3, #40	; 0x28
 8009188:	461a      	mov	r2, r3
 800918a:	88fb      	ldrh	r3, [r7, #6]
 800918c:	f7fb fba6 	bl	80048dc <HAL_DMA_Start_IT>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00d      	beq.n	80091b2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2210      	movs	r2, #16
 800919a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2220      	movs	r2, #32
 80091aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e012      	b.n	80091d8 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2240      	movs	r2, #64	; 0x40
 80091b8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	689a      	ldr	r2, [r3, #8]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091d0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	e000      	b.n	80091d8 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80091d6:	2302      	movs	r3, #2
  }
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	0800ac63 	.word	0x0800ac63
 80091e4:	0800acb7 	.word	0x0800acb7
 80091e8:	0800ad59 	.word	0x0800ad59

080091ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	4613      	mov	r3, r2
 80091f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009200:	2b20      	cmp	r3, #32
 8009202:	d170      	bne.n	80092e6 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <HAL_UART_Receive_DMA+0x24>
 800920a:	88fb      	ldrh	r3, [r7, #6]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e069      	b.n	80092e8 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800921a:	2b01      	cmp	r3, #1
 800921c:	d101      	bne.n	8009222 <HAL_UART_Receive_DMA+0x36>
 800921e:	2302      	movs	r3, #2
 8009220:	e062      	b.n	80092e8 <HAL_UART_Receive_DMA+0xfc>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	88fa      	ldrh	r2, [r7, #6]
 8009234:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2222      	movs	r2, #34	; 0x22
 8009244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800924c:	2b00      	cmp	r3, #0
 800924e:	d02c      	beq.n	80092aa <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009254:	4a26      	ldr	r2, [pc, #152]	; (80092f0 <HAL_UART_Receive_DMA+0x104>)
 8009256:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800925c:	4a25      	ldr	r2, [pc, #148]	; (80092f4 <HAL_UART_Receive_DMA+0x108>)
 800925e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009264:	4a24      	ldr	r2, [pc, #144]	; (80092f8 <HAL_UART_Receive_DMA+0x10c>)
 8009266:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800926c:	2200      	movs	r2, #0
 800926e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3324      	adds	r3, #36	; 0x24
 800927a:	4619      	mov	r1, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009280:	461a      	mov	r2, r3
 8009282:	88fb      	ldrh	r3, [r7, #6]
 8009284:	f7fb fb2a 	bl	80048dc <HAL_DMA_Start_IT>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00d      	beq.n	80092aa <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2210      	movs	r2, #16
 8009292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2220      	movs	r2, #32
 80092a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e01e      	b.n	80092e8 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092c0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689a      	ldr	r2, [r3, #8]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f042 0201 	orr.w	r2, r2, #1
 80092d0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689a      	ldr	r2, [r3, #8]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092e0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	e000      	b.n	80092e8 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80092e6:	2302      	movs	r3, #2
  }
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	0800acd3 	.word	0x0800acd3
 80092f4:	0800ad3d 	.word	0x0800ad3d
 80092f8:	0800ad59 	.word	0x0800ad59

080092fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	f003 030f 	and.w	r3, r3, #15
 8009322:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d118      	bne.n	800935c <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	f003 0320 	and.w	r3, r3, #32
 8009330:	2b00      	cmp	r3, #0
 8009332:	d013      	beq.n	800935c <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d104      	bne.n	8009348 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d009      	beq.n	800935c <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 812d 	beq.w	80095ac <HAL_UART_IRQHandler+0x2b0>
      {
        huart->RxISR(huart);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	4798      	blx	r3
      }
      return;
 800935a:	e127      	b.n	80095ac <HAL_UART_IRQHandler+0x2b0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 80d1 	beq.w	8009506 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	4b95      	ldr	r3, [pc, #596]	; (80095bc <HAL_UART_IRQHandler+0x2c0>)
 8009368:	4013      	ands	r3, r2
 800936a:	2b00      	cmp	r3, #0
 800936c:	d105      	bne.n	800937a <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 80c6 	beq.w	8009506 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	d010      	beq.n	80093a6 <HAL_UART_IRQHandler+0xaa>
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00b      	beq.n	80093a6 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2201      	movs	r2, #1
 8009394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800939c:	f043 0201 	orr.w	r2, r3, #1
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	f003 0302 	and.w	r3, r3, #2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d010      	beq.n	80093d2 <HAL_UART_IRQHandler+0xd6>
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00b      	beq.n	80093d2 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2202      	movs	r2, #2
 80093c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093c8:	f043 0204 	orr.w	r2, r3, #4
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d010      	beq.n	80093fe <HAL_UART_IRQHandler+0x102>
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00b      	beq.n	80093fe <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2204      	movs	r2, #4
 80093ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093f4:	f043 0202 	orr.w	r2, r3, #2
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	f003 0308 	and.w	r3, r3, #8
 8009404:	2b00      	cmp	r3, #0
 8009406:	d015      	beq.n	8009434 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	f003 0320 	and.w	r3, r3, #32
 800940e:	2b00      	cmp	r3, #0
 8009410:	d104      	bne.n	800941c <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	4b69      	ldr	r3, [pc, #420]	; (80095bc <HAL_UART_IRQHandler+0x2c0>)
 8009416:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00b      	beq.n	8009434 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2208      	movs	r2, #8
 8009422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800942a:	f043 0208 	orr.w	r2, r3, #8
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 80b8 	beq.w	80095b0 <HAL_UART_IRQHandler+0x2b4>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	f003 0320 	and.w	r3, r3, #32
 8009446:	2b00      	cmp	r3, #0
 8009448:	d011      	beq.n	800946e <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	f003 0320 	and.w	r3, r3, #32
 8009450:	2b00      	cmp	r3, #0
 8009452:	d104      	bne.n	800945e <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800945a:	2b00      	cmp	r3, #0
 800945c:	d007      	beq.n	800946e <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009474:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009480:	2b40      	cmp	r3, #64	; 0x40
 8009482:	d004      	beq.n	800948e <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800948a:	2b00      	cmp	r3, #0
 800948c:	d031      	beq.n	80094f2 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 fbc4 	bl	800ac1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949e:	2b40      	cmp	r3, #64	; 0x40
 80094a0:	d123      	bne.n	80094ea <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689a      	ldr	r2, [r3, #8]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094b0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d013      	beq.n	80094e2 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094be:	4a40      	ldr	r2, [pc, #256]	; (80095c0 <HAL_UART_IRQHandler+0x2c4>)
 80094c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fb fa83 	bl	80049d2 <HAL_DMA_Abort_IT>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d017      	beq.n	8009502 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80094dc:	4610      	mov	r0, r2
 80094de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e0:	e00f      	b.n	8009502 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f882 	bl	80095ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e8:	e00b      	b.n	8009502 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f87e 	bl	80095ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f0:	e007      	b.n	8009502 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f87a 	bl	80095ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009500:	e056      	b.n	80095b0 <HAL_UART_IRQHandler+0x2b4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009502:	bf00      	nop
    return;
 8009504:	e054      	b.n	80095b0 <HAL_UART_IRQHandler+0x2b4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00d      	beq.n	800952c <HAL_UART_IRQHandler+0x230>
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d008      	beq.n	800952c <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009522:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 fc87 	bl	800ae38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800952a:	e044      	b.n	80095b6 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009532:	2b00      	cmp	r3, #0
 8009534:	d012      	beq.n	800955c <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800953c:	2b00      	cmp	r3, #0
 800953e:	d104      	bne.n	800954a <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d008      	beq.n	800955c <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954e:	2b00      	cmp	r3, #0
 8009550:	d030      	beq.n	80095b4 <HAL_UART_IRQHandler+0x2b8>
    {
      huart->TxISR(huart);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	4798      	blx	r3
    }
    return;
 800955a:	e02b      	b.n	80095b4 <HAL_UART_IRQHandler+0x2b8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009562:	2b00      	cmp	r3, #0
 8009564:	d008      	beq.n	8009578 <HAL_UART_IRQHandler+0x27c>
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956c:	2b00      	cmp	r3, #0
 800956e:	d003      	beq.n	8009578 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f001 fc47 	bl	800ae04 <UART_EndTransmit_IT>
    return;
 8009576:	e01e      	b.n	80095b6 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d008      	beq.n	8009594 <HAL_UART_IRQHandler+0x298>
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d003      	beq.n	8009594 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f001 fc67 	bl	800ae60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009592:	e010      	b.n	80095b6 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00b      	beq.n	80095b6 <HAL_UART_IRQHandler+0x2ba>
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	da08      	bge.n	80095b6 <HAL_UART_IRQHandler+0x2ba>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f001 fc51 	bl	800ae4c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095aa:	e004      	b.n	80095b6 <HAL_UART_IRQHandler+0x2ba>
      return;
 80095ac:	bf00      	nop
 80095ae:	e002      	b.n	80095b6 <HAL_UART_IRQHandler+0x2ba>
    return;
 80095b0:	bf00      	nop
 80095b2:	e000      	b.n	80095b6 <HAL_UART_IRQHandler+0x2ba>
    return;
 80095b4:	bf00      	nop
  }
}
 80095b6:	3720      	adds	r7, #32
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	10000001 	.word	0x10000001
 80095c0:	0800add9 	.word	0x0800add9

080095c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009604:	b08c      	sub	sp, #48	; 0x30
 8009606:	af00      	add	r7, sp, #0
 8009608:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800960a:	2300      	movs	r3, #0
 800960c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009614:	2300      	movs	r3, #0
 8009616:	61fb      	str	r3, [r7, #28]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	689a      	ldr	r2, [r3, #8]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	431a      	orrs	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	431a      	orrs	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	69db      	ldr	r3, [r3, #28]
 800962c:	4313      	orrs	r3, r2
 800962e:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009636:	4313      	orrs	r3, r2
 8009638:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	4baa      	ldr	r3, [pc, #680]	; (80098ec <UART_SetConfig+0x2ec>)
 8009642:	4013      	ands	r3, r2
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	6812      	ldr	r2, [r2, #0]
 8009648:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800964a:	430b      	orrs	r3, r1
 800964c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68da      	ldr	r2, [r3, #12]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	430a      	orrs	r2, r1
 8009662:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4aa0      	ldr	r2, [pc, #640]	; (80098f0 <UART_SetConfig+0x2f0>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d004      	beq.n	800967e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6a1b      	ldr	r3, [r3, #32]
 8009678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800967a:	4313      	orrs	r3, r2
 800967c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009688:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	6812      	ldr	r2, [r2, #0]
 8009690:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009692:	430b      	orrs	r3, r1
 8009694:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969c:	f023 010f 	bic.w	r1, r3, #15
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a90      	ldr	r2, [pc, #576]	; (80098f4 <UART_SetConfig+0x2f4>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d126      	bne.n	8009704 <UART_SetConfig+0x104>
 80096b6:	4b90      	ldr	r3, [pc, #576]	; (80098f8 <UART_SetConfig+0x2f8>)
 80096b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096bc:	f003 0303 	and.w	r3, r3, #3
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d81b      	bhi.n	80096fc <UART_SetConfig+0xfc>
 80096c4:	a201      	add	r2, pc, #4	; (adr r2, 80096cc <UART_SetConfig+0xcc>)
 80096c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ca:	bf00      	nop
 80096cc:	080096dd 	.word	0x080096dd
 80096d0:	080096ed 	.word	0x080096ed
 80096d4:	080096e5 	.word	0x080096e5
 80096d8:	080096f5 	.word	0x080096f5
 80096dc:	2301      	movs	r3, #1
 80096de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096e2:	e116      	b.n	8009912 <UART_SetConfig+0x312>
 80096e4:	2302      	movs	r3, #2
 80096e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096ea:	e112      	b.n	8009912 <UART_SetConfig+0x312>
 80096ec:	2304      	movs	r3, #4
 80096ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096f2:	e10e      	b.n	8009912 <UART_SetConfig+0x312>
 80096f4:	2308      	movs	r3, #8
 80096f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096fa:	e10a      	b.n	8009912 <UART_SetConfig+0x312>
 80096fc:	2310      	movs	r3, #16
 80096fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009702:	e106      	b.n	8009912 <UART_SetConfig+0x312>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a7c      	ldr	r2, [pc, #496]	; (80098fc <UART_SetConfig+0x2fc>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d138      	bne.n	8009780 <UART_SetConfig+0x180>
 800970e:	4b7a      	ldr	r3, [pc, #488]	; (80098f8 <UART_SetConfig+0x2f8>)
 8009710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009714:	f003 030c 	and.w	r3, r3, #12
 8009718:	2b0c      	cmp	r3, #12
 800971a:	d82d      	bhi.n	8009778 <UART_SetConfig+0x178>
 800971c:	a201      	add	r2, pc, #4	; (adr r2, 8009724 <UART_SetConfig+0x124>)
 800971e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009722:	bf00      	nop
 8009724:	08009759 	.word	0x08009759
 8009728:	08009779 	.word	0x08009779
 800972c:	08009779 	.word	0x08009779
 8009730:	08009779 	.word	0x08009779
 8009734:	08009769 	.word	0x08009769
 8009738:	08009779 	.word	0x08009779
 800973c:	08009779 	.word	0x08009779
 8009740:	08009779 	.word	0x08009779
 8009744:	08009761 	.word	0x08009761
 8009748:	08009779 	.word	0x08009779
 800974c:	08009779 	.word	0x08009779
 8009750:	08009779 	.word	0x08009779
 8009754:	08009771 	.word	0x08009771
 8009758:	2300      	movs	r3, #0
 800975a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800975e:	e0d8      	b.n	8009912 <UART_SetConfig+0x312>
 8009760:	2302      	movs	r3, #2
 8009762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009766:	e0d4      	b.n	8009912 <UART_SetConfig+0x312>
 8009768:	2304      	movs	r3, #4
 800976a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800976e:	e0d0      	b.n	8009912 <UART_SetConfig+0x312>
 8009770:	2308      	movs	r3, #8
 8009772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009776:	e0cc      	b.n	8009912 <UART_SetConfig+0x312>
 8009778:	2310      	movs	r3, #16
 800977a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800977e:	e0c8      	b.n	8009912 <UART_SetConfig+0x312>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a5e      	ldr	r2, [pc, #376]	; (8009900 <UART_SetConfig+0x300>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d125      	bne.n	80097d6 <UART_SetConfig+0x1d6>
 800978a:	4b5b      	ldr	r3, [pc, #364]	; (80098f8 <UART_SetConfig+0x2f8>)
 800978c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009790:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009794:	2b30      	cmp	r3, #48	; 0x30
 8009796:	d016      	beq.n	80097c6 <UART_SetConfig+0x1c6>
 8009798:	2b30      	cmp	r3, #48	; 0x30
 800979a:	d818      	bhi.n	80097ce <UART_SetConfig+0x1ce>
 800979c:	2b20      	cmp	r3, #32
 800979e:	d00a      	beq.n	80097b6 <UART_SetConfig+0x1b6>
 80097a0:	2b20      	cmp	r3, #32
 80097a2:	d814      	bhi.n	80097ce <UART_SetConfig+0x1ce>
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <UART_SetConfig+0x1ae>
 80097a8:	2b10      	cmp	r3, #16
 80097aa:	d008      	beq.n	80097be <UART_SetConfig+0x1be>
 80097ac:	e00f      	b.n	80097ce <UART_SetConfig+0x1ce>
 80097ae:	2300      	movs	r3, #0
 80097b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097b4:	e0ad      	b.n	8009912 <UART_SetConfig+0x312>
 80097b6:	2302      	movs	r3, #2
 80097b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097bc:	e0a9      	b.n	8009912 <UART_SetConfig+0x312>
 80097be:	2304      	movs	r3, #4
 80097c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097c4:	e0a5      	b.n	8009912 <UART_SetConfig+0x312>
 80097c6:	2308      	movs	r3, #8
 80097c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097cc:	e0a1      	b.n	8009912 <UART_SetConfig+0x312>
 80097ce:	2310      	movs	r3, #16
 80097d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097d4:	e09d      	b.n	8009912 <UART_SetConfig+0x312>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a4a      	ldr	r2, [pc, #296]	; (8009904 <UART_SetConfig+0x304>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d125      	bne.n	800982c <UART_SetConfig+0x22c>
 80097e0:	4b45      	ldr	r3, [pc, #276]	; (80098f8 <UART_SetConfig+0x2f8>)
 80097e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80097ea:	2bc0      	cmp	r3, #192	; 0xc0
 80097ec:	d016      	beq.n	800981c <UART_SetConfig+0x21c>
 80097ee:	2bc0      	cmp	r3, #192	; 0xc0
 80097f0:	d818      	bhi.n	8009824 <UART_SetConfig+0x224>
 80097f2:	2b80      	cmp	r3, #128	; 0x80
 80097f4:	d00a      	beq.n	800980c <UART_SetConfig+0x20c>
 80097f6:	2b80      	cmp	r3, #128	; 0x80
 80097f8:	d814      	bhi.n	8009824 <UART_SetConfig+0x224>
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d002      	beq.n	8009804 <UART_SetConfig+0x204>
 80097fe:	2b40      	cmp	r3, #64	; 0x40
 8009800:	d008      	beq.n	8009814 <UART_SetConfig+0x214>
 8009802:	e00f      	b.n	8009824 <UART_SetConfig+0x224>
 8009804:	2300      	movs	r3, #0
 8009806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800980a:	e082      	b.n	8009912 <UART_SetConfig+0x312>
 800980c:	2302      	movs	r3, #2
 800980e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009812:	e07e      	b.n	8009912 <UART_SetConfig+0x312>
 8009814:	2304      	movs	r3, #4
 8009816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800981a:	e07a      	b.n	8009912 <UART_SetConfig+0x312>
 800981c:	2308      	movs	r3, #8
 800981e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009822:	e076      	b.n	8009912 <UART_SetConfig+0x312>
 8009824:	2310      	movs	r3, #16
 8009826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800982a:	e072      	b.n	8009912 <UART_SetConfig+0x312>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a35      	ldr	r2, [pc, #212]	; (8009908 <UART_SetConfig+0x308>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d12a      	bne.n	800988c <UART_SetConfig+0x28c>
 8009836:	4b30      	ldr	r3, [pc, #192]	; (80098f8 <UART_SetConfig+0x2f8>)
 8009838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800983c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009844:	d01a      	beq.n	800987c <UART_SetConfig+0x27c>
 8009846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800984a:	d81b      	bhi.n	8009884 <UART_SetConfig+0x284>
 800984c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009850:	d00c      	beq.n	800986c <UART_SetConfig+0x26c>
 8009852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009856:	d815      	bhi.n	8009884 <UART_SetConfig+0x284>
 8009858:	2b00      	cmp	r3, #0
 800985a:	d003      	beq.n	8009864 <UART_SetConfig+0x264>
 800985c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009860:	d008      	beq.n	8009874 <UART_SetConfig+0x274>
 8009862:	e00f      	b.n	8009884 <UART_SetConfig+0x284>
 8009864:	2300      	movs	r3, #0
 8009866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800986a:	e052      	b.n	8009912 <UART_SetConfig+0x312>
 800986c:	2302      	movs	r3, #2
 800986e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009872:	e04e      	b.n	8009912 <UART_SetConfig+0x312>
 8009874:	2304      	movs	r3, #4
 8009876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800987a:	e04a      	b.n	8009912 <UART_SetConfig+0x312>
 800987c:	2308      	movs	r3, #8
 800987e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009882:	e046      	b.n	8009912 <UART_SetConfig+0x312>
 8009884:	2310      	movs	r3, #16
 8009886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800988a:	e042      	b.n	8009912 <UART_SetConfig+0x312>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a17      	ldr	r2, [pc, #92]	; (80098f0 <UART_SetConfig+0x2f0>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d13a      	bne.n	800990c <UART_SetConfig+0x30c>
 8009896:	4b18      	ldr	r3, [pc, #96]	; (80098f8 <UART_SetConfig+0x2f8>)
 8009898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800989c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80098a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098a4:	d01a      	beq.n	80098dc <UART_SetConfig+0x2dc>
 80098a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098aa:	d81b      	bhi.n	80098e4 <UART_SetConfig+0x2e4>
 80098ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098b0:	d00c      	beq.n	80098cc <UART_SetConfig+0x2cc>
 80098b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098b6:	d815      	bhi.n	80098e4 <UART_SetConfig+0x2e4>
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d003      	beq.n	80098c4 <UART_SetConfig+0x2c4>
 80098bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098c0:	d008      	beq.n	80098d4 <UART_SetConfig+0x2d4>
 80098c2:	e00f      	b.n	80098e4 <UART_SetConfig+0x2e4>
 80098c4:	2300      	movs	r3, #0
 80098c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098ca:	e022      	b.n	8009912 <UART_SetConfig+0x312>
 80098cc:	2302      	movs	r3, #2
 80098ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098d2:	e01e      	b.n	8009912 <UART_SetConfig+0x312>
 80098d4:	2304      	movs	r3, #4
 80098d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098da:	e01a      	b.n	8009912 <UART_SetConfig+0x312>
 80098dc:	2308      	movs	r3, #8
 80098de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098e2:	e016      	b.n	8009912 <UART_SetConfig+0x312>
 80098e4:	2310      	movs	r3, #16
 80098e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098ea:	e012      	b.n	8009912 <UART_SetConfig+0x312>
 80098ec:	cfff69f3 	.word	0xcfff69f3
 80098f0:	40008000 	.word	0x40008000
 80098f4:	40013800 	.word	0x40013800
 80098f8:	40021000 	.word	0x40021000
 80098fc:	40004400 	.word	0x40004400
 8009900:	40004800 	.word	0x40004800
 8009904:	40004c00 	.word	0x40004c00
 8009908:	40005000 	.word	0x40005000
 800990c:	2310      	movs	r3, #16
 800990e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a88      	ldr	r2, [pc, #544]	; (8009b38 <UART_SetConfig+0x538>)
 8009918:	4293      	cmp	r3, r2
 800991a:	f040 841b 	bne.w	800a154 <UART_SetConfig+0xb54>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800991e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009922:	2b08      	cmp	r3, #8
 8009924:	f200 815c 	bhi.w	8009be0 <UART_SetConfig+0x5e0>
 8009928:	a201      	add	r2, pc, #4	; (adr r2, 8009930 <UART_SetConfig+0x330>)
 800992a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992e:	bf00      	nop
 8009930:	08009955 	.word	0x08009955
 8009934:	08009be1 	.word	0x08009be1
 8009938:	080099f7 	.word	0x080099f7
 800993c:	08009be1 	.word	0x08009be1
 8009940:	08009a95 	.word	0x08009a95
 8009944:	08009be1 	.word	0x08009be1
 8009948:	08009be1 	.word	0x08009be1
 800994c:	08009be1 	.word	0x08009be1
 8009950:	08009b41 	.word	0x08009b41
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009954:	f7fc ffa6 	bl	80068a4 <HAL_RCC_GetPCLK1Freq>
 8009958:	4602      	mov	r2, r0
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995e:	2b00      	cmp	r3, #0
 8009960:	d044      	beq.n	80099ec <UART_SetConfig+0x3ec>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	2b01      	cmp	r3, #1
 8009968:	d03e      	beq.n	80099e8 <UART_SetConfig+0x3e8>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	2b02      	cmp	r3, #2
 8009970:	d038      	beq.n	80099e4 <UART_SetConfig+0x3e4>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009976:	2b03      	cmp	r3, #3
 8009978:	d032      	beq.n	80099e0 <UART_SetConfig+0x3e0>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997e:	2b04      	cmp	r3, #4
 8009980:	d02c      	beq.n	80099dc <UART_SetConfig+0x3dc>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009986:	2b05      	cmp	r3, #5
 8009988:	d026      	beq.n	80099d8 <UART_SetConfig+0x3d8>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998e:	2b06      	cmp	r3, #6
 8009990:	d020      	beq.n	80099d4 <UART_SetConfig+0x3d4>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009996:	2b07      	cmp	r3, #7
 8009998:	d01a      	beq.n	80099d0 <UART_SetConfig+0x3d0>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999e:	2b08      	cmp	r3, #8
 80099a0:	d014      	beq.n	80099cc <UART_SetConfig+0x3cc>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a6:	2b09      	cmp	r3, #9
 80099a8:	d00e      	beq.n	80099c8 <UART_SetConfig+0x3c8>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ae:	2b0a      	cmp	r3, #10
 80099b0:	d008      	beq.n	80099c4 <UART_SetConfig+0x3c4>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	2b0b      	cmp	r3, #11
 80099b8:	d102      	bne.n	80099c0 <UART_SetConfig+0x3c0>
 80099ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099be:	e016      	b.n	80099ee <UART_SetConfig+0x3ee>
 80099c0:	2301      	movs	r3, #1
 80099c2:	e014      	b.n	80099ee <UART_SetConfig+0x3ee>
 80099c4:	2380      	movs	r3, #128	; 0x80
 80099c6:	e012      	b.n	80099ee <UART_SetConfig+0x3ee>
 80099c8:	2340      	movs	r3, #64	; 0x40
 80099ca:	e010      	b.n	80099ee <UART_SetConfig+0x3ee>
 80099cc:	2320      	movs	r3, #32
 80099ce:	e00e      	b.n	80099ee <UART_SetConfig+0x3ee>
 80099d0:	2310      	movs	r3, #16
 80099d2:	e00c      	b.n	80099ee <UART_SetConfig+0x3ee>
 80099d4:	230c      	movs	r3, #12
 80099d6:	e00a      	b.n	80099ee <UART_SetConfig+0x3ee>
 80099d8:	230a      	movs	r3, #10
 80099da:	e008      	b.n	80099ee <UART_SetConfig+0x3ee>
 80099dc:	2308      	movs	r3, #8
 80099de:	e006      	b.n	80099ee <UART_SetConfig+0x3ee>
 80099e0:	2306      	movs	r3, #6
 80099e2:	e004      	b.n	80099ee <UART_SetConfig+0x3ee>
 80099e4:	2304      	movs	r3, #4
 80099e6:	e002      	b.n	80099ee <UART_SetConfig+0x3ee>
 80099e8:	2302      	movs	r3, #2
 80099ea:	e000      	b.n	80099ee <UART_SetConfig+0x3ee>
 80099ec:	2301      	movs	r3, #1
 80099ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f2:	61fb      	str	r3, [r7, #28]
        break;
 80099f4:	e0f8      	b.n	8009be8 <UART_SetConfig+0x5e8>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d044      	beq.n	8009a88 <UART_SetConfig+0x488>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d03e      	beq.n	8009a84 <UART_SetConfig+0x484>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d038      	beq.n	8009a80 <UART_SetConfig+0x480>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d032      	beq.n	8009a7c <UART_SetConfig+0x47c>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1a:	2b04      	cmp	r3, #4
 8009a1c:	d02c      	beq.n	8009a78 <UART_SetConfig+0x478>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a22:	2b05      	cmp	r3, #5
 8009a24:	d026      	beq.n	8009a74 <UART_SetConfig+0x474>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	2b06      	cmp	r3, #6
 8009a2c:	d020      	beq.n	8009a70 <UART_SetConfig+0x470>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	2b07      	cmp	r3, #7
 8009a34:	d01a      	beq.n	8009a6c <UART_SetConfig+0x46c>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	2b08      	cmp	r3, #8
 8009a3c:	d014      	beq.n	8009a68 <UART_SetConfig+0x468>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	2b09      	cmp	r3, #9
 8009a44:	d00e      	beq.n	8009a64 <UART_SetConfig+0x464>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4a:	2b0a      	cmp	r3, #10
 8009a4c:	d008      	beq.n	8009a60 <UART_SetConfig+0x460>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a52:	2b0b      	cmp	r3, #11
 8009a54:	d102      	bne.n	8009a5c <UART_SetConfig+0x45c>
 8009a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a5a:	e016      	b.n	8009a8a <UART_SetConfig+0x48a>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e014      	b.n	8009a8a <UART_SetConfig+0x48a>
 8009a60:	2380      	movs	r3, #128	; 0x80
 8009a62:	e012      	b.n	8009a8a <UART_SetConfig+0x48a>
 8009a64:	2340      	movs	r3, #64	; 0x40
 8009a66:	e010      	b.n	8009a8a <UART_SetConfig+0x48a>
 8009a68:	2320      	movs	r3, #32
 8009a6a:	e00e      	b.n	8009a8a <UART_SetConfig+0x48a>
 8009a6c:	2310      	movs	r3, #16
 8009a6e:	e00c      	b.n	8009a8a <UART_SetConfig+0x48a>
 8009a70:	230c      	movs	r3, #12
 8009a72:	e00a      	b.n	8009a8a <UART_SetConfig+0x48a>
 8009a74:	230a      	movs	r3, #10
 8009a76:	e008      	b.n	8009a8a <UART_SetConfig+0x48a>
 8009a78:	2308      	movs	r3, #8
 8009a7a:	e006      	b.n	8009a8a <UART_SetConfig+0x48a>
 8009a7c:	2306      	movs	r3, #6
 8009a7e:	e004      	b.n	8009a8a <UART_SetConfig+0x48a>
 8009a80:	2304      	movs	r3, #4
 8009a82:	e002      	b.n	8009a8a <UART_SetConfig+0x48a>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e000      	b.n	8009a8a <UART_SetConfig+0x48a>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	4a2c      	ldr	r2, [pc, #176]	; (8009b3c <UART_SetConfig+0x53c>)
 8009a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a90:	61fb      	str	r3, [r7, #28]
        break;
 8009a92:	e0a9      	b.n	8009be8 <UART_SetConfig+0x5e8>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009a94:	f7fc fe98 	bl	80067c8 <HAL_RCC_GetSysClockFreq>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d044      	beq.n	8009b2c <UART_SetConfig+0x52c>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d03e      	beq.n	8009b28 <UART_SetConfig+0x528>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d038      	beq.n	8009b24 <UART_SetConfig+0x524>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d032      	beq.n	8009b20 <UART_SetConfig+0x520>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abe:	2b04      	cmp	r3, #4
 8009ac0:	d02c      	beq.n	8009b1c <UART_SetConfig+0x51c>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac6:	2b05      	cmp	r3, #5
 8009ac8:	d026      	beq.n	8009b18 <UART_SetConfig+0x518>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ace:	2b06      	cmp	r3, #6
 8009ad0:	d020      	beq.n	8009b14 <UART_SetConfig+0x514>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad6:	2b07      	cmp	r3, #7
 8009ad8:	d01a      	beq.n	8009b10 <UART_SetConfig+0x510>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ade:	2b08      	cmp	r3, #8
 8009ae0:	d014      	beq.n	8009b0c <UART_SetConfig+0x50c>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae6:	2b09      	cmp	r3, #9
 8009ae8:	d00e      	beq.n	8009b08 <UART_SetConfig+0x508>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	2b0a      	cmp	r3, #10
 8009af0:	d008      	beq.n	8009b04 <UART_SetConfig+0x504>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af6:	2b0b      	cmp	r3, #11
 8009af8:	d102      	bne.n	8009b00 <UART_SetConfig+0x500>
 8009afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009afe:	e016      	b.n	8009b2e <UART_SetConfig+0x52e>
 8009b00:	2301      	movs	r3, #1
 8009b02:	e014      	b.n	8009b2e <UART_SetConfig+0x52e>
 8009b04:	2380      	movs	r3, #128	; 0x80
 8009b06:	e012      	b.n	8009b2e <UART_SetConfig+0x52e>
 8009b08:	2340      	movs	r3, #64	; 0x40
 8009b0a:	e010      	b.n	8009b2e <UART_SetConfig+0x52e>
 8009b0c:	2320      	movs	r3, #32
 8009b0e:	e00e      	b.n	8009b2e <UART_SetConfig+0x52e>
 8009b10:	2310      	movs	r3, #16
 8009b12:	e00c      	b.n	8009b2e <UART_SetConfig+0x52e>
 8009b14:	230c      	movs	r3, #12
 8009b16:	e00a      	b.n	8009b2e <UART_SetConfig+0x52e>
 8009b18:	230a      	movs	r3, #10
 8009b1a:	e008      	b.n	8009b2e <UART_SetConfig+0x52e>
 8009b1c:	2308      	movs	r3, #8
 8009b1e:	e006      	b.n	8009b2e <UART_SetConfig+0x52e>
 8009b20:	2306      	movs	r3, #6
 8009b22:	e004      	b.n	8009b2e <UART_SetConfig+0x52e>
 8009b24:	2304      	movs	r3, #4
 8009b26:	e002      	b.n	8009b2e <UART_SetConfig+0x52e>
 8009b28:	2302      	movs	r3, #2
 8009b2a:	e000      	b.n	8009b2e <UART_SetConfig+0x52e>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b32:	61fb      	str	r3, [r7, #28]
        break;
 8009b34:	e058      	b.n	8009be8 <UART_SetConfig+0x5e8>
 8009b36:	bf00      	nop
 8009b38:	40008000 	.word	0x40008000
 8009b3c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d044      	beq.n	8009bd2 <UART_SetConfig+0x5d2>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d03e      	beq.n	8009bce <UART_SetConfig+0x5ce>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d038      	beq.n	8009bca <UART_SetConfig+0x5ca>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	2b03      	cmp	r3, #3
 8009b5e:	d032      	beq.n	8009bc6 <UART_SetConfig+0x5c6>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	2b04      	cmp	r3, #4
 8009b66:	d02c      	beq.n	8009bc2 <UART_SetConfig+0x5c2>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	2b05      	cmp	r3, #5
 8009b6e:	d026      	beq.n	8009bbe <UART_SetConfig+0x5be>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	2b06      	cmp	r3, #6
 8009b76:	d020      	beq.n	8009bba <UART_SetConfig+0x5ba>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7c:	2b07      	cmp	r3, #7
 8009b7e:	d01a      	beq.n	8009bb6 <UART_SetConfig+0x5b6>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	2b08      	cmp	r3, #8
 8009b86:	d014      	beq.n	8009bb2 <UART_SetConfig+0x5b2>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	2b09      	cmp	r3, #9
 8009b8e:	d00e      	beq.n	8009bae <UART_SetConfig+0x5ae>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	2b0a      	cmp	r3, #10
 8009b96:	d008      	beq.n	8009baa <UART_SetConfig+0x5aa>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	2b0b      	cmp	r3, #11
 8009b9e:	d102      	bne.n	8009ba6 <UART_SetConfig+0x5a6>
 8009ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ba4:	e016      	b.n	8009bd4 <UART_SetConfig+0x5d4>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e014      	b.n	8009bd4 <UART_SetConfig+0x5d4>
 8009baa:	2380      	movs	r3, #128	; 0x80
 8009bac:	e012      	b.n	8009bd4 <UART_SetConfig+0x5d4>
 8009bae:	2340      	movs	r3, #64	; 0x40
 8009bb0:	e010      	b.n	8009bd4 <UART_SetConfig+0x5d4>
 8009bb2:	2320      	movs	r3, #32
 8009bb4:	e00e      	b.n	8009bd4 <UART_SetConfig+0x5d4>
 8009bb6:	2310      	movs	r3, #16
 8009bb8:	e00c      	b.n	8009bd4 <UART_SetConfig+0x5d4>
 8009bba:	230c      	movs	r3, #12
 8009bbc:	e00a      	b.n	8009bd4 <UART_SetConfig+0x5d4>
 8009bbe:	230a      	movs	r3, #10
 8009bc0:	e008      	b.n	8009bd4 <UART_SetConfig+0x5d4>
 8009bc2:	2308      	movs	r3, #8
 8009bc4:	e006      	b.n	8009bd4 <UART_SetConfig+0x5d4>
 8009bc6:	2306      	movs	r3, #6
 8009bc8:	e004      	b.n	8009bd4 <UART_SetConfig+0x5d4>
 8009bca:	2304      	movs	r3, #4
 8009bcc:	e002      	b.n	8009bd4 <UART_SetConfig+0x5d4>
 8009bce:	2302      	movs	r3, #2
 8009bd0:	e000      	b.n	8009bd4 <UART_SetConfig+0x5d4>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bdc:	61fb      	str	r3, [r7, #28]
        break;
 8009bde:	e003      	b.n	8009be8 <UART_SetConfig+0x5e8>
      default:
        ret = HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8009be6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 86ad 	beq.w	800a94a <UART_SetConfig+0x134a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	005b      	lsls	r3, r3, #1
 8009bf8:	4413      	add	r3, r2
 8009bfa:	69fa      	ldr	r2, [r7, #28]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d305      	bcc.n	8009c0c <UART_SetConfig+0x60c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c06:	69fa      	ldr	r2, [r7, #28]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d904      	bls.n	8009c16 <UART_SetConfig+0x616>
      {
        ret = HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c12:	f000 be9a 	b.w	800a94a <UART_SetConfig+0x134a>
      }
      else
      {
        switch (clocksource)
 8009c16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c1a:	2b08      	cmp	r3, #8
 8009c1c:	f200 8282 	bhi.w	800a124 <UART_SetConfig+0xb24>
 8009c20:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <UART_SetConfig+0x628>)
 8009c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c26:	bf00      	nop
 8009c28:	08009c4d 	.word	0x08009c4d
 8009c2c:	0800a125 	.word	0x0800a125
 8009c30:	08009d87 	.word	0x08009d87
 8009c34:	0800a125 	.word	0x0800a125
 8009c38:	08009eb9 	.word	0x08009eb9
 8009c3c:	0800a125 	.word	0x0800a125
 8009c40:	0800a125 	.word	0x0800a125
 8009c44:	0800a125 	.word	0x0800a125
 8009c48:	08009ff3 	.word	0x08009ff3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8009c4c:	f7fc fe2a 	bl	80068a4 <HAL_RCC_GetPCLK1Freq>
 8009c50:	61b8      	str	r0, [r7, #24]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f04f 0100 	mov.w	r1, #0
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d067      	beq.n	8009d32 <UART_SetConfig+0x732>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d05e      	beq.n	8009d28 <UART_SetConfig+0x728>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d055      	beq.n	8009d1e <UART_SetConfig+0x71e>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d04c      	beq.n	8009d14 <UART_SetConfig+0x714>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	2b04      	cmp	r3, #4
 8009c80:	d043      	beq.n	8009d0a <UART_SetConfig+0x70a>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c86:	2b05      	cmp	r3, #5
 8009c88:	d03a      	beq.n	8009d00 <UART_SetConfig+0x700>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	2b06      	cmp	r3, #6
 8009c90:	d031      	beq.n	8009cf6 <UART_SetConfig+0x6f6>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	2b07      	cmp	r3, #7
 8009c98:	d028      	beq.n	8009cec <UART_SetConfig+0x6ec>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	2b08      	cmp	r3, #8
 8009ca0:	d01f      	beq.n	8009ce2 <UART_SetConfig+0x6e2>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	2b09      	cmp	r3, #9
 8009ca8:	d016      	beq.n	8009cd8 <UART_SetConfig+0x6d8>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	2b0a      	cmp	r3, #10
 8009cb0:	d00d      	beq.n	8009cce <UART_SetConfig+0x6ce>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb6:	2b0b      	cmp	r3, #11
 8009cb8:	d104      	bne.n	8009cc4 <UART_SetConfig+0x6c4>
 8009cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cbe:	f04f 0300 	mov.w	r3, #0
 8009cc2:	e03a      	b.n	8009d3a <UART_SetConfig+0x73a>
 8009cc4:	f04f 0201 	mov.w	r2, #1
 8009cc8:	f04f 0300 	mov.w	r3, #0
 8009ccc:	e035      	b.n	8009d3a <UART_SetConfig+0x73a>
 8009cce:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009cd2:	f04f 0300 	mov.w	r3, #0
 8009cd6:	e030      	b.n	8009d3a <UART_SetConfig+0x73a>
 8009cd8:	f04f 0240 	mov.w	r2, #64	; 0x40
 8009cdc:	f04f 0300 	mov.w	r3, #0
 8009ce0:	e02b      	b.n	8009d3a <UART_SetConfig+0x73a>
 8009ce2:	f04f 0220 	mov.w	r2, #32
 8009ce6:	f04f 0300 	mov.w	r3, #0
 8009cea:	e026      	b.n	8009d3a <UART_SetConfig+0x73a>
 8009cec:	f04f 0210 	mov.w	r2, #16
 8009cf0:	f04f 0300 	mov.w	r3, #0
 8009cf4:	e021      	b.n	8009d3a <UART_SetConfig+0x73a>
 8009cf6:	f04f 020c 	mov.w	r2, #12
 8009cfa:	f04f 0300 	mov.w	r3, #0
 8009cfe:	e01c      	b.n	8009d3a <UART_SetConfig+0x73a>
 8009d00:	f04f 020a 	mov.w	r2, #10
 8009d04:	f04f 0300 	mov.w	r3, #0
 8009d08:	e017      	b.n	8009d3a <UART_SetConfig+0x73a>
 8009d0a:	f04f 0208 	mov.w	r2, #8
 8009d0e:	f04f 0300 	mov.w	r3, #0
 8009d12:	e012      	b.n	8009d3a <UART_SetConfig+0x73a>
 8009d14:	f04f 0206 	mov.w	r2, #6
 8009d18:	f04f 0300 	mov.w	r3, #0
 8009d1c:	e00d      	b.n	8009d3a <UART_SetConfig+0x73a>
 8009d1e:	f04f 0204 	mov.w	r2, #4
 8009d22:	f04f 0300 	mov.w	r3, #0
 8009d26:	e008      	b.n	8009d3a <UART_SetConfig+0x73a>
 8009d28:	f04f 0202 	mov.w	r2, #2
 8009d2c:	f04f 0300 	mov.w	r3, #0
 8009d30:	e003      	b.n	8009d3a <UART_SetConfig+0x73a>
 8009d32:	f04f 0201 	mov.w	r2, #1
 8009d36:	f04f 0300 	mov.w	r3, #0
 8009d3a:	f7f6 ff8f 	bl	8000c5c <__aeabi_uldivmod>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	4610      	mov	r0, r2
 8009d44:	4619      	mov	r1, r3
 8009d46:	f04f 0200 	mov.w	r2, #0
 8009d4a:	f04f 0300 	mov.w	r3, #0
 8009d4e:	020b      	lsls	r3, r1, #8
 8009d50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d54:	0202      	lsls	r2, r0, #8
 8009d56:	68f9      	ldr	r1, [r7, #12]
 8009d58:	6849      	ldr	r1, [r1, #4]
 8009d5a:	0849      	lsrs	r1, r1, #1
 8009d5c:	4608      	mov	r0, r1
 8009d5e:	f04f 0100 	mov.w	r1, #0
 8009d62:	1814      	adds	r4, r2, r0
 8009d64:	603c      	str	r4, [r7, #0]
 8009d66:	414b      	adcs	r3, r1
 8009d68:	607b      	str	r3, [r7, #4]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f04f 0300 	mov.w	r3, #0
 8009d74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d78:	f7f6 ff70 	bl	8000c5c <__aeabi_uldivmod>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4613      	mov	r3, r2
 8009d82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009d84:	e1d2      	b.n	800a12c <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d067      	beq.n	8009e5e <UART_SetConfig+0x85e>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d05e      	beq.n	8009e54 <UART_SetConfig+0x854>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d055      	beq.n	8009e4a <UART_SetConfig+0x84a>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d04c      	beq.n	8009e40 <UART_SetConfig+0x840>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009daa:	2b04      	cmp	r3, #4
 8009dac:	d043      	beq.n	8009e36 <UART_SetConfig+0x836>
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db2:	2b05      	cmp	r3, #5
 8009db4:	d03a      	beq.n	8009e2c <UART_SetConfig+0x82c>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dba:	2b06      	cmp	r3, #6
 8009dbc:	d031      	beq.n	8009e22 <UART_SetConfig+0x822>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc2:	2b07      	cmp	r3, #7
 8009dc4:	d028      	beq.n	8009e18 <UART_SetConfig+0x818>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dca:	2b08      	cmp	r3, #8
 8009dcc:	d01f      	beq.n	8009e0e <UART_SetConfig+0x80e>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	2b09      	cmp	r3, #9
 8009dd4:	d016      	beq.n	8009e04 <UART_SetConfig+0x804>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dda:	2b0a      	cmp	r3, #10
 8009ddc:	d00d      	beq.n	8009dfa <UART_SetConfig+0x7fa>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de2:	2b0b      	cmp	r3, #11
 8009de4:	d104      	bne.n	8009df0 <UART_SetConfig+0x7f0>
 8009de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dea:	f04f 0300 	mov.w	r3, #0
 8009dee:	e03a      	b.n	8009e66 <UART_SetConfig+0x866>
 8009df0:	f04f 0201 	mov.w	r2, #1
 8009df4:	f04f 0300 	mov.w	r3, #0
 8009df8:	e035      	b.n	8009e66 <UART_SetConfig+0x866>
 8009dfa:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009dfe:	f04f 0300 	mov.w	r3, #0
 8009e02:	e030      	b.n	8009e66 <UART_SetConfig+0x866>
 8009e04:	f04f 0240 	mov.w	r2, #64	; 0x40
 8009e08:	f04f 0300 	mov.w	r3, #0
 8009e0c:	e02b      	b.n	8009e66 <UART_SetConfig+0x866>
 8009e0e:	f04f 0220 	mov.w	r2, #32
 8009e12:	f04f 0300 	mov.w	r3, #0
 8009e16:	e026      	b.n	8009e66 <UART_SetConfig+0x866>
 8009e18:	f04f 0210 	mov.w	r2, #16
 8009e1c:	f04f 0300 	mov.w	r3, #0
 8009e20:	e021      	b.n	8009e66 <UART_SetConfig+0x866>
 8009e22:	f04f 020c 	mov.w	r2, #12
 8009e26:	f04f 0300 	mov.w	r3, #0
 8009e2a:	e01c      	b.n	8009e66 <UART_SetConfig+0x866>
 8009e2c:	f04f 020a 	mov.w	r2, #10
 8009e30:	f04f 0300 	mov.w	r3, #0
 8009e34:	e017      	b.n	8009e66 <UART_SetConfig+0x866>
 8009e36:	f04f 0208 	mov.w	r2, #8
 8009e3a:	f04f 0300 	mov.w	r3, #0
 8009e3e:	e012      	b.n	8009e66 <UART_SetConfig+0x866>
 8009e40:	f04f 0206 	mov.w	r2, #6
 8009e44:	f04f 0300 	mov.w	r3, #0
 8009e48:	e00d      	b.n	8009e66 <UART_SetConfig+0x866>
 8009e4a:	f04f 0204 	mov.w	r2, #4
 8009e4e:	f04f 0300 	mov.w	r3, #0
 8009e52:	e008      	b.n	8009e66 <UART_SetConfig+0x866>
 8009e54:	f04f 0202 	mov.w	r2, #2
 8009e58:	f04f 0300 	mov.w	r3, #0
 8009e5c:	e003      	b.n	8009e66 <UART_SetConfig+0x866>
 8009e5e:	f04f 0201 	mov.w	r2, #1
 8009e62:	f04f 0300 	mov.w	r3, #0
 8009e66:	48ba      	ldr	r0, [pc, #744]	; (800a150 <UART_SetConfig+0xb50>)
 8009e68:	f04f 0100 	mov.w	r1, #0
 8009e6c:	f7f6 fef6 	bl	8000c5c <__aeabi_uldivmod>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	4610      	mov	r0, r2
 8009e76:	4619      	mov	r1, r3
 8009e78:	f04f 0200 	mov.w	r2, #0
 8009e7c:	f04f 0300 	mov.w	r3, #0
 8009e80:	020b      	lsls	r3, r1, #8
 8009e82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e86:	0202      	lsls	r2, r0, #8
 8009e88:	68f9      	ldr	r1, [r7, #12]
 8009e8a:	6849      	ldr	r1, [r1, #4]
 8009e8c:	0849      	lsrs	r1, r1, #1
 8009e8e:	4608      	mov	r0, r1
 8009e90:	f04f 0100 	mov.w	r1, #0
 8009e94:	eb12 0a00 	adds.w	sl, r2, r0
 8009e98:	eb43 0b01 	adc.w	fp, r3, r1
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	f04f 0300 	mov.w	r3, #0
 8009ea6:	4650      	mov	r0, sl
 8009ea8:	4659      	mov	r1, fp
 8009eaa:	f7f6 fed7 	bl	8000c5c <__aeabi_uldivmod>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009eb6:	e139      	b.n	800a12c <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8009eb8:	f7fc fc86 	bl	80067c8 <HAL_RCC_GetSysClockFreq>
 8009ebc:	61b8      	str	r0, [r7, #24]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f04f 0100 	mov.w	r1, #0
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d067      	beq.n	8009f9e <UART_SetConfig+0x99e>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d05e      	beq.n	8009f94 <UART_SetConfig+0x994>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d055      	beq.n	8009f8a <UART_SetConfig+0x98a>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d04c      	beq.n	8009f80 <UART_SetConfig+0x980>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	d043      	beq.n	8009f76 <UART_SetConfig+0x976>
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef2:	2b05      	cmp	r3, #5
 8009ef4:	d03a      	beq.n	8009f6c <UART_SetConfig+0x96c>
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efa:	2b06      	cmp	r3, #6
 8009efc:	d031      	beq.n	8009f62 <UART_SetConfig+0x962>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	2b07      	cmp	r3, #7
 8009f04:	d028      	beq.n	8009f58 <UART_SetConfig+0x958>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0a:	2b08      	cmp	r3, #8
 8009f0c:	d01f      	beq.n	8009f4e <UART_SetConfig+0x94e>
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f12:	2b09      	cmp	r3, #9
 8009f14:	d016      	beq.n	8009f44 <UART_SetConfig+0x944>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1a:	2b0a      	cmp	r3, #10
 8009f1c:	d00d      	beq.n	8009f3a <UART_SetConfig+0x93a>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f22:	2b0b      	cmp	r3, #11
 8009f24:	d104      	bne.n	8009f30 <UART_SetConfig+0x930>
 8009f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f2a:	f04f 0300 	mov.w	r3, #0
 8009f2e:	e03a      	b.n	8009fa6 <UART_SetConfig+0x9a6>
 8009f30:	f04f 0201 	mov.w	r2, #1
 8009f34:	f04f 0300 	mov.w	r3, #0
 8009f38:	e035      	b.n	8009fa6 <UART_SetConfig+0x9a6>
 8009f3a:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009f3e:	f04f 0300 	mov.w	r3, #0
 8009f42:	e030      	b.n	8009fa6 <UART_SetConfig+0x9a6>
 8009f44:	f04f 0240 	mov.w	r2, #64	; 0x40
 8009f48:	f04f 0300 	mov.w	r3, #0
 8009f4c:	e02b      	b.n	8009fa6 <UART_SetConfig+0x9a6>
 8009f4e:	f04f 0220 	mov.w	r2, #32
 8009f52:	f04f 0300 	mov.w	r3, #0
 8009f56:	e026      	b.n	8009fa6 <UART_SetConfig+0x9a6>
 8009f58:	f04f 0210 	mov.w	r2, #16
 8009f5c:	f04f 0300 	mov.w	r3, #0
 8009f60:	e021      	b.n	8009fa6 <UART_SetConfig+0x9a6>
 8009f62:	f04f 020c 	mov.w	r2, #12
 8009f66:	f04f 0300 	mov.w	r3, #0
 8009f6a:	e01c      	b.n	8009fa6 <UART_SetConfig+0x9a6>
 8009f6c:	f04f 020a 	mov.w	r2, #10
 8009f70:	f04f 0300 	mov.w	r3, #0
 8009f74:	e017      	b.n	8009fa6 <UART_SetConfig+0x9a6>
 8009f76:	f04f 0208 	mov.w	r2, #8
 8009f7a:	f04f 0300 	mov.w	r3, #0
 8009f7e:	e012      	b.n	8009fa6 <UART_SetConfig+0x9a6>
 8009f80:	f04f 0206 	mov.w	r2, #6
 8009f84:	f04f 0300 	mov.w	r3, #0
 8009f88:	e00d      	b.n	8009fa6 <UART_SetConfig+0x9a6>
 8009f8a:	f04f 0204 	mov.w	r2, #4
 8009f8e:	f04f 0300 	mov.w	r3, #0
 8009f92:	e008      	b.n	8009fa6 <UART_SetConfig+0x9a6>
 8009f94:	f04f 0202 	mov.w	r2, #2
 8009f98:	f04f 0300 	mov.w	r3, #0
 8009f9c:	e003      	b.n	8009fa6 <UART_SetConfig+0x9a6>
 8009f9e:	f04f 0201 	mov.w	r2, #1
 8009fa2:	f04f 0300 	mov.w	r3, #0
 8009fa6:	f7f6 fe59 	bl	8000c5c <__aeabi_uldivmod>
 8009faa:	4602      	mov	r2, r0
 8009fac:	460b      	mov	r3, r1
 8009fae:	4610      	mov	r0, r2
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	f04f 0200 	mov.w	r2, #0
 8009fb6:	f04f 0300 	mov.w	r3, #0
 8009fba:	020b      	lsls	r3, r1, #8
 8009fbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009fc0:	0202      	lsls	r2, r0, #8
 8009fc2:	68f9      	ldr	r1, [r7, #12]
 8009fc4:	6849      	ldr	r1, [r1, #4]
 8009fc6:	0849      	lsrs	r1, r1, #1
 8009fc8:	4608      	mov	r0, r1
 8009fca:	f04f 0100 	mov.w	r1, #0
 8009fce:	eb12 0800 	adds.w	r8, r2, r0
 8009fd2:	eb43 0901 	adc.w	r9, r3, r1
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	f04f 0300 	mov.w	r3, #0
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	f7f6 fe3a 	bl	8000c5c <__aeabi_uldivmod>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	4613      	mov	r3, r2
 8009fee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009ff0:	e09c      	b.n	800a12c <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d067      	beq.n	800a0ca <UART_SetConfig+0xaca>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d05e      	beq.n	800a0c0 <UART_SetConfig+0xac0>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	2b02      	cmp	r3, #2
 800a008:	d055      	beq.n	800a0b6 <UART_SetConfig+0xab6>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	2b03      	cmp	r3, #3
 800a010:	d04c      	beq.n	800a0ac <UART_SetConfig+0xaac>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a016:	2b04      	cmp	r3, #4
 800a018:	d043      	beq.n	800a0a2 <UART_SetConfig+0xaa2>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01e:	2b05      	cmp	r3, #5
 800a020:	d03a      	beq.n	800a098 <UART_SetConfig+0xa98>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a026:	2b06      	cmp	r3, #6
 800a028:	d031      	beq.n	800a08e <UART_SetConfig+0xa8e>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02e:	2b07      	cmp	r3, #7
 800a030:	d028      	beq.n	800a084 <UART_SetConfig+0xa84>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	2b08      	cmp	r3, #8
 800a038:	d01f      	beq.n	800a07a <UART_SetConfig+0xa7a>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03e:	2b09      	cmp	r3, #9
 800a040:	d016      	beq.n	800a070 <UART_SetConfig+0xa70>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a046:	2b0a      	cmp	r3, #10
 800a048:	d00d      	beq.n	800a066 <UART_SetConfig+0xa66>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04e:	2b0b      	cmp	r3, #11
 800a050:	d104      	bne.n	800a05c <UART_SetConfig+0xa5c>
 800a052:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a056:	f04f 0300 	mov.w	r3, #0
 800a05a:	e03a      	b.n	800a0d2 <UART_SetConfig+0xad2>
 800a05c:	f04f 0201 	mov.w	r2, #1
 800a060:	f04f 0300 	mov.w	r3, #0
 800a064:	e035      	b.n	800a0d2 <UART_SetConfig+0xad2>
 800a066:	f04f 0280 	mov.w	r2, #128	; 0x80
 800a06a:	f04f 0300 	mov.w	r3, #0
 800a06e:	e030      	b.n	800a0d2 <UART_SetConfig+0xad2>
 800a070:	f04f 0240 	mov.w	r2, #64	; 0x40
 800a074:	f04f 0300 	mov.w	r3, #0
 800a078:	e02b      	b.n	800a0d2 <UART_SetConfig+0xad2>
 800a07a:	f04f 0220 	mov.w	r2, #32
 800a07e:	f04f 0300 	mov.w	r3, #0
 800a082:	e026      	b.n	800a0d2 <UART_SetConfig+0xad2>
 800a084:	f04f 0210 	mov.w	r2, #16
 800a088:	f04f 0300 	mov.w	r3, #0
 800a08c:	e021      	b.n	800a0d2 <UART_SetConfig+0xad2>
 800a08e:	f04f 020c 	mov.w	r2, #12
 800a092:	f04f 0300 	mov.w	r3, #0
 800a096:	e01c      	b.n	800a0d2 <UART_SetConfig+0xad2>
 800a098:	f04f 020a 	mov.w	r2, #10
 800a09c:	f04f 0300 	mov.w	r3, #0
 800a0a0:	e017      	b.n	800a0d2 <UART_SetConfig+0xad2>
 800a0a2:	f04f 0208 	mov.w	r2, #8
 800a0a6:	f04f 0300 	mov.w	r3, #0
 800a0aa:	e012      	b.n	800a0d2 <UART_SetConfig+0xad2>
 800a0ac:	f04f 0206 	mov.w	r2, #6
 800a0b0:	f04f 0300 	mov.w	r3, #0
 800a0b4:	e00d      	b.n	800a0d2 <UART_SetConfig+0xad2>
 800a0b6:	f04f 0204 	mov.w	r2, #4
 800a0ba:	f04f 0300 	mov.w	r3, #0
 800a0be:	e008      	b.n	800a0d2 <UART_SetConfig+0xad2>
 800a0c0:	f04f 0202 	mov.w	r2, #2
 800a0c4:	f04f 0300 	mov.w	r3, #0
 800a0c8:	e003      	b.n	800a0d2 <UART_SetConfig+0xad2>
 800a0ca:	f04f 0201 	mov.w	r2, #1
 800a0ce:	f04f 0300 	mov.w	r3, #0
 800a0d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a0d6:	f04f 0100 	mov.w	r1, #0
 800a0da:	f7f6 fdbf 	bl	8000c5c <__aeabi_uldivmod>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	f04f 0200 	mov.w	r2, #0
 800a0ea:	f04f 0300 	mov.w	r3, #0
 800a0ee:	020b      	lsls	r3, r1, #8
 800a0f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0f4:	0202      	lsls	r2, r0, #8
 800a0f6:	68f9      	ldr	r1, [r7, #12]
 800a0f8:	6849      	ldr	r1, [r1, #4]
 800a0fa:	0849      	lsrs	r1, r1, #1
 800a0fc:	4608      	mov	r0, r1
 800a0fe:	f04f 0100 	mov.w	r1, #0
 800a102:	1814      	adds	r4, r2, r0
 800a104:	eb43 0501 	adc.w	r5, r3, r1
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	461a      	mov	r2, r3
 800a10e:	f04f 0300 	mov.w	r3, #0
 800a112:	4620      	mov	r0, r4
 800a114:	4629      	mov	r1, r5
 800a116:	f7f6 fda1 	bl	8000c5c <__aeabi_uldivmod>
 800a11a:	4602      	mov	r2, r0
 800a11c:	460b      	mov	r3, r1
 800a11e:	4613      	mov	r3, r2
 800a120:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a122:	e003      	b.n	800a12c <UART_SetConfig+0xb2c>
          default:
            ret = HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;
 800a12a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a132:	d309      	bcc.n	800a148 <UART_SetConfig+0xb48>
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a13a:	d205      	bcs.n	800a148 <UART_SetConfig+0xb48>
        {
          huart->Instance->BRR = usartdiv;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a142:	60da      	str	r2, [r3, #12]
 800a144:	f000 bc01 	b.w	800a94a <UART_SetConfig+0x134a>
        }
        else
        {
          ret = HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a14e:	e3fc      	b.n	800a94a <UART_SetConfig+0x134a>
 800a150:	00f42400 	.word	0x00f42400
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	69db      	ldr	r3, [r3, #28]
 800a158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a15c:	f040 8203 	bne.w	800a566 <UART_SetConfig+0xf66>
  {
    switch (clocksource)
 800a160:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a164:	2b08      	cmp	r3, #8
 800a166:	f200 81dc 	bhi.w	800a522 <UART_SetConfig+0xf22>
 800a16a:	a201      	add	r2, pc, #4	; (adr r2, 800a170 <UART_SetConfig+0xb70>)
 800a16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a170:	0800a195 	.word	0x0800a195
 800a174:	0800a24d 	.word	0x0800a24d
 800a178:	0800a305 	.word	0x0800a305
 800a17c:	0800a523 	.word	0x0800a523
 800a180:	0800a3b7 	.word	0x0800a3b7
 800a184:	0800a523 	.word	0x0800a523
 800a188:	0800a523 	.word	0x0800a523
 800a18c:	0800a523 	.word	0x0800a523
 800a190:	0800a46f 	.word	0x0800a46f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a194:	f7fc fb86 	bl	80068a4 <HAL_RCC_GetPCLK1Freq>
 800a198:	61b8      	str	r0, [r7, #24]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d044      	beq.n	800a22c <UART_SetConfig+0xc2c>
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d03e      	beq.n	800a228 <UART_SetConfig+0xc28>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d038      	beq.n	800a224 <UART_SetConfig+0xc24>
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	2b03      	cmp	r3, #3
 800a1b8:	d032      	beq.n	800a220 <UART_SetConfig+0xc20>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2b04      	cmp	r3, #4
 800a1c0:	d02c      	beq.n	800a21c <UART_SetConfig+0xc1c>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2b05      	cmp	r3, #5
 800a1c8:	d026      	beq.n	800a218 <UART_SetConfig+0xc18>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2b06      	cmp	r3, #6
 800a1d0:	d020      	beq.n	800a214 <UART_SetConfig+0xc14>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	2b07      	cmp	r3, #7
 800a1d8:	d01a      	beq.n	800a210 <UART_SetConfig+0xc10>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	2b08      	cmp	r3, #8
 800a1e0:	d014      	beq.n	800a20c <UART_SetConfig+0xc0c>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	2b09      	cmp	r3, #9
 800a1e8:	d00e      	beq.n	800a208 <UART_SetConfig+0xc08>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	2b0a      	cmp	r3, #10
 800a1f0:	d008      	beq.n	800a204 <UART_SetConfig+0xc04>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f6:	2b0b      	cmp	r3, #11
 800a1f8:	d102      	bne.n	800a200 <UART_SetConfig+0xc00>
 800a1fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1fe:	e016      	b.n	800a22e <UART_SetConfig+0xc2e>
 800a200:	2301      	movs	r3, #1
 800a202:	e014      	b.n	800a22e <UART_SetConfig+0xc2e>
 800a204:	2380      	movs	r3, #128	; 0x80
 800a206:	e012      	b.n	800a22e <UART_SetConfig+0xc2e>
 800a208:	2340      	movs	r3, #64	; 0x40
 800a20a:	e010      	b.n	800a22e <UART_SetConfig+0xc2e>
 800a20c:	2320      	movs	r3, #32
 800a20e:	e00e      	b.n	800a22e <UART_SetConfig+0xc2e>
 800a210:	2310      	movs	r3, #16
 800a212:	e00c      	b.n	800a22e <UART_SetConfig+0xc2e>
 800a214:	230c      	movs	r3, #12
 800a216:	e00a      	b.n	800a22e <UART_SetConfig+0xc2e>
 800a218:	230a      	movs	r3, #10
 800a21a:	e008      	b.n	800a22e <UART_SetConfig+0xc2e>
 800a21c:	2308      	movs	r3, #8
 800a21e:	e006      	b.n	800a22e <UART_SetConfig+0xc2e>
 800a220:	2306      	movs	r3, #6
 800a222:	e004      	b.n	800a22e <UART_SetConfig+0xc2e>
 800a224:	2304      	movs	r3, #4
 800a226:	e002      	b.n	800a22e <UART_SetConfig+0xc2e>
 800a228:	2302      	movs	r3, #2
 800a22a:	e000      	b.n	800a22e <UART_SetConfig+0xc2e>
 800a22c:	2301      	movs	r3, #1
 800a22e:	69ba      	ldr	r2, [r7, #24]
 800a230:	fbb2 f3f3 	udiv	r3, r2, r3
 800a234:	005a      	lsls	r2, r3, #1
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	085b      	lsrs	r3, r3, #1
 800a23c:	441a      	add	r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	fbb2 f3f3 	udiv	r3, r2, r3
 800a246:	b29b      	uxth	r3, r3
 800a248:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a24a:	e16e      	b.n	800a52a <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a24c:	f7fc fb40 	bl	80068d0 <HAL_RCC_GetPCLK2Freq>
 800a250:	61b8      	str	r0, [r7, #24]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	2b00      	cmp	r3, #0
 800a258:	d044      	beq.n	800a2e4 <UART_SetConfig+0xce4>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d03e      	beq.n	800a2e0 <UART_SetConfig+0xce0>
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	2b02      	cmp	r3, #2
 800a268:	d038      	beq.n	800a2dc <UART_SetConfig+0xcdc>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d032      	beq.n	800a2d8 <UART_SetConfig+0xcd8>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a276:	2b04      	cmp	r3, #4
 800a278:	d02c      	beq.n	800a2d4 <UART_SetConfig+0xcd4>
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27e:	2b05      	cmp	r3, #5
 800a280:	d026      	beq.n	800a2d0 <UART_SetConfig+0xcd0>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	2b06      	cmp	r3, #6
 800a288:	d020      	beq.n	800a2cc <UART_SetConfig+0xccc>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	2b07      	cmp	r3, #7
 800a290:	d01a      	beq.n	800a2c8 <UART_SetConfig+0xcc8>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a296:	2b08      	cmp	r3, #8
 800a298:	d014      	beq.n	800a2c4 <UART_SetConfig+0xcc4>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	2b09      	cmp	r3, #9
 800a2a0:	d00e      	beq.n	800a2c0 <UART_SetConfig+0xcc0>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a6:	2b0a      	cmp	r3, #10
 800a2a8:	d008      	beq.n	800a2bc <UART_SetConfig+0xcbc>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	2b0b      	cmp	r3, #11
 800a2b0:	d102      	bne.n	800a2b8 <UART_SetConfig+0xcb8>
 800a2b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2b6:	e016      	b.n	800a2e6 <UART_SetConfig+0xce6>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e014      	b.n	800a2e6 <UART_SetConfig+0xce6>
 800a2bc:	2380      	movs	r3, #128	; 0x80
 800a2be:	e012      	b.n	800a2e6 <UART_SetConfig+0xce6>
 800a2c0:	2340      	movs	r3, #64	; 0x40
 800a2c2:	e010      	b.n	800a2e6 <UART_SetConfig+0xce6>
 800a2c4:	2320      	movs	r3, #32
 800a2c6:	e00e      	b.n	800a2e6 <UART_SetConfig+0xce6>
 800a2c8:	2310      	movs	r3, #16
 800a2ca:	e00c      	b.n	800a2e6 <UART_SetConfig+0xce6>
 800a2cc:	230c      	movs	r3, #12
 800a2ce:	e00a      	b.n	800a2e6 <UART_SetConfig+0xce6>
 800a2d0:	230a      	movs	r3, #10
 800a2d2:	e008      	b.n	800a2e6 <UART_SetConfig+0xce6>
 800a2d4:	2308      	movs	r3, #8
 800a2d6:	e006      	b.n	800a2e6 <UART_SetConfig+0xce6>
 800a2d8:	2306      	movs	r3, #6
 800a2da:	e004      	b.n	800a2e6 <UART_SetConfig+0xce6>
 800a2dc:	2304      	movs	r3, #4
 800a2de:	e002      	b.n	800a2e6 <UART_SetConfig+0xce6>
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	e000      	b.n	800a2e6 <UART_SetConfig+0xce6>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	69ba      	ldr	r2, [r7, #24]
 800a2e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ec:	005a      	lsls	r2, r3, #1
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	085b      	lsrs	r3, r3, #1
 800a2f4:	441a      	add	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a302:	e112      	b.n	800a52a <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d044      	beq.n	800a396 <UART_SetConfig+0xd96>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a310:	2b01      	cmp	r3, #1
 800a312:	d03e      	beq.n	800a392 <UART_SetConfig+0xd92>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d038      	beq.n	800a38e <UART_SetConfig+0xd8e>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a320:	2b03      	cmp	r3, #3
 800a322:	d032      	beq.n	800a38a <UART_SetConfig+0xd8a>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a328:	2b04      	cmp	r3, #4
 800a32a:	d02c      	beq.n	800a386 <UART_SetConfig+0xd86>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	2b05      	cmp	r3, #5
 800a332:	d026      	beq.n	800a382 <UART_SetConfig+0xd82>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	2b06      	cmp	r3, #6
 800a33a:	d020      	beq.n	800a37e <UART_SetConfig+0xd7e>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	2b07      	cmp	r3, #7
 800a342:	d01a      	beq.n	800a37a <UART_SetConfig+0xd7a>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a348:	2b08      	cmp	r3, #8
 800a34a:	d014      	beq.n	800a376 <UART_SetConfig+0xd76>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a350:	2b09      	cmp	r3, #9
 800a352:	d00e      	beq.n	800a372 <UART_SetConfig+0xd72>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a358:	2b0a      	cmp	r3, #10
 800a35a:	d008      	beq.n	800a36e <UART_SetConfig+0xd6e>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a360:	2b0b      	cmp	r3, #11
 800a362:	d102      	bne.n	800a36a <UART_SetConfig+0xd6a>
 800a364:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a368:	e016      	b.n	800a398 <UART_SetConfig+0xd98>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e014      	b.n	800a398 <UART_SetConfig+0xd98>
 800a36e:	2380      	movs	r3, #128	; 0x80
 800a370:	e012      	b.n	800a398 <UART_SetConfig+0xd98>
 800a372:	2340      	movs	r3, #64	; 0x40
 800a374:	e010      	b.n	800a398 <UART_SetConfig+0xd98>
 800a376:	2320      	movs	r3, #32
 800a378:	e00e      	b.n	800a398 <UART_SetConfig+0xd98>
 800a37a:	2310      	movs	r3, #16
 800a37c:	e00c      	b.n	800a398 <UART_SetConfig+0xd98>
 800a37e:	230c      	movs	r3, #12
 800a380:	e00a      	b.n	800a398 <UART_SetConfig+0xd98>
 800a382:	230a      	movs	r3, #10
 800a384:	e008      	b.n	800a398 <UART_SetConfig+0xd98>
 800a386:	2308      	movs	r3, #8
 800a388:	e006      	b.n	800a398 <UART_SetConfig+0xd98>
 800a38a:	2306      	movs	r3, #6
 800a38c:	e004      	b.n	800a398 <UART_SetConfig+0xd98>
 800a38e:	2304      	movs	r3, #4
 800a390:	e002      	b.n	800a398 <UART_SetConfig+0xd98>
 800a392:	2302      	movs	r3, #2
 800a394:	e000      	b.n	800a398 <UART_SetConfig+0xd98>
 800a396:	2301      	movs	r3, #1
 800a398:	4aa1      	ldr	r2, [pc, #644]	; (800a620 <UART_SetConfig+0x1020>)
 800a39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a39e:	005a      	lsls	r2, r3, #1
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	085b      	lsrs	r3, r3, #1
 800a3a6:	441a      	add	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a3b4:	e0b9      	b.n	800a52a <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3b6:	f7fc fa07 	bl	80067c8 <HAL_RCC_GetSysClockFreq>
 800a3ba:	61b8      	str	r0, [r7, #24]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d044      	beq.n	800a44e <UART_SetConfig+0xe4e>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d03e      	beq.n	800a44a <UART_SetConfig+0xe4a>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d038      	beq.n	800a446 <UART_SetConfig+0xe46>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d8:	2b03      	cmp	r3, #3
 800a3da:	d032      	beq.n	800a442 <UART_SetConfig+0xe42>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	2b04      	cmp	r3, #4
 800a3e2:	d02c      	beq.n	800a43e <UART_SetConfig+0xe3e>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	2b05      	cmp	r3, #5
 800a3ea:	d026      	beq.n	800a43a <UART_SetConfig+0xe3a>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f0:	2b06      	cmp	r3, #6
 800a3f2:	d020      	beq.n	800a436 <UART_SetConfig+0xe36>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f8:	2b07      	cmp	r3, #7
 800a3fa:	d01a      	beq.n	800a432 <UART_SetConfig+0xe32>
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a400:	2b08      	cmp	r3, #8
 800a402:	d014      	beq.n	800a42e <UART_SetConfig+0xe2e>
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a408:	2b09      	cmp	r3, #9
 800a40a:	d00e      	beq.n	800a42a <UART_SetConfig+0xe2a>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a410:	2b0a      	cmp	r3, #10
 800a412:	d008      	beq.n	800a426 <UART_SetConfig+0xe26>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a418:	2b0b      	cmp	r3, #11
 800a41a:	d102      	bne.n	800a422 <UART_SetConfig+0xe22>
 800a41c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a420:	e016      	b.n	800a450 <UART_SetConfig+0xe50>
 800a422:	2301      	movs	r3, #1
 800a424:	e014      	b.n	800a450 <UART_SetConfig+0xe50>
 800a426:	2380      	movs	r3, #128	; 0x80
 800a428:	e012      	b.n	800a450 <UART_SetConfig+0xe50>
 800a42a:	2340      	movs	r3, #64	; 0x40
 800a42c:	e010      	b.n	800a450 <UART_SetConfig+0xe50>
 800a42e:	2320      	movs	r3, #32
 800a430:	e00e      	b.n	800a450 <UART_SetConfig+0xe50>
 800a432:	2310      	movs	r3, #16
 800a434:	e00c      	b.n	800a450 <UART_SetConfig+0xe50>
 800a436:	230c      	movs	r3, #12
 800a438:	e00a      	b.n	800a450 <UART_SetConfig+0xe50>
 800a43a:	230a      	movs	r3, #10
 800a43c:	e008      	b.n	800a450 <UART_SetConfig+0xe50>
 800a43e:	2308      	movs	r3, #8
 800a440:	e006      	b.n	800a450 <UART_SetConfig+0xe50>
 800a442:	2306      	movs	r3, #6
 800a444:	e004      	b.n	800a450 <UART_SetConfig+0xe50>
 800a446:	2304      	movs	r3, #4
 800a448:	e002      	b.n	800a450 <UART_SetConfig+0xe50>
 800a44a:	2302      	movs	r3, #2
 800a44c:	e000      	b.n	800a450 <UART_SetConfig+0xe50>
 800a44e:	2301      	movs	r3, #1
 800a450:	69ba      	ldr	r2, [r7, #24]
 800a452:	fbb2 f3f3 	udiv	r3, r2, r3
 800a456:	005a      	lsls	r2, r3, #1
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	085b      	lsrs	r3, r3, #1
 800a45e:	441a      	add	r2, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	fbb2 f3f3 	udiv	r3, r2, r3
 800a468:	b29b      	uxth	r3, r3
 800a46a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a46c:	e05d      	b.n	800a52a <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a472:	2b00      	cmp	r3, #0
 800a474:	d044      	beq.n	800a500 <UART_SetConfig+0xf00>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d03e      	beq.n	800a4fc <UART_SetConfig+0xefc>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a482:	2b02      	cmp	r3, #2
 800a484:	d038      	beq.n	800a4f8 <UART_SetConfig+0xef8>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d032      	beq.n	800a4f4 <UART_SetConfig+0xef4>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a492:	2b04      	cmp	r3, #4
 800a494:	d02c      	beq.n	800a4f0 <UART_SetConfig+0xef0>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49a:	2b05      	cmp	r3, #5
 800a49c:	d026      	beq.n	800a4ec <UART_SetConfig+0xeec>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a2:	2b06      	cmp	r3, #6
 800a4a4:	d020      	beq.n	800a4e8 <UART_SetConfig+0xee8>
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4aa:	2b07      	cmp	r3, #7
 800a4ac:	d01a      	beq.n	800a4e4 <UART_SetConfig+0xee4>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b2:	2b08      	cmp	r3, #8
 800a4b4:	d014      	beq.n	800a4e0 <UART_SetConfig+0xee0>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ba:	2b09      	cmp	r3, #9
 800a4bc:	d00e      	beq.n	800a4dc <UART_SetConfig+0xedc>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	2b0a      	cmp	r3, #10
 800a4c4:	d008      	beq.n	800a4d8 <UART_SetConfig+0xed8>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	2b0b      	cmp	r3, #11
 800a4cc:	d102      	bne.n	800a4d4 <UART_SetConfig+0xed4>
 800a4ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4d2:	e016      	b.n	800a502 <UART_SetConfig+0xf02>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e014      	b.n	800a502 <UART_SetConfig+0xf02>
 800a4d8:	2380      	movs	r3, #128	; 0x80
 800a4da:	e012      	b.n	800a502 <UART_SetConfig+0xf02>
 800a4dc:	2340      	movs	r3, #64	; 0x40
 800a4de:	e010      	b.n	800a502 <UART_SetConfig+0xf02>
 800a4e0:	2320      	movs	r3, #32
 800a4e2:	e00e      	b.n	800a502 <UART_SetConfig+0xf02>
 800a4e4:	2310      	movs	r3, #16
 800a4e6:	e00c      	b.n	800a502 <UART_SetConfig+0xf02>
 800a4e8:	230c      	movs	r3, #12
 800a4ea:	e00a      	b.n	800a502 <UART_SetConfig+0xf02>
 800a4ec:	230a      	movs	r3, #10
 800a4ee:	e008      	b.n	800a502 <UART_SetConfig+0xf02>
 800a4f0:	2308      	movs	r3, #8
 800a4f2:	e006      	b.n	800a502 <UART_SetConfig+0xf02>
 800a4f4:	2306      	movs	r3, #6
 800a4f6:	e004      	b.n	800a502 <UART_SetConfig+0xf02>
 800a4f8:	2304      	movs	r3, #4
 800a4fa:	e002      	b.n	800a502 <UART_SetConfig+0xf02>
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	e000      	b.n	800a502 <UART_SetConfig+0xf02>
 800a500:	2301      	movs	r3, #1
 800a502:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a506:	fbb2 f3f3 	udiv	r3, r2, r3
 800a50a:	005a      	lsls	r2, r3, #1
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	085b      	lsrs	r3, r3, #1
 800a512:	441a      	add	r2, r3
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	fbb2 f3f3 	udiv	r3, r2, r3
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a520:	e003      	b.n	800a52a <UART_SetConfig+0xf2a>
      default:
        ret = HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800a528:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	2b0f      	cmp	r3, #15
 800a52e:	d916      	bls.n	800a55e <UART_SetConfig+0xf5e>
 800a530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a536:	d212      	bcs.n	800a55e <UART_SetConfig+0xf5e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	f023 030f 	bic.w	r3, r3, #15
 800a540:	82fb      	strh	r3, [r7, #22]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a544:	085b      	lsrs	r3, r3, #1
 800a546:	b29b      	uxth	r3, r3
 800a548:	f003 0307 	and.w	r3, r3, #7
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	8afb      	ldrh	r3, [r7, #22]
 800a550:	4313      	orrs	r3, r2
 800a552:	82fb      	strh	r3, [r7, #22]
      huart->Instance->BRR = brrtemp;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	8afa      	ldrh	r2, [r7, #22]
 800a55a:	60da      	str	r2, [r3, #12]
 800a55c:	e1f5      	b.n	800a94a <UART_SetConfig+0x134a>
    }
    else
    {
      ret = HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a564:	e1f1      	b.n	800a94a <UART_SetConfig+0x134a>
    }
  }
  else
  {
    switch (clocksource)
 800a566:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a56a:	2b08      	cmp	r3, #8
 800a56c:	f200 81da 	bhi.w	800a924 <UART_SetConfig+0x1324>
 800a570:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <UART_SetConfig+0xf78>)
 800a572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a576:	bf00      	nop
 800a578:	0800a59d 	.word	0x0800a59d
 800a57c:	0800a657 	.word	0x0800a657
 800a580:	0800a70d 	.word	0x0800a70d
 800a584:	0800a925 	.word	0x0800a925
 800a588:	0800a7bd 	.word	0x0800a7bd
 800a58c:	0800a925 	.word	0x0800a925
 800a590:	0800a925 	.word	0x0800a925
 800a594:	0800a925 	.word	0x0800a925
 800a598:	0800a873 	.word	0x0800a873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a59c:	f7fc f982 	bl	80068a4 <HAL_RCC_GetPCLK1Freq>
 800a5a0:	61b8      	str	r0, [r7, #24]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d046      	beq.n	800a638 <UART_SetConfig+0x1038>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d040      	beq.n	800a634 <UART_SetConfig+0x1034>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d03a      	beq.n	800a630 <UART_SetConfig+0x1030>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d034      	beq.n	800a62c <UART_SetConfig+0x102c>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c6:	2b04      	cmp	r3, #4
 800a5c8:	d02e      	beq.n	800a628 <UART_SetConfig+0x1028>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ce:	2b05      	cmp	r3, #5
 800a5d0:	d028      	beq.n	800a624 <UART_SetConfig+0x1024>
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d6:	2b06      	cmp	r3, #6
 800a5d8:	d020      	beq.n	800a61c <UART_SetConfig+0x101c>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5de:	2b07      	cmp	r3, #7
 800a5e0:	d01a      	beq.n	800a618 <UART_SetConfig+0x1018>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e6:	2b08      	cmp	r3, #8
 800a5e8:	d014      	beq.n	800a614 <UART_SetConfig+0x1014>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	2b09      	cmp	r3, #9
 800a5f0:	d00e      	beq.n	800a610 <UART_SetConfig+0x1010>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	2b0a      	cmp	r3, #10
 800a5f8:	d008      	beq.n	800a60c <UART_SetConfig+0x100c>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fe:	2b0b      	cmp	r3, #11
 800a600:	d102      	bne.n	800a608 <UART_SetConfig+0x1008>
 800a602:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a606:	e018      	b.n	800a63a <UART_SetConfig+0x103a>
 800a608:	2301      	movs	r3, #1
 800a60a:	e016      	b.n	800a63a <UART_SetConfig+0x103a>
 800a60c:	2380      	movs	r3, #128	; 0x80
 800a60e:	e014      	b.n	800a63a <UART_SetConfig+0x103a>
 800a610:	2340      	movs	r3, #64	; 0x40
 800a612:	e012      	b.n	800a63a <UART_SetConfig+0x103a>
 800a614:	2320      	movs	r3, #32
 800a616:	e010      	b.n	800a63a <UART_SetConfig+0x103a>
 800a618:	2310      	movs	r3, #16
 800a61a:	e00e      	b.n	800a63a <UART_SetConfig+0x103a>
 800a61c:	230c      	movs	r3, #12
 800a61e:	e00c      	b.n	800a63a <UART_SetConfig+0x103a>
 800a620:	00f42400 	.word	0x00f42400
 800a624:	230a      	movs	r3, #10
 800a626:	e008      	b.n	800a63a <UART_SetConfig+0x103a>
 800a628:	2308      	movs	r3, #8
 800a62a:	e006      	b.n	800a63a <UART_SetConfig+0x103a>
 800a62c:	2306      	movs	r3, #6
 800a62e:	e004      	b.n	800a63a <UART_SetConfig+0x103a>
 800a630:	2304      	movs	r3, #4
 800a632:	e002      	b.n	800a63a <UART_SetConfig+0x103a>
 800a634:	2302      	movs	r3, #2
 800a636:	e000      	b.n	800a63a <UART_SetConfig+0x103a>
 800a638:	2301      	movs	r3, #1
 800a63a:	69ba      	ldr	r2, [r7, #24]
 800a63c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	085b      	lsrs	r3, r3, #1
 800a646:	441a      	add	r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a650:	b29b      	uxth	r3, r3
 800a652:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a654:	e16a      	b.n	800a92c <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a656:	f7fc f93b 	bl	80068d0 <HAL_RCC_GetPCLK2Freq>
 800a65a:	61b8      	str	r0, [r7, #24]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b00      	cmp	r3, #0
 800a662:	d044      	beq.n	800a6ee <UART_SetConfig+0x10ee>
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d03e      	beq.n	800a6ea <UART_SetConfig+0x10ea>
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b02      	cmp	r3, #2
 800a672:	d038      	beq.n	800a6e6 <UART_SetConfig+0x10e6>
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	2b03      	cmp	r3, #3
 800a67a:	d032      	beq.n	800a6e2 <UART_SetConfig+0x10e2>
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b04      	cmp	r3, #4
 800a682:	d02c      	beq.n	800a6de <UART_SetConfig+0x10de>
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	2b05      	cmp	r3, #5
 800a68a:	d026      	beq.n	800a6da <UART_SetConfig+0x10da>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	2b06      	cmp	r3, #6
 800a692:	d020      	beq.n	800a6d6 <UART_SetConfig+0x10d6>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	2b07      	cmp	r3, #7
 800a69a:	d01a      	beq.n	800a6d2 <UART_SetConfig+0x10d2>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a0:	2b08      	cmp	r3, #8
 800a6a2:	d014      	beq.n	800a6ce <UART_SetConfig+0x10ce>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a8:	2b09      	cmp	r3, #9
 800a6aa:	d00e      	beq.n	800a6ca <UART_SetConfig+0x10ca>
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b0:	2b0a      	cmp	r3, #10
 800a6b2:	d008      	beq.n	800a6c6 <UART_SetConfig+0x10c6>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	2b0b      	cmp	r3, #11
 800a6ba:	d102      	bne.n	800a6c2 <UART_SetConfig+0x10c2>
 800a6bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6c0:	e016      	b.n	800a6f0 <UART_SetConfig+0x10f0>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e014      	b.n	800a6f0 <UART_SetConfig+0x10f0>
 800a6c6:	2380      	movs	r3, #128	; 0x80
 800a6c8:	e012      	b.n	800a6f0 <UART_SetConfig+0x10f0>
 800a6ca:	2340      	movs	r3, #64	; 0x40
 800a6cc:	e010      	b.n	800a6f0 <UART_SetConfig+0x10f0>
 800a6ce:	2320      	movs	r3, #32
 800a6d0:	e00e      	b.n	800a6f0 <UART_SetConfig+0x10f0>
 800a6d2:	2310      	movs	r3, #16
 800a6d4:	e00c      	b.n	800a6f0 <UART_SetConfig+0x10f0>
 800a6d6:	230c      	movs	r3, #12
 800a6d8:	e00a      	b.n	800a6f0 <UART_SetConfig+0x10f0>
 800a6da:	230a      	movs	r3, #10
 800a6dc:	e008      	b.n	800a6f0 <UART_SetConfig+0x10f0>
 800a6de:	2308      	movs	r3, #8
 800a6e0:	e006      	b.n	800a6f0 <UART_SetConfig+0x10f0>
 800a6e2:	2306      	movs	r3, #6
 800a6e4:	e004      	b.n	800a6f0 <UART_SetConfig+0x10f0>
 800a6e6:	2304      	movs	r3, #4
 800a6e8:	e002      	b.n	800a6f0 <UART_SetConfig+0x10f0>
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	e000      	b.n	800a6f0 <UART_SetConfig+0x10f0>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	69ba      	ldr	r2, [r7, #24]
 800a6f2:	fbb2 f2f3 	udiv	r2, r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	085b      	lsrs	r3, r3, #1
 800a6fc:	441a      	add	r2, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	fbb2 f3f3 	udiv	r3, r2, r3
 800a706:	b29b      	uxth	r3, r3
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a70a:	e10f      	b.n	800a92c <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a710:	2b00      	cmp	r3, #0
 800a712:	d044      	beq.n	800a79e <UART_SetConfig+0x119e>
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d03e      	beq.n	800a79a <UART_SetConfig+0x119a>
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a720:	2b02      	cmp	r3, #2
 800a722:	d038      	beq.n	800a796 <UART_SetConfig+0x1196>
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a728:	2b03      	cmp	r3, #3
 800a72a:	d032      	beq.n	800a792 <UART_SetConfig+0x1192>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	2b04      	cmp	r3, #4
 800a732:	d02c      	beq.n	800a78e <UART_SetConfig+0x118e>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a738:	2b05      	cmp	r3, #5
 800a73a:	d026      	beq.n	800a78a <UART_SetConfig+0x118a>
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a740:	2b06      	cmp	r3, #6
 800a742:	d020      	beq.n	800a786 <UART_SetConfig+0x1186>
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a748:	2b07      	cmp	r3, #7
 800a74a:	d01a      	beq.n	800a782 <UART_SetConfig+0x1182>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a750:	2b08      	cmp	r3, #8
 800a752:	d014      	beq.n	800a77e <UART_SetConfig+0x117e>
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a758:	2b09      	cmp	r3, #9
 800a75a:	d00e      	beq.n	800a77a <UART_SetConfig+0x117a>
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a760:	2b0a      	cmp	r3, #10
 800a762:	d008      	beq.n	800a776 <UART_SetConfig+0x1176>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	2b0b      	cmp	r3, #11
 800a76a:	d102      	bne.n	800a772 <UART_SetConfig+0x1172>
 800a76c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a770:	e016      	b.n	800a7a0 <UART_SetConfig+0x11a0>
 800a772:	2301      	movs	r3, #1
 800a774:	e014      	b.n	800a7a0 <UART_SetConfig+0x11a0>
 800a776:	2380      	movs	r3, #128	; 0x80
 800a778:	e012      	b.n	800a7a0 <UART_SetConfig+0x11a0>
 800a77a:	2340      	movs	r3, #64	; 0x40
 800a77c:	e010      	b.n	800a7a0 <UART_SetConfig+0x11a0>
 800a77e:	2320      	movs	r3, #32
 800a780:	e00e      	b.n	800a7a0 <UART_SetConfig+0x11a0>
 800a782:	2310      	movs	r3, #16
 800a784:	e00c      	b.n	800a7a0 <UART_SetConfig+0x11a0>
 800a786:	230c      	movs	r3, #12
 800a788:	e00a      	b.n	800a7a0 <UART_SetConfig+0x11a0>
 800a78a:	230a      	movs	r3, #10
 800a78c:	e008      	b.n	800a7a0 <UART_SetConfig+0x11a0>
 800a78e:	2308      	movs	r3, #8
 800a790:	e006      	b.n	800a7a0 <UART_SetConfig+0x11a0>
 800a792:	2306      	movs	r3, #6
 800a794:	e004      	b.n	800a7a0 <UART_SetConfig+0x11a0>
 800a796:	2304      	movs	r3, #4
 800a798:	e002      	b.n	800a7a0 <UART_SetConfig+0x11a0>
 800a79a:	2302      	movs	r3, #2
 800a79c:	e000      	b.n	800a7a0 <UART_SetConfig+0x11a0>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	4a74      	ldr	r2, [pc, #464]	; (800a974 <UART_SetConfig+0x1374>)
 800a7a2:	fbb2 f2f3 	udiv	r2, r2, r3
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	085b      	lsrs	r3, r3, #1
 800a7ac:	441a      	add	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a7ba:	e0b7      	b.n	800a92c <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7bc:	f7fc f804 	bl	80067c8 <HAL_RCC_GetSysClockFreq>
 800a7c0:	61b8      	str	r0, [r7, #24]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d044      	beq.n	800a854 <UART_SetConfig+0x1254>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d03e      	beq.n	800a850 <UART_SetConfig+0x1250>
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d038      	beq.n	800a84c <UART_SetConfig+0x124c>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7de:	2b03      	cmp	r3, #3
 800a7e0:	d032      	beq.n	800a848 <UART_SetConfig+0x1248>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e6:	2b04      	cmp	r3, #4
 800a7e8:	d02c      	beq.n	800a844 <UART_SetConfig+0x1244>
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ee:	2b05      	cmp	r3, #5
 800a7f0:	d026      	beq.n	800a840 <UART_SetConfig+0x1240>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	2b06      	cmp	r3, #6
 800a7f8:	d020      	beq.n	800a83c <UART_SetConfig+0x123c>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fe:	2b07      	cmp	r3, #7
 800a800:	d01a      	beq.n	800a838 <UART_SetConfig+0x1238>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	2b08      	cmp	r3, #8
 800a808:	d014      	beq.n	800a834 <UART_SetConfig+0x1234>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80e:	2b09      	cmp	r3, #9
 800a810:	d00e      	beq.n	800a830 <UART_SetConfig+0x1230>
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a816:	2b0a      	cmp	r3, #10
 800a818:	d008      	beq.n	800a82c <UART_SetConfig+0x122c>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	2b0b      	cmp	r3, #11
 800a820:	d102      	bne.n	800a828 <UART_SetConfig+0x1228>
 800a822:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a826:	e016      	b.n	800a856 <UART_SetConfig+0x1256>
 800a828:	2301      	movs	r3, #1
 800a82a:	e014      	b.n	800a856 <UART_SetConfig+0x1256>
 800a82c:	2380      	movs	r3, #128	; 0x80
 800a82e:	e012      	b.n	800a856 <UART_SetConfig+0x1256>
 800a830:	2340      	movs	r3, #64	; 0x40
 800a832:	e010      	b.n	800a856 <UART_SetConfig+0x1256>
 800a834:	2320      	movs	r3, #32
 800a836:	e00e      	b.n	800a856 <UART_SetConfig+0x1256>
 800a838:	2310      	movs	r3, #16
 800a83a:	e00c      	b.n	800a856 <UART_SetConfig+0x1256>
 800a83c:	230c      	movs	r3, #12
 800a83e:	e00a      	b.n	800a856 <UART_SetConfig+0x1256>
 800a840:	230a      	movs	r3, #10
 800a842:	e008      	b.n	800a856 <UART_SetConfig+0x1256>
 800a844:	2308      	movs	r3, #8
 800a846:	e006      	b.n	800a856 <UART_SetConfig+0x1256>
 800a848:	2306      	movs	r3, #6
 800a84a:	e004      	b.n	800a856 <UART_SetConfig+0x1256>
 800a84c:	2304      	movs	r3, #4
 800a84e:	e002      	b.n	800a856 <UART_SetConfig+0x1256>
 800a850:	2302      	movs	r3, #2
 800a852:	e000      	b.n	800a856 <UART_SetConfig+0x1256>
 800a854:	2301      	movs	r3, #1
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	fbb2 f2f3 	udiv	r2, r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	085b      	lsrs	r3, r3, #1
 800a862:	441a      	add	r2, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	fbb2 f3f3 	udiv	r3, r2, r3
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a870:	e05c      	b.n	800a92c <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a876:	2b00      	cmp	r3, #0
 800a878:	d044      	beq.n	800a904 <UART_SetConfig+0x1304>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d03e      	beq.n	800a900 <UART_SetConfig+0x1300>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	2b02      	cmp	r3, #2
 800a888:	d038      	beq.n	800a8fc <UART_SetConfig+0x12fc>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88e:	2b03      	cmp	r3, #3
 800a890:	d032      	beq.n	800a8f8 <UART_SetConfig+0x12f8>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b04      	cmp	r3, #4
 800a898:	d02c      	beq.n	800a8f4 <UART_SetConfig+0x12f4>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89e:	2b05      	cmp	r3, #5
 800a8a0:	d026      	beq.n	800a8f0 <UART_SetConfig+0x12f0>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	2b06      	cmp	r3, #6
 800a8a8:	d020      	beq.n	800a8ec <UART_SetConfig+0x12ec>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	2b07      	cmp	r3, #7
 800a8b0:	d01a      	beq.n	800a8e8 <UART_SetConfig+0x12e8>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b6:	2b08      	cmp	r3, #8
 800a8b8:	d014      	beq.n	800a8e4 <UART_SetConfig+0x12e4>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	2b09      	cmp	r3, #9
 800a8c0:	d00e      	beq.n	800a8e0 <UART_SetConfig+0x12e0>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2b0a      	cmp	r3, #10
 800a8c8:	d008      	beq.n	800a8dc <UART_SetConfig+0x12dc>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2b0b      	cmp	r3, #11
 800a8d0:	d102      	bne.n	800a8d8 <UART_SetConfig+0x12d8>
 800a8d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8d6:	e016      	b.n	800a906 <UART_SetConfig+0x1306>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e014      	b.n	800a906 <UART_SetConfig+0x1306>
 800a8dc:	2380      	movs	r3, #128	; 0x80
 800a8de:	e012      	b.n	800a906 <UART_SetConfig+0x1306>
 800a8e0:	2340      	movs	r3, #64	; 0x40
 800a8e2:	e010      	b.n	800a906 <UART_SetConfig+0x1306>
 800a8e4:	2320      	movs	r3, #32
 800a8e6:	e00e      	b.n	800a906 <UART_SetConfig+0x1306>
 800a8e8:	2310      	movs	r3, #16
 800a8ea:	e00c      	b.n	800a906 <UART_SetConfig+0x1306>
 800a8ec:	230c      	movs	r3, #12
 800a8ee:	e00a      	b.n	800a906 <UART_SetConfig+0x1306>
 800a8f0:	230a      	movs	r3, #10
 800a8f2:	e008      	b.n	800a906 <UART_SetConfig+0x1306>
 800a8f4:	2308      	movs	r3, #8
 800a8f6:	e006      	b.n	800a906 <UART_SetConfig+0x1306>
 800a8f8:	2306      	movs	r3, #6
 800a8fa:	e004      	b.n	800a906 <UART_SetConfig+0x1306>
 800a8fc:	2304      	movs	r3, #4
 800a8fe:	e002      	b.n	800a906 <UART_SetConfig+0x1306>
 800a900:	2302      	movs	r3, #2
 800a902:	e000      	b.n	800a906 <UART_SetConfig+0x1306>
 800a904:	2301      	movs	r3, #1
 800a906:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a90a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	085b      	lsrs	r3, r3, #1
 800a914:	441a      	add	r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a91e:	b29b      	uxth	r3, r3
 800a920:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a922:	e003      	b.n	800a92c <UART_SetConfig+0x132c>
      default:
        ret = HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800a92a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	2b0f      	cmp	r3, #15
 800a930:	d908      	bls.n	800a944 <UART_SetConfig+0x1344>
 800a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a938:	d204      	bcs.n	800a944 <UART_SetConfig+0x1344>
    {
      huart->Instance->BRR = usartdiv;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a940:	60da      	str	r2, [r3, #12]
 800a942:	e002      	b.n	800a94a <UART_SetConfig+0x134a>
    }
    else
    {
      ret = HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2201      	movs	r2, #1
 800a956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3730      	adds	r7, #48	; 0x30
 800a96e:	46bd      	mov	sp, r7
 800a970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a974:	00f42400 	.word	0x00f42400

0800a978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a984:	f003 0301 	and.w	r3, r3, #1
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00a      	beq.n	800a9a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a6:	f003 0302 	and.w	r3, r3, #2
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00a      	beq.n	800a9c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	430a      	orrs	r2, r1
 800a9c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c8:	f003 0304 	and.w	r3, r3, #4
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00a      	beq.n	800a9e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	430a      	orrs	r2, r1
 800a9e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ea:	f003 0308 	and.w	r3, r3, #8
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00a      	beq.n	800aa08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	430a      	orrs	r2, r1
 800aa06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa0c:	f003 0310 	and.w	r3, r3, #16
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00a      	beq.n	800aa2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	430a      	orrs	r2, r1
 800aa28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2e:	f003 0320 	and.w	r3, r3, #32
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00a      	beq.n	800aa4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	430a      	orrs	r2, r1
 800aa4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d01a      	beq.n	800aa8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	430a      	orrs	r2, r1
 800aa6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa76:	d10a      	bne.n	800aa8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00a      	beq.n	800aab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	430a      	orrs	r2, r1
 800aaae:	605a      	str	r2, [r3, #4]
  }
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b086      	sub	sp, #24
 800aac0:	af02      	add	r7, sp, #8
 800aac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aacc:	f7f9 fd20 	bl	8004510 <HAL_GetTick>
 800aad0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 0308 	and.w	r3, r3, #8
 800aadc:	2b08      	cmp	r3, #8
 800aade:	d10e      	bne.n	800aafe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f82c 	bl	800ab4c <UART_WaitOnFlagUntilTimeout>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d001      	beq.n	800aafe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e022      	b.n	800ab44 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 0304 	and.w	r3, r3, #4
 800ab08:	2b04      	cmp	r3, #4
 800ab0a:	d10e      	bne.n	800ab2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 f816 	bl	800ab4c <UART_WaitOnFlagUntilTimeout>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d001      	beq.n	800ab2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab26:	2303      	movs	r3, #3
 800ab28:	e00c      	b.n	800ab44 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2220      	movs	r2, #32
 800ab36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	4613      	mov	r3, r2
 800ab5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab5c:	e02c      	b.n	800abb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab64:	d028      	beq.n	800abb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab66:	f7f9 fcd3 	bl	8004510 <HAL_GetTick>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	69ba      	ldr	r2, [r7, #24]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d302      	bcc.n	800ab7c <UART_WaitOnFlagUntilTimeout+0x30>
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d11d      	bne.n	800abb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab8a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689a      	ldr	r2, [r3, #8]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f022 0201 	bic.w	r2, r2, #1
 800ab9a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2220      	movs	r2, #32
 800aba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2220      	movs	r2, #32
 800aba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e00f      	b.n	800abd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	69da      	ldr	r2, [r3, #28]
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	4013      	ands	r3, r2
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	bf0c      	ite	eq
 800abc8:	2301      	moveq	r3, #1
 800abca:	2300      	movne	r3, #0
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	461a      	mov	r2, r3
 800abd0:	79fb      	ldrb	r3, [r7, #7]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d0c3      	beq.n	800ab5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800abf6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	689a      	ldr	r2, [r3, #8]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800ac06:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2220      	movs	r2, #32
 800ac0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac32:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	6812      	ldr	r2, [r2, #0]
 800ac3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac42:	f023 0301 	bic.w	r3, r3, #1
 800ac46:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2220      	movs	r2, #32
 800ac4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800ac56:	bf00      	nop
 800ac58:	370c      	adds	r7, #12
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b084      	sub	sp, #16
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 0320 	and.w	r3, r3, #32
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d114      	bne.n	800aca8 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	689a      	ldr	r2, [r3, #8]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac94:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aca4:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aca6:	e002      	b.n	800acae <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f7f6 fb17 	bl	80012dc <HAL_UART_TxCpltCallback>
}
 800acae:	bf00      	nop
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b084      	sub	sp, #16
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f7fe fc7d 	bl	80095c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acca:	bf00      	nop
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b084      	sub	sp, #16
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acde:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 0320 	and.w	r3, r3, #32
 800acea:	2b00      	cmp	r3, #0
 800acec:	d11f      	bne.n	800ad2e <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad04:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f022 0201 	bic.w	r2, r2, #1
 800ad14:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	689a      	ldr	r2, [r3, #8]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad24:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2220      	movs	r2, #32
 800ad2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f7f6 fb62 	bl	80013f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad34:	bf00      	nop
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad48:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f7fe fc44 	bl	80095d8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad50:	bf00      	nop
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b086      	sub	sp, #24
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad6c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad74:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad80:	2b80      	cmp	r3, #128	; 0x80
 800ad82:	d109      	bne.n	800ad98 <UART_DMAError+0x40>
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	2b21      	cmp	r3, #33	; 0x21
 800ad88:	d106      	bne.n	800ad98 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ad92:	6978      	ldr	r0, [r7, #20]
 800ad94:	f7ff ff24 	bl	800abe0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada2:	2b40      	cmp	r3, #64	; 0x40
 800ada4:	d109      	bne.n	800adba <UART_DMAError+0x62>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2b22      	cmp	r3, #34	; 0x22
 800adaa:	d106      	bne.n	800adba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	2200      	movs	r2, #0
 800adb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800adb4:	6978      	ldr	r0, [r7, #20]
 800adb6:	f7ff ff31 	bl	800ac1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc0:	f043 0210 	orr.w	r2, r3, #16
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adca:	6978      	ldr	r0, [r7, #20]
 800adcc:	f7fe fc0e 	bl	80095ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800add0:	bf00      	nop
 800add2:	3718      	adds	r7, #24
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f7fe fbf8 	bl	80095ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adfc:	bf00      	nop
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae1a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2220      	movs	r2, #32
 800ae20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f7f6 fa56 	bl	80012dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae30:	bf00      	nop
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae40:	bf00      	nop
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae54:	bf00      	nop
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae68:	bf00      	nop
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d101      	bne.n	800ae8a <HAL_UARTEx_DisableFifoMode+0x16>
 800ae86:	2302      	movs	r3, #2
 800ae88:	e027      	b.n	800aeda <HAL_UARTEx_DisableFifoMode+0x66>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2224      	movs	r2, #36	; 0x24
 800ae96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f022 0201 	bic.w	r2, r2, #1
 800aeb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aeb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2220      	movs	r2, #32
 800aecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aed8:	2300      	movs	r3, #0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3714      	adds	r7, #20
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr

0800aee6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d101      	bne.n	800aefe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aefa:	2302      	movs	r3, #2
 800aefc:	e02d      	b.n	800af5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2201      	movs	r2, #1
 800af02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2224      	movs	r2, #36	; 0x24
 800af0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f022 0201 	bic.w	r2, r2, #1
 800af24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	683a      	ldr	r2, [r7, #0]
 800af36:	430a      	orrs	r2, r1
 800af38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f850 	bl	800afe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2220      	movs	r2, #32
 800af4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b084      	sub	sp, #16
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800af72:	2b01      	cmp	r3, #1
 800af74:	d101      	bne.n	800af7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af76:	2302      	movs	r3, #2
 800af78:	e02d      	b.n	800afd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2201      	movs	r2, #1
 800af7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2224      	movs	r2, #36	; 0x24
 800af86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f022 0201 	bic.w	r2, r2, #1
 800afa0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	430a      	orrs	r2, r1
 800afb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f812 	bl	800afe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2220      	movs	r2, #32
 800afc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
	...

0800afe0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b089      	sub	sp, #36	; 0x24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800afe8:	4a2f      	ldr	r2, [pc, #188]	; (800b0a8 <UARTEx_SetNbDataToProcess+0xc8>)
 800afea:	f107 0314 	add.w	r3, r7, #20
 800afee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aff2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800aff6:	4a2d      	ldr	r2, [pc, #180]	; (800b0ac <UARTEx_SetNbDataToProcess+0xcc>)
 800aff8:	f107 030c 	add.w	r3, r7, #12
 800affc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b000:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d108      	bne.n	800b01e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b01c:	e03d      	b.n	800b09a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b01e:	2308      	movs	r3, #8
 800b020:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b022:	2308      	movs	r3, #8
 800b024:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	0e5b      	lsrs	r3, r3, #25
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	f003 0307 	and.w	r3, r3, #7
 800b034:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	0f5b      	lsrs	r3, r3, #29
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	f003 0307 	and.w	r3, r3, #7
 800b044:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b046:	7fbb      	ldrb	r3, [r7, #30]
 800b048:	7f3a      	ldrb	r2, [r7, #28]
 800b04a:	f107 0120 	add.w	r1, r7, #32
 800b04e:	440a      	add	r2, r1
 800b050:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b054:	fb02 f303 	mul.w	r3, r2, r3
 800b058:	7f3a      	ldrb	r2, [r7, #28]
 800b05a:	f107 0120 	add.w	r1, r7, #32
 800b05e:	440a      	add	r2, r1
 800b060:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b064:	fb93 f3f2 	sdiv	r3, r3, r2
 800b068:	b29a      	uxth	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b070:	7ffb      	ldrb	r3, [r7, #31]
 800b072:	7f7a      	ldrb	r2, [r7, #29]
 800b074:	f107 0120 	add.w	r1, r7, #32
 800b078:	440a      	add	r2, r1
 800b07a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b07e:	fb02 f303 	mul.w	r3, r2, r3
 800b082:	7f7a      	ldrb	r2, [r7, #29]
 800b084:	f107 0120 	add.w	r1, r7, #32
 800b088:	440a      	add	r2, r1
 800b08a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b08e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b092:	b29a      	uxth	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b09a:	bf00      	nop
 800b09c:	3724      	adds	r7, #36	; 0x24
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	0800bb24 	.word	0x0800bb24
 800b0ac:	0800bb2c 	.word	0x0800bb2c

0800b0b0 <__errno>:
 800b0b0:	4b01      	ldr	r3, [pc, #4]	; (800b0b8 <__errno+0x8>)
 800b0b2:	6818      	ldr	r0, [r3, #0]
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	2000000c 	.word	0x2000000c

0800b0bc <__libc_init_array>:
 800b0bc:	b570      	push	{r4, r5, r6, lr}
 800b0be:	4d0d      	ldr	r5, [pc, #52]	; (800b0f4 <__libc_init_array+0x38>)
 800b0c0:	4c0d      	ldr	r4, [pc, #52]	; (800b0f8 <__libc_init_array+0x3c>)
 800b0c2:	1b64      	subs	r4, r4, r5
 800b0c4:	10a4      	asrs	r4, r4, #2
 800b0c6:	2600      	movs	r6, #0
 800b0c8:	42a6      	cmp	r6, r4
 800b0ca:	d109      	bne.n	800b0e0 <__libc_init_array+0x24>
 800b0cc:	4d0b      	ldr	r5, [pc, #44]	; (800b0fc <__libc_init_array+0x40>)
 800b0ce:	4c0c      	ldr	r4, [pc, #48]	; (800b100 <__libc_init_array+0x44>)
 800b0d0:	f000 fcde 	bl	800ba90 <_init>
 800b0d4:	1b64      	subs	r4, r4, r5
 800b0d6:	10a4      	asrs	r4, r4, #2
 800b0d8:	2600      	movs	r6, #0
 800b0da:	42a6      	cmp	r6, r4
 800b0dc:	d105      	bne.n	800b0ea <__libc_init_array+0x2e>
 800b0de:	bd70      	pop	{r4, r5, r6, pc}
 800b0e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0e4:	4798      	blx	r3
 800b0e6:	3601      	adds	r6, #1
 800b0e8:	e7ee      	b.n	800b0c8 <__libc_init_array+0xc>
 800b0ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ee:	4798      	blx	r3
 800b0f0:	3601      	adds	r6, #1
 800b0f2:	e7f2      	b.n	800b0da <__libc_init_array+0x1e>
 800b0f4:	0800bc7c 	.word	0x0800bc7c
 800b0f8:	0800bc7c 	.word	0x0800bc7c
 800b0fc:	0800bc7c 	.word	0x0800bc7c
 800b100:	0800bc80 	.word	0x0800bc80

0800b104 <memcmp>:
 800b104:	b530      	push	{r4, r5, lr}
 800b106:	3901      	subs	r1, #1
 800b108:	2400      	movs	r4, #0
 800b10a:	42a2      	cmp	r2, r4
 800b10c:	d101      	bne.n	800b112 <memcmp+0xe>
 800b10e:	2000      	movs	r0, #0
 800b110:	e005      	b.n	800b11e <memcmp+0x1a>
 800b112:	5d03      	ldrb	r3, [r0, r4]
 800b114:	3401      	adds	r4, #1
 800b116:	5d0d      	ldrb	r5, [r1, r4]
 800b118:	42ab      	cmp	r3, r5
 800b11a:	d0f6      	beq.n	800b10a <memcmp+0x6>
 800b11c:	1b58      	subs	r0, r3, r5
 800b11e:	bd30      	pop	{r4, r5, pc}

0800b120 <memcpy>:
 800b120:	440a      	add	r2, r1
 800b122:	4291      	cmp	r1, r2
 800b124:	f100 33ff 	add.w	r3, r0, #4294967295
 800b128:	d100      	bne.n	800b12c <memcpy+0xc>
 800b12a:	4770      	bx	lr
 800b12c:	b510      	push	{r4, lr}
 800b12e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b132:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b136:	4291      	cmp	r1, r2
 800b138:	d1f9      	bne.n	800b12e <memcpy+0xe>
 800b13a:	bd10      	pop	{r4, pc}

0800b13c <memset>:
 800b13c:	4402      	add	r2, r0
 800b13e:	4603      	mov	r3, r0
 800b140:	4293      	cmp	r3, r2
 800b142:	d100      	bne.n	800b146 <memset+0xa>
 800b144:	4770      	bx	lr
 800b146:	f803 1b01 	strb.w	r1, [r3], #1
 800b14a:	e7f9      	b.n	800b140 <memset+0x4>

0800b14c <siprintf>:
 800b14c:	b40e      	push	{r1, r2, r3}
 800b14e:	b500      	push	{lr}
 800b150:	b09c      	sub	sp, #112	; 0x70
 800b152:	ab1d      	add	r3, sp, #116	; 0x74
 800b154:	9002      	str	r0, [sp, #8]
 800b156:	9006      	str	r0, [sp, #24]
 800b158:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b15c:	4809      	ldr	r0, [pc, #36]	; (800b184 <siprintf+0x38>)
 800b15e:	9107      	str	r1, [sp, #28]
 800b160:	9104      	str	r1, [sp, #16]
 800b162:	4909      	ldr	r1, [pc, #36]	; (800b188 <siprintf+0x3c>)
 800b164:	f853 2b04 	ldr.w	r2, [r3], #4
 800b168:	9105      	str	r1, [sp, #20]
 800b16a:	6800      	ldr	r0, [r0, #0]
 800b16c:	9301      	str	r3, [sp, #4]
 800b16e:	a902      	add	r1, sp, #8
 800b170:	f000 f868 	bl	800b244 <_svfiprintf_r>
 800b174:	9b02      	ldr	r3, [sp, #8]
 800b176:	2200      	movs	r2, #0
 800b178:	701a      	strb	r2, [r3, #0]
 800b17a:	b01c      	add	sp, #112	; 0x70
 800b17c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b180:	b003      	add	sp, #12
 800b182:	4770      	bx	lr
 800b184:	2000000c 	.word	0x2000000c
 800b188:	ffff0208 	.word	0xffff0208

0800b18c <__ssputs_r>:
 800b18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b190:	688e      	ldr	r6, [r1, #8]
 800b192:	429e      	cmp	r6, r3
 800b194:	4682      	mov	sl, r0
 800b196:	460c      	mov	r4, r1
 800b198:	4690      	mov	r8, r2
 800b19a:	461f      	mov	r7, r3
 800b19c:	d838      	bhi.n	800b210 <__ssputs_r+0x84>
 800b19e:	898a      	ldrh	r2, [r1, #12]
 800b1a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1a4:	d032      	beq.n	800b20c <__ssputs_r+0x80>
 800b1a6:	6825      	ldr	r5, [r4, #0]
 800b1a8:	6909      	ldr	r1, [r1, #16]
 800b1aa:	eba5 0901 	sub.w	r9, r5, r1
 800b1ae:	6965      	ldr	r5, [r4, #20]
 800b1b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	444b      	add	r3, r9
 800b1bc:	106d      	asrs	r5, r5, #1
 800b1be:	429d      	cmp	r5, r3
 800b1c0:	bf38      	it	cc
 800b1c2:	461d      	movcc	r5, r3
 800b1c4:	0553      	lsls	r3, r2, #21
 800b1c6:	d531      	bpl.n	800b22c <__ssputs_r+0xa0>
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	f000 fb39 	bl	800b840 <_malloc_r>
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	b950      	cbnz	r0, 800b1e8 <__ssputs_r+0x5c>
 800b1d2:	230c      	movs	r3, #12
 800b1d4:	f8ca 3000 	str.w	r3, [sl]
 800b1d8:	89a3      	ldrh	r3, [r4, #12]
 800b1da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1de:	81a3      	strh	r3, [r4, #12]
 800b1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e8:	6921      	ldr	r1, [r4, #16]
 800b1ea:	464a      	mov	r2, r9
 800b1ec:	f7ff ff98 	bl	800b120 <memcpy>
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1fa:	81a3      	strh	r3, [r4, #12]
 800b1fc:	6126      	str	r6, [r4, #16]
 800b1fe:	6165      	str	r5, [r4, #20]
 800b200:	444e      	add	r6, r9
 800b202:	eba5 0509 	sub.w	r5, r5, r9
 800b206:	6026      	str	r6, [r4, #0]
 800b208:	60a5      	str	r5, [r4, #8]
 800b20a:	463e      	mov	r6, r7
 800b20c:	42be      	cmp	r6, r7
 800b20e:	d900      	bls.n	800b212 <__ssputs_r+0x86>
 800b210:	463e      	mov	r6, r7
 800b212:	4632      	mov	r2, r6
 800b214:	6820      	ldr	r0, [r4, #0]
 800b216:	4641      	mov	r1, r8
 800b218:	f000 faa8 	bl	800b76c <memmove>
 800b21c:	68a3      	ldr	r3, [r4, #8]
 800b21e:	6822      	ldr	r2, [r4, #0]
 800b220:	1b9b      	subs	r3, r3, r6
 800b222:	4432      	add	r2, r6
 800b224:	60a3      	str	r3, [r4, #8]
 800b226:	6022      	str	r2, [r4, #0]
 800b228:	2000      	movs	r0, #0
 800b22a:	e7db      	b.n	800b1e4 <__ssputs_r+0x58>
 800b22c:	462a      	mov	r2, r5
 800b22e:	f000 fb61 	bl	800b8f4 <_realloc_r>
 800b232:	4606      	mov	r6, r0
 800b234:	2800      	cmp	r0, #0
 800b236:	d1e1      	bne.n	800b1fc <__ssputs_r+0x70>
 800b238:	6921      	ldr	r1, [r4, #16]
 800b23a:	4650      	mov	r0, sl
 800b23c:	f000 fab0 	bl	800b7a0 <_free_r>
 800b240:	e7c7      	b.n	800b1d2 <__ssputs_r+0x46>
	...

0800b244 <_svfiprintf_r>:
 800b244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b248:	4698      	mov	r8, r3
 800b24a:	898b      	ldrh	r3, [r1, #12]
 800b24c:	061b      	lsls	r3, r3, #24
 800b24e:	b09d      	sub	sp, #116	; 0x74
 800b250:	4607      	mov	r7, r0
 800b252:	460d      	mov	r5, r1
 800b254:	4614      	mov	r4, r2
 800b256:	d50e      	bpl.n	800b276 <_svfiprintf_r+0x32>
 800b258:	690b      	ldr	r3, [r1, #16]
 800b25a:	b963      	cbnz	r3, 800b276 <_svfiprintf_r+0x32>
 800b25c:	2140      	movs	r1, #64	; 0x40
 800b25e:	f000 faef 	bl	800b840 <_malloc_r>
 800b262:	6028      	str	r0, [r5, #0]
 800b264:	6128      	str	r0, [r5, #16]
 800b266:	b920      	cbnz	r0, 800b272 <_svfiprintf_r+0x2e>
 800b268:	230c      	movs	r3, #12
 800b26a:	603b      	str	r3, [r7, #0]
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295
 800b270:	e0d1      	b.n	800b416 <_svfiprintf_r+0x1d2>
 800b272:	2340      	movs	r3, #64	; 0x40
 800b274:	616b      	str	r3, [r5, #20]
 800b276:	2300      	movs	r3, #0
 800b278:	9309      	str	r3, [sp, #36]	; 0x24
 800b27a:	2320      	movs	r3, #32
 800b27c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b280:	f8cd 800c 	str.w	r8, [sp, #12]
 800b284:	2330      	movs	r3, #48	; 0x30
 800b286:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b430 <_svfiprintf_r+0x1ec>
 800b28a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b28e:	f04f 0901 	mov.w	r9, #1
 800b292:	4623      	mov	r3, r4
 800b294:	469a      	mov	sl, r3
 800b296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b29a:	b10a      	cbz	r2, 800b2a0 <_svfiprintf_r+0x5c>
 800b29c:	2a25      	cmp	r2, #37	; 0x25
 800b29e:	d1f9      	bne.n	800b294 <_svfiprintf_r+0x50>
 800b2a0:	ebba 0b04 	subs.w	fp, sl, r4
 800b2a4:	d00b      	beq.n	800b2be <_svfiprintf_r+0x7a>
 800b2a6:	465b      	mov	r3, fp
 800b2a8:	4622      	mov	r2, r4
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	4638      	mov	r0, r7
 800b2ae:	f7ff ff6d 	bl	800b18c <__ssputs_r>
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	f000 80aa 	beq.w	800b40c <_svfiprintf_r+0x1c8>
 800b2b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2ba:	445a      	add	r2, fp
 800b2bc:	9209      	str	r2, [sp, #36]	; 0x24
 800b2be:	f89a 3000 	ldrb.w	r3, [sl]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	f000 80a2 	beq.w	800b40c <_svfiprintf_r+0x1c8>
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2d2:	f10a 0a01 	add.w	sl, sl, #1
 800b2d6:	9304      	str	r3, [sp, #16]
 800b2d8:	9307      	str	r3, [sp, #28]
 800b2da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2de:	931a      	str	r3, [sp, #104]	; 0x68
 800b2e0:	4654      	mov	r4, sl
 800b2e2:	2205      	movs	r2, #5
 800b2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e8:	4851      	ldr	r0, [pc, #324]	; (800b430 <_svfiprintf_r+0x1ec>)
 800b2ea:	f7f4 ffa1 	bl	8000230 <memchr>
 800b2ee:	9a04      	ldr	r2, [sp, #16]
 800b2f0:	b9d8      	cbnz	r0, 800b32a <_svfiprintf_r+0xe6>
 800b2f2:	06d0      	lsls	r0, r2, #27
 800b2f4:	bf44      	itt	mi
 800b2f6:	2320      	movmi	r3, #32
 800b2f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2fc:	0711      	lsls	r1, r2, #28
 800b2fe:	bf44      	itt	mi
 800b300:	232b      	movmi	r3, #43	; 0x2b
 800b302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b306:	f89a 3000 	ldrb.w	r3, [sl]
 800b30a:	2b2a      	cmp	r3, #42	; 0x2a
 800b30c:	d015      	beq.n	800b33a <_svfiprintf_r+0xf6>
 800b30e:	9a07      	ldr	r2, [sp, #28]
 800b310:	4654      	mov	r4, sl
 800b312:	2000      	movs	r0, #0
 800b314:	f04f 0c0a 	mov.w	ip, #10
 800b318:	4621      	mov	r1, r4
 800b31a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b31e:	3b30      	subs	r3, #48	; 0x30
 800b320:	2b09      	cmp	r3, #9
 800b322:	d94e      	bls.n	800b3c2 <_svfiprintf_r+0x17e>
 800b324:	b1b0      	cbz	r0, 800b354 <_svfiprintf_r+0x110>
 800b326:	9207      	str	r2, [sp, #28]
 800b328:	e014      	b.n	800b354 <_svfiprintf_r+0x110>
 800b32a:	eba0 0308 	sub.w	r3, r0, r8
 800b32e:	fa09 f303 	lsl.w	r3, r9, r3
 800b332:	4313      	orrs	r3, r2
 800b334:	9304      	str	r3, [sp, #16]
 800b336:	46a2      	mov	sl, r4
 800b338:	e7d2      	b.n	800b2e0 <_svfiprintf_r+0x9c>
 800b33a:	9b03      	ldr	r3, [sp, #12]
 800b33c:	1d19      	adds	r1, r3, #4
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	9103      	str	r1, [sp, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	bfbb      	ittet	lt
 800b346:	425b      	neglt	r3, r3
 800b348:	f042 0202 	orrlt.w	r2, r2, #2
 800b34c:	9307      	strge	r3, [sp, #28]
 800b34e:	9307      	strlt	r3, [sp, #28]
 800b350:	bfb8      	it	lt
 800b352:	9204      	strlt	r2, [sp, #16]
 800b354:	7823      	ldrb	r3, [r4, #0]
 800b356:	2b2e      	cmp	r3, #46	; 0x2e
 800b358:	d10c      	bne.n	800b374 <_svfiprintf_r+0x130>
 800b35a:	7863      	ldrb	r3, [r4, #1]
 800b35c:	2b2a      	cmp	r3, #42	; 0x2a
 800b35e:	d135      	bne.n	800b3cc <_svfiprintf_r+0x188>
 800b360:	9b03      	ldr	r3, [sp, #12]
 800b362:	1d1a      	adds	r2, r3, #4
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	9203      	str	r2, [sp, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	bfb8      	it	lt
 800b36c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b370:	3402      	adds	r4, #2
 800b372:	9305      	str	r3, [sp, #20]
 800b374:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b440 <_svfiprintf_r+0x1fc>
 800b378:	7821      	ldrb	r1, [r4, #0]
 800b37a:	2203      	movs	r2, #3
 800b37c:	4650      	mov	r0, sl
 800b37e:	f7f4 ff57 	bl	8000230 <memchr>
 800b382:	b140      	cbz	r0, 800b396 <_svfiprintf_r+0x152>
 800b384:	2340      	movs	r3, #64	; 0x40
 800b386:	eba0 000a 	sub.w	r0, r0, sl
 800b38a:	fa03 f000 	lsl.w	r0, r3, r0
 800b38e:	9b04      	ldr	r3, [sp, #16]
 800b390:	4303      	orrs	r3, r0
 800b392:	3401      	adds	r4, #1
 800b394:	9304      	str	r3, [sp, #16]
 800b396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b39a:	4826      	ldr	r0, [pc, #152]	; (800b434 <_svfiprintf_r+0x1f0>)
 800b39c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3a0:	2206      	movs	r2, #6
 800b3a2:	f7f4 ff45 	bl	8000230 <memchr>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d038      	beq.n	800b41c <_svfiprintf_r+0x1d8>
 800b3aa:	4b23      	ldr	r3, [pc, #140]	; (800b438 <_svfiprintf_r+0x1f4>)
 800b3ac:	bb1b      	cbnz	r3, 800b3f6 <_svfiprintf_r+0x1b2>
 800b3ae:	9b03      	ldr	r3, [sp, #12]
 800b3b0:	3307      	adds	r3, #7
 800b3b2:	f023 0307 	bic.w	r3, r3, #7
 800b3b6:	3308      	adds	r3, #8
 800b3b8:	9303      	str	r3, [sp, #12]
 800b3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3bc:	4433      	add	r3, r6
 800b3be:	9309      	str	r3, [sp, #36]	; 0x24
 800b3c0:	e767      	b.n	800b292 <_svfiprintf_r+0x4e>
 800b3c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	2001      	movs	r0, #1
 800b3ca:	e7a5      	b.n	800b318 <_svfiprintf_r+0xd4>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	3401      	adds	r4, #1
 800b3d0:	9305      	str	r3, [sp, #20]
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	f04f 0c0a 	mov.w	ip, #10
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3de:	3a30      	subs	r2, #48	; 0x30
 800b3e0:	2a09      	cmp	r2, #9
 800b3e2:	d903      	bls.n	800b3ec <_svfiprintf_r+0x1a8>
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d0c5      	beq.n	800b374 <_svfiprintf_r+0x130>
 800b3e8:	9105      	str	r1, [sp, #20]
 800b3ea:	e7c3      	b.n	800b374 <_svfiprintf_r+0x130>
 800b3ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e7f0      	b.n	800b3d8 <_svfiprintf_r+0x194>
 800b3f6:	ab03      	add	r3, sp, #12
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	462a      	mov	r2, r5
 800b3fc:	4b0f      	ldr	r3, [pc, #60]	; (800b43c <_svfiprintf_r+0x1f8>)
 800b3fe:	a904      	add	r1, sp, #16
 800b400:	4638      	mov	r0, r7
 800b402:	f3af 8000 	nop.w
 800b406:	1c42      	adds	r2, r0, #1
 800b408:	4606      	mov	r6, r0
 800b40a:	d1d6      	bne.n	800b3ba <_svfiprintf_r+0x176>
 800b40c:	89ab      	ldrh	r3, [r5, #12]
 800b40e:	065b      	lsls	r3, r3, #25
 800b410:	f53f af2c 	bmi.w	800b26c <_svfiprintf_r+0x28>
 800b414:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b416:	b01d      	add	sp, #116	; 0x74
 800b418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b41c:	ab03      	add	r3, sp, #12
 800b41e:	9300      	str	r3, [sp, #0]
 800b420:	462a      	mov	r2, r5
 800b422:	4b06      	ldr	r3, [pc, #24]	; (800b43c <_svfiprintf_r+0x1f8>)
 800b424:	a904      	add	r1, sp, #16
 800b426:	4638      	mov	r0, r7
 800b428:	f000 f87a 	bl	800b520 <_printf_i>
 800b42c:	e7eb      	b.n	800b406 <_svfiprintf_r+0x1c2>
 800b42e:	bf00      	nop
 800b430:	0800bc40 	.word	0x0800bc40
 800b434:	0800bc4a 	.word	0x0800bc4a
 800b438:	00000000 	.word	0x00000000
 800b43c:	0800b18d 	.word	0x0800b18d
 800b440:	0800bc46 	.word	0x0800bc46

0800b444 <_printf_common>:
 800b444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b448:	4616      	mov	r6, r2
 800b44a:	4699      	mov	r9, r3
 800b44c:	688a      	ldr	r2, [r1, #8]
 800b44e:	690b      	ldr	r3, [r1, #16]
 800b450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b454:	4293      	cmp	r3, r2
 800b456:	bfb8      	it	lt
 800b458:	4613      	movlt	r3, r2
 800b45a:	6033      	str	r3, [r6, #0]
 800b45c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b460:	4607      	mov	r7, r0
 800b462:	460c      	mov	r4, r1
 800b464:	b10a      	cbz	r2, 800b46a <_printf_common+0x26>
 800b466:	3301      	adds	r3, #1
 800b468:	6033      	str	r3, [r6, #0]
 800b46a:	6823      	ldr	r3, [r4, #0]
 800b46c:	0699      	lsls	r1, r3, #26
 800b46e:	bf42      	ittt	mi
 800b470:	6833      	ldrmi	r3, [r6, #0]
 800b472:	3302      	addmi	r3, #2
 800b474:	6033      	strmi	r3, [r6, #0]
 800b476:	6825      	ldr	r5, [r4, #0]
 800b478:	f015 0506 	ands.w	r5, r5, #6
 800b47c:	d106      	bne.n	800b48c <_printf_common+0x48>
 800b47e:	f104 0a19 	add.w	sl, r4, #25
 800b482:	68e3      	ldr	r3, [r4, #12]
 800b484:	6832      	ldr	r2, [r6, #0]
 800b486:	1a9b      	subs	r3, r3, r2
 800b488:	42ab      	cmp	r3, r5
 800b48a:	dc26      	bgt.n	800b4da <_printf_common+0x96>
 800b48c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b490:	1e13      	subs	r3, r2, #0
 800b492:	6822      	ldr	r2, [r4, #0]
 800b494:	bf18      	it	ne
 800b496:	2301      	movne	r3, #1
 800b498:	0692      	lsls	r2, r2, #26
 800b49a:	d42b      	bmi.n	800b4f4 <_printf_common+0xb0>
 800b49c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	4638      	mov	r0, r7
 800b4a4:	47c0      	blx	r8
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	d01e      	beq.n	800b4e8 <_printf_common+0xa4>
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	68e5      	ldr	r5, [r4, #12]
 800b4ae:	6832      	ldr	r2, [r6, #0]
 800b4b0:	f003 0306 	and.w	r3, r3, #6
 800b4b4:	2b04      	cmp	r3, #4
 800b4b6:	bf08      	it	eq
 800b4b8:	1aad      	subeq	r5, r5, r2
 800b4ba:	68a3      	ldr	r3, [r4, #8]
 800b4bc:	6922      	ldr	r2, [r4, #16]
 800b4be:	bf0c      	ite	eq
 800b4c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4c4:	2500      	movne	r5, #0
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	bfc4      	itt	gt
 800b4ca:	1a9b      	subgt	r3, r3, r2
 800b4cc:	18ed      	addgt	r5, r5, r3
 800b4ce:	2600      	movs	r6, #0
 800b4d0:	341a      	adds	r4, #26
 800b4d2:	42b5      	cmp	r5, r6
 800b4d4:	d11a      	bne.n	800b50c <_printf_common+0xc8>
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	e008      	b.n	800b4ec <_printf_common+0xa8>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	4652      	mov	r2, sl
 800b4de:	4649      	mov	r1, r9
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	47c0      	blx	r8
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d103      	bne.n	800b4f0 <_printf_common+0xac>
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	e7c6      	b.n	800b482 <_printf_common+0x3e>
 800b4f4:	18e1      	adds	r1, r4, r3
 800b4f6:	1c5a      	adds	r2, r3, #1
 800b4f8:	2030      	movs	r0, #48	; 0x30
 800b4fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4fe:	4422      	add	r2, r4
 800b500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b508:	3302      	adds	r3, #2
 800b50a:	e7c7      	b.n	800b49c <_printf_common+0x58>
 800b50c:	2301      	movs	r3, #1
 800b50e:	4622      	mov	r2, r4
 800b510:	4649      	mov	r1, r9
 800b512:	4638      	mov	r0, r7
 800b514:	47c0      	blx	r8
 800b516:	3001      	adds	r0, #1
 800b518:	d0e6      	beq.n	800b4e8 <_printf_common+0xa4>
 800b51a:	3601      	adds	r6, #1
 800b51c:	e7d9      	b.n	800b4d2 <_printf_common+0x8e>
	...

0800b520 <_printf_i>:
 800b520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b524:	460c      	mov	r4, r1
 800b526:	4691      	mov	r9, r2
 800b528:	7e27      	ldrb	r7, [r4, #24]
 800b52a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b52c:	2f78      	cmp	r7, #120	; 0x78
 800b52e:	4680      	mov	r8, r0
 800b530:	469a      	mov	sl, r3
 800b532:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b536:	d807      	bhi.n	800b548 <_printf_i+0x28>
 800b538:	2f62      	cmp	r7, #98	; 0x62
 800b53a:	d80a      	bhi.n	800b552 <_printf_i+0x32>
 800b53c:	2f00      	cmp	r7, #0
 800b53e:	f000 80d8 	beq.w	800b6f2 <_printf_i+0x1d2>
 800b542:	2f58      	cmp	r7, #88	; 0x58
 800b544:	f000 80a3 	beq.w	800b68e <_printf_i+0x16e>
 800b548:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b54c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b550:	e03a      	b.n	800b5c8 <_printf_i+0xa8>
 800b552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b556:	2b15      	cmp	r3, #21
 800b558:	d8f6      	bhi.n	800b548 <_printf_i+0x28>
 800b55a:	a001      	add	r0, pc, #4	; (adr r0, 800b560 <_printf_i+0x40>)
 800b55c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b560:	0800b5b9 	.word	0x0800b5b9
 800b564:	0800b5cd 	.word	0x0800b5cd
 800b568:	0800b549 	.word	0x0800b549
 800b56c:	0800b549 	.word	0x0800b549
 800b570:	0800b549 	.word	0x0800b549
 800b574:	0800b549 	.word	0x0800b549
 800b578:	0800b5cd 	.word	0x0800b5cd
 800b57c:	0800b549 	.word	0x0800b549
 800b580:	0800b549 	.word	0x0800b549
 800b584:	0800b549 	.word	0x0800b549
 800b588:	0800b549 	.word	0x0800b549
 800b58c:	0800b6d9 	.word	0x0800b6d9
 800b590:	0800b5fd 	.word	0x0800b5fd
 800b594:	0800b6bb 	.word	0x0800b6bb
 800b598:	0800b549 	.word	0x0800b549
 800b59c:	0800b549 	.word	0x0800b549
 800b5a0:	0800b6fb 	.word	0x0800b6fb
 800b5a4:	0800b549 	.word	0x0800b549
 800b5a8:	0800b5fd 	.word	0x0800b5fd
 800b5ac:	0800b549 	.word	0x0800b549
 800b5b0:	0800b549 	.word	0x0800b549
 800b5b4:	0800b6c3 	.word	0x0800b6c3
 800b5b8:	680b      	ldr	r3, [r1, #0]
 800b5ba:	1d1a      	adds	r2, r3, #4
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	600a      	str	r2, [r1, #0]
 800b5c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e0a3      	b.n	800b714 <_printf_i+0x1f4>
 800b5cc:	6825      	ldr	r5, [r4, #0]
 800b5ce:	6808      	ldr	r0, [r1, #0]
 800b5d0:	062e      	lsls	r6, r5, #24
 800b5d2:	f100 0304 	add.w	r3, r0, #4
 800b5d6:	d50a      	bpl.n	800b5ee <_printf_i+0xce>
 800b5d8:	6805      	ldr	r5, [r0, #0]
 800b5da:	600b      	str	r3, [r1, #0]
 800b5dc:	2d00      	cmp	r5, #0
 800b5de:	da03      	bge.n	800b5e8 <_printf_i+0xc8>
 800b5e0:	232d      	movs	r3, #45	; 0x2d
 800b5e2:	426d      	negs	r5, r5
 800b5e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5e8:	485e      	ldr	r0, [pc, #376]	; (800b764 <_printf_i+0x244>)
 800b5ea:	230a      	movs	r3, #10
 800b5ec:	e019      	b.n	800b622 <_printf_i+0x102>
 800b5ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b5f2:	6805      	ldr	r5, [r0, #0]
 800b5f4:	600b      	str	r3, [r1, #0]
 800b5f6:	bf18      	it	ne
 800b5f8:	b22d      	sxthne	r5, r5
 800b5fa:	e7ef      	b.n	800b5dc <_printf_i+0xbc>
 800b5fc:	680b      	ldr	r3, [r1, #0]
 800b5fe:	6825      	ldr	r5, [r4, #0]
 800b600:	1d18      	adds	r0, r3, #4
 800b602:	6008      	str	r0, [r1, #0]
 800b604:	0628      	lsls	r0, r5, #24
 800b606:	d501      	bpl.n	800b60c <_printf_i+0xec>
 800b608:	681d      	ldr	r5, [r3, #0]
 800b60a:	e002      	b.n	800b612 <_printf_i+0xf2>
 800b60c:	0669      	lsls	r1, r5, #25
 800b60e:	d5fb      	bpl.n	800b608 <_printf_i+0xe8>
 800b610:	881d      	ldrh	r5, [r3, #0]
 800b612:	4854      	ldr	r0, [pc, #336]	; (800b764 <_printf_i+0x244>)
 800b614:	2f6f      	cmp	r7, #111	; 0x6f
 800b616:	bf0c      	ite	eq
 800b618:	2308      	moveq	r3, #8
 800b61a:	230a      	movne	r3, #10
 800b61c:	2100      	movs	r1, #0
 800b61e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b622:	6866      	ldr	r6, [r4, #4]
 800b624:	60a6      	str	r6, [r4, #8]
 800b626:	2e00      	cmp	r6, #0
 800b628:	bfa2      	ittt	ge
 800b62a:	6821      	ldrge	r1, [r4, #0]
 800b62c:	f021 0104 	bicge.w	r1, r1, #4
 800b630:	6021      	strge	r1, [r4, #0]
 800b632:	b90d      	cbnz	r5, 800b638 <_printf_i+0x118>
 800b634:	2e00      	cmp	r6, #0
 800b636:	d04d      	beq.n	800b6d4 <_printf_i+0x1b4>
 800b638:	4616      	mov	r6, r2
 800b63a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b63e:	fb03 5711 	mls	r7, r3, r1, r5
 800b642:	5dc7      	ldrb	r7, [r0, r7]
 800b644:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b648:	462f      	mov	r7, r5
 800b64a:	42bb      	cmp	r3, r7
 800b64c:	460d      	mov	r5, r1
 800b64e:	d9f4      	bls.n	800b63a <_printf_i+0x11a>
 800b650:	2b08      	cmp	r3, #8
 800b652:	d10b      	bne.n	800b66c <_printf_i+0x14c>
 800b654:	6823      	ldr	r3, [r4, #0]
 800b656:	07df      	lsls	r7, r3, #31
 800b658:	d508      	bpl.n	800b66c <_printf_i+0x14c>
 800b65a:	6923      	ldr	r3, [r4, #16]
 800b65c:	6861      	ldr	r1, [r4, #4]
 800b65e:	4299      	cmp	r1, r3
 800b660:	bfde      	ittt	le
 800b662:	2330      	movle	r3, #48	; 0x30
 800b664:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b668:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b66c:	1b92      	subs	r2, r2, r6
 800b66e:	6122      	str	r2, [r4, #16]
 800b670:	f8cd a000 	str.w	sl, [sp]
 800b674:	464b      	mov	r3, r9
 800b676:	aa03      	add	r2, sp, #12
 800b678:	4621      	mov	r1, r4
 800b67a:	4640      	mov	r0, r8
 800b67c:	f7ff fee2 	bl	800b444 <_printf_common>
 800b680:	3001      	adds	r0, #1
 800b682:	d14c      	bne.n	800b71e <_printf_i+0x1fe>
 800b684:	f04f 30ff 	mov.w	r0, #4294967295
 800b688:	b004      	add	sp, #16
 800b68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68e:	4835      	ldr	r0, [pc, #212]	; (800b764 <_printf_i+0x244>)
 800b690:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	680e      	ldr	r6, [r1, #0]
 800b698:	061f      	lsls	r7, r3, #24
 800b69a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b69e:	600e      	str	r6, [r1, #0]
 800b6a0:	d514      	bpl.n	800b6cc <_printf_i+0x1ac>
 800b6a2:	07d9      	lsls	r1, r3, #31
 800b6a4:	bf44      	itt	mi
 800b6a6:	f043 0320 	orrmi.w	r3, r3, #32
 800b6aa:	6023      	strmi	r3, [r4, #0]
 800b6ac:	b91d      	cbnz	r5, 800b6b6 <_printf_i+0x196>
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	f023 0320 	bic.w	r3, r3, #32
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	2310      	movs	r3, #16
 800b6b8:	e7b0      	b.n	800b61c <_printf_i+0xfc>
 800b6ba:	6823      	ldr	r3, [r4, #0]
 800b6bc:	f043 0320 	orr.w	r3, r3, #32
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	2378      	movs	r3, #120	; 0x78
 800b6c4:	4828      	ldr	r0, [pc, #160]	; (800b768 <_printf_i+0x248>)
 800b6c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6ca:	e7e3      	b.n	800b694 <_printf_i+0x174>
 800b6cc:	065e      	lsls	r6, r3, #25
 800b6ce:	bf48      	it	mi
 800b6d0:	b2ad      	uxthmi	r5, r5
 800b6d2:	e7e6      	b.n	800b6a2 <_printf_i+0x182>
 800b6d4:	4616      	mov	r6, r2
 800b6d6:	e7bb      	b.n	800b650 <_printf_i+0x130>
 800b6d8:	680b      	ldr	r3, [r1, #0]
 800b6da:	6826      	ldr	r6, [r4, #0]
 800b6dc:	6960      	ldr	r0, [r4, #20]
 800b6de:	1d1d      	adds	r5, r3, #4
 800b6e0:	600d      	str	r5, [r1, #0]
 800b6e2:	0635      	lsls	r5, r6, #24
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	d501      	bpl.n	800b6ec <_printf_i+0x1cc>
 800b6e8:	6018      	str	r0, [r3, #0]
 800b6ea:	e002      	b.n	800b6f2 <_printf_i+0x1d2>
 800b6ec:	0671      	lsls	r1, r6, #25
 800b6ee:	d5fb      	bpl.n	800b6e8 <_printf_i+0x1c8>
 800b6f0:	8018      	strh	r0, [r3, #0]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	6123      	str	r3, [r4, #16]
 800b6f6:	4616      	mov	r6, r2
 800b6f8:	e7ba      	b.n	800b670 <_printf_i+0x150>
 800b6fa:	680b      	ldr	r3, [r1, #0]
 800b6fc:	1d1a      	adds	r2, r3, #4
 800b6fe:	600a      	str	r2, [r1, #0]
 800b700:	681e      	ldr	r6, [r3, #0]
 800b702:	6862      	ldr	r2, [r4, #4]
 800b704:	2100      	movs	r1, #0
 800b706:	4630      	mov	r0, r6
 800b708:	f7f4 fd92 	bl	8000230 <memchr>
 800b70c:	b108      	cbz	r0, 800b712 <_printf_i+0x1f2>
 800b70e:	1b80      	subs	r0, r0, r6
 800b710:	6060      	str	r0, [r4, #4]
 800b712:	6863      	ldr	r3, [r4, #4]
 800b714:	6123      	str	r3, [r4, #16]
 800b716:	2300      	movs	r3, #0
 800b718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b71c:	e7a8      	b.n	800b670 <_printf_i+0x150>
 800b71e:	6923      	ldr	r3, [r4, #16]
 800b720:	4632      	mov	r2, r6
 800b722:	4649      	mov	r1, r9
 800b724:	4640      	mov	r0, r8
 800b726:	47d0      	blx	sl
 800b728:	3001      	adds	r0, #1
 800b72a:	d0ab      	beq.n	800b684 <_printf_i+0x164>
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	079b      	lsls	r3, r3, #30
 800b730:	d413      	bmi.n	800b75a <_printf_i+0x23a>
 800b732:	68e0      	ldr	r0, [r4, #12]
 800b734:	9b03      	ldr	r3, [sp, #12]
 800b736:	4298      	cmp	r0, r3
 800b738:	bfb8      	it	lt
 800b73a:	4618      	movlt	r0, r3
 800b73c:	e7a4      	b.n	800b688 <_printf_i+0x168>
 800b73e:	2301      	movs	r3, #1
 800b740:	4632      	mov	r2, r6
 800b742:	4649      	mov	r1, r9
 800b744:	4640      	mov	r0, r8
 800b746:	47d0      	blx	sl
 800b748:	3001      	adds	r0, #1
 800b74a:	d09b      	beq.n	800b684 <_printf_i+0x164>
 800b74c:	3501      	adds	r5, #1
 800b74e:	68e3      	ldr	r3, [r4, #12]
 800b750:	9903      	ldr	r1, [sp, #12]
 800b752:	1a5b      	subs	r3, r3, r1
 800b754:	42ab      	cmp	r3, r5
 800b756:	dcf2      	bgt.n	800b73e <_printf_i+0x21e>
 800b758:	e7eb      	b.n	800b732 <_printf_i+0x212>
 800b75a:	2500      	movs	r5, #0
 800b75c:	f104 0619 	add.w	r6, r4, #25
 800b760:	e7f5      	b.n	800b74e <_printf_i+0x22e>
 800b762:	bf00      	nop
 800b764:	0800bc51 	.word	0x0800bc51
 800b768:	0800bc62 	.word	0x0800bc62

0800b76c <memmove>:
 800b76c:	4288      	cmp	r0, r1
 800b76e:	b510      	push	{r4, lr}
 800b770:	eb01 0402 	add.w	r4, r1, r2
 800b774:	d902      	bls.n	800b77c <memmove+0x10>
 800b776:	4284      	cmp	r4, r0
 800b778:	4623      	mov	r3, r4
 800b77a:	d807      	bhi.n	800b78c <memmove+0x20>
 800b77c:	1e43      	subs	r3, r0, #1
 800b77e:	42a1      	cmp	r1, r4
 800b780:	d008      	beq.n	800b794 <memmove+0x28>
 800b782:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b78a:	e7f8      	b.n	800b77e <memmove+0x12>
 800b78c:	4402      	add	r2, r0
 800b78e:	4601      	mov	r1, r0
 800b790:	428a      	cmp	r2, r1
 800b792:	d100      	bne.n	800b796 <memmove+0x2a>
 800b794:	bd10      	pop	{r4, pc}
 800b796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b79a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b79e:	e7f7      	b.n	800b790 <memmove+0x24>

0800b7a0 <_free_r>:
 800b7a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7a2:	2900      	cmp	r1, #0
 800b7a4:	d048      	beq.n	800b838 <_free_r+0x98>
 800b7a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7aa:	9001      	str	r0, [sp, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f1a1 0404 	sub.w	r4, r1, #4
 800b7b2:	bfb8      	it	lt
 800b7b4:	18e4      	addlt	r4, r4, r3
 800b7b6:	f000 f8d3 	bl	800b960 <__malloc_lock>
 800b7ba:	4a20      	ldr	r2, [pc, #128]	; (800b83c <_free_r+0x9c>)
 800b7bc:	9801      	ldr	r0, [sp, #4]
 800b7be:	6813      	ldr	r3, [r2, #0]
 800b7c0:	4615      	mov	r5, r2
 800b7c2:	b933      	cbnz	r3, 800b7d2 <_free_r+0x32>
 800b7c4:	6063      	str	r3, [r4, #4]
 800b7c6:	6014      	str	r4, [r2, #0]
 800b7c8:	b003      	add	sp, #12
 800b7ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7ce:	f000 b8cd 	b.w	800b96c <__malloc_unlock>
 800b7d2:	42a3      	cmp	r3, r4
 800b7d4:	d90b      	bls.n	800b7ee <_free_r+0x4e>
 800b7d6:	6821      	ldr	r1, [r4, #0]
 800b7d8:	1862      	adds	r2, r4, r1
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	bf04      	itt	eq
 800b7de:	681a      	ldreq	r2, [r3, #0]
 800b7e0:	685b      	ldreq	r3, [r3, #4]
 800b7e2:	6063      	str	r3, [r4, #4]
 800b7e4:	bf04      	itt	eq
 800b7e6:	1852      	addeq	r2, r2, r1
 800b7e8:	6022      	streq	r2, [r4, #0]
 800b7ea:	602c      	str	r4, [r5, #0]
 800b7ec:	e7ec      	b.n	800b7c8 <_free_r+0x28>
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	b10b      	cbz	r3, 800b7f8 <_free_r+0x58>
 800b7f4:	42a3      	cmp	r3, r4
 800b7f6:	d9fa      	bls.n	800b7ee <_free_r+0x4e>
 800b7f8:	6811      	ldr	r1, [r2, #0]
 800b7fa:	1855      	adds	r5, r2, r1
 800b7fc:	42a5      	cmp	r5, r4
 800b7fe:	d10b      	bne.n	800b818 <_free_r+0x78>
 800b800:	6824      	ldr	r4, [r4, #0]
 800b802:	4421      	add	r1, r4
 800b804:	1854      	adds	r4, r2, r1
 800b806:	42a3      	cmp	r3, r4
 800b808:	6011      	str	r1, [r2, #0]
 800b80a:	d1dd      	bne.n	800b7c8 <_free_r+0x28>
 800b80c:	681c      	ldr	r4, [r3, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	6053      	str	r3, [r2, #4]
 800b812:	4421      	add	r1, r4
 800b814:	6011      	str	r1, [r2, #0]
 800b816:	e7d7      	b.n	800b7c8 <_free_r+0x28>
 800b818:	d902      	bls.n	800b820 <_free_r+0x80>
 800b81a:	230c      	movs	r3, #12
 800b81c:	6003      	str	r3, [r0, #0]
 800b81e:	e7d3      	b.n	800b7c8 <_free_r+0x28>
 800b820:	6825      	ldr	r5, [r4, #0]
 800b822:	1961      	adds	r1, r4, r5
 800b824:	428b      	cmp	r3, r1
 800b826:	bf04      	itt	eq
 800b828:	6819      	ldreq	r1, [r3, #0]
 800b82a:	685b      	ldreq	r3, [r3, #4]
 800b82c:	6063      	str	r3, [r4, #4]
 800b82e:	bf04      	itt	eq
 800b830:	1949      	addeq	r1, r1, r5
 800b832:	6021      	streq	r1, [r4, #0]
 800b834:	6054      	str	r4, [r2, #4]
 800b836:	e7c7      	b.n	800b7c8 <_free_r+0x28>
 800b838:	b003      	add	sp, #12
 800b83a:	bd30      	pop	{r4, r5, pc}
 800b83c:	2000009c 	.word	0x2000009c

0800b840 <_malloc_r>:
 800b840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b842:	1ccd      	adds	r5, r1, #3
 800b844:	f025 0503 	bic.w	r5, r5, #3
 800b848:	3508      	adds	r5, #8
 800b84a:	2d0c      	cmp	r5, #12
 800b84c:	bf38      	it	cc
 800b84e:	250c      	movcc	r5, #12
 800b850:	2d00      	cmp	r5, #0
 800b852:	4606      	mov	r6, r0
 800b854:	db01      	blt.n	800b85a <_malloc_r+0x1a>
 800b856:	42a9      	cmp	r1, r5
 800b858:	d903      	bls.n	800b862 <_malloc_r+0x22>
 800b85a:	230c      	movs	r3, #12
 800b85c:	6033      	str	r3, [r6, #0]
 800b85e:	2000      	movs	r0, #0
 800b860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b862:	f000 f87d 	bl	800b960 <__malloc_lock>
 800b866:	4921      	ldr	r1, [pc, #132]	; (800b8ec <_malloc_r+0xac>)
 800b868:	680a      	ldr	r2, [r1, #0]
 800b86a:	4614      	mov	r4, r2
 800b86c:	b99c      	cbnz	r4, 800b896 <_malloc_r+0x56>
 800b86e:	4f20      	ldr	r7, [pc, #128]	; (800b8f0 <_malloc_r+0xb0>)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	b923      	cbnz	r3, 800b87e <_malloc_r+0x3e>
 800b874:	4621      	mov	r1, r4
 800b876:	4630      	mov	r0, r6
 800b878:	f000 f862 	bl	800b940 <_sbrk_r>
 800b87c:	6038      	str	r0, [r7, #0]
 800b87e:	4629      	mov	r1, r5
 800b880:	4630      	mov	r0, r6
 800b882:	f000 f85d 	bl	800b940 <_sbrk_r>
 800b886:	1c43      	adds	r3, r0, #1
 800b888:	d123      	bne.n	800b8d2 <_malloc_r+0x92>
 800b88a:	230c      	movs	r3, #12
 800b88c:	6033      	str	r3, [r6, #0]
 800b88e:	4630      	mov	r0, r6
 800b890:	f000 f86c 	bl	800b96c <__malloc_unlock>
 800b894:	e7e3      	b.n	800b85e <_malloc_r+0x1e>
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	1b5b      	subs	r3, r3, r5
 800b89a:	d417      	bmi.n	800b8cc <_malloc_r+0x8c>
 800b89c:	2b0b      	cmp	r3, #11
 800b89e:	d903      	bls.n	800b8a8 <_malloc_r+0x68>
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	441c      	add	r4, r3
 800b8a4:	6025      	str	r5, [r4, #0]
 800b8a6:	e004      	b.n	800b8b2 <_malloc_r+0x72>
 800b8a8:	6863      	ldr	r3, [r4, #4]
 800b8aa:	42a2      	cmp	r2, r4
 800b8ac:	bf0c      	ite	eq
 800b8ae:	600b      	streq	r3, [r1, #0]
 800b8b0:	6053      	strne	r3, [r2, #4]
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f000 f85a 	bl	800b96c <__malloc_unlock>
 800b8b8:	f104 000b 	add.w	r0, r4, #11
 800b8bc:	1d23      	adds	r3, r4, #4
 800b8be:	f020 0007 	bic.w	r0, r0, #7
 800b8c2:	1ac2      	subs	r2, r0, r3
 800b8c4:	d0cc      	beq.n	800b860 <_malloc_r+0x20>
 800b8c6:	1a1b      	subs	r3, r3, r0
 800b8c8:	50a3      	str	r3, [r4, r2]
 800b8ca:	e7c9      	b.n	800b860 <_malloc_r+0x20>
 800b8cc:	4622      	mov	r2, r4
 800b8ce:	6864      	ldr	r4, [r4, #4]
 800b8d0:	e7cc      	b.n	800b86c <_malloc_r+0x2c>
 800b8d2:	1cc4      	adds	r4, r0, #3
 800b8d4:	f024 0403 	bic.w	r4, r4, #3
 800b8d8:	42a0      	cmp	r0, r4
 800b8da:	d0e3      	beq.n	800b8a4 <_malloc_r+0x64>
 800b8dc:	1a21      	subs	r1, r4, r0
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f000 f82e 	bl	800b940 <_sbrk_r>
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	d1dd      	bne.n	800b8a4 <_malloc_r+0x64>
 800b8e8:	e7cf      	b.n	800b88a <_malloc_r+0x4a>
 800b8ea:	bf00      	nop
 800b8ec:	2000009c 	.word	0x2000009c
 800b8f0:	200000a0 	.word	0x200000a0

0800b8f4 <_realloc_r>:
 800b8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f6:	4607      	mov	r7, r0
 800b8f8:	4614      	mov	r4, r2
 800b8fa:	460e      	mov	r6, r1
 800b8fc:	b921      	cbnz	r1, 800b908 <_realloc_r+0x14>
 800b8fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b902:	4611      	mov	r1, r2
 800b904:	f7ff bf9c 	b.w	800b840 <_malloc_r>
 800b908:	b922      	cbnz	r2, 800b914 <_realloc_r+0x20>
 800b90a:	f7ff ff49 	bl	800b7a0 <_free_r>
 800b90e:	4625      	mov	r5, r4
 800b910:	4628      	mov	r0, r5
 800b912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b914:	f000 f830 	bl	800b978 <_malloc_usable_size_r>
 800b918:	42a0      	cmp	r0, r4
 800b91a:	d20f      	bcs.n	800b93c <_realloc_r+0x48>
 800b91c:	4621      	mov	r1, r4
 800b91e:	4638      	mov	r0, r7
 800b920:	f7ff ff8e 	bl	800b840 <_malloc_r>
 800b924:	4605      	mov	r5, r0
 800b926:	2800      	cmp	r0, #0
 800b928:	d0f2      	beq.n	800b910 <_realloc_r+0x1c>
 800b92a:	4631      	mov	r1, r6
 800b92c:	4622      	mov	r2, r4
 800b92e:	f7ff fbf7 	bl	800b120 <memcpy>
 800b932:	4631      	mov	r1, r6
 800b934:	4638      	mov	r0, r7
 800b936:	f7ff ff33 	bl	800b7a0 <_free_r>
 800b93a:	e7e9      	b.n	800b910 <_realloc_r+0x1c>
 800b93c:	4635      	mov	r5, r6
 800b93e:	e7e7      	b.n	800b910 <_realloc_r+0x1c>

0800b940 <_sbrk_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4d06      	ldr	r5, [pc, #24]	; (800b95c <_sbrk_r+0x1c>)
 800b944:	2300      	movs	r3, #0
 800b946:	4604      	mov	r4, r0
 800b948:	4608      	mov	r0, r1
 800b94a:	602b      	str	r3, [r5, #0]
 800b94c:	f7f7 fa24 	bl	8002d98 <_sbrk>
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	d102      	bne.n	800b95a <_sbrk_r+0x1a>
 800b954:	682b      	ldr	r3, [r5, #0]
 800b956:	b103      	cbz	r3, 800b95a <_sbrk_r+0x1a>
 800b958:	6023      	str	r3, [r4, #0]
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
 800b95c:	20000948 	.word	0x20000948

0800b960 <__malloc_lock>:
 800b960:	4801      	ldr	r0, [pc, #4]	; (800b968 <__malloc_lock+0x8>)
 800b962:	f000 b811 	b.w	800b988 <__retarget_lock_acquire_recursive>
 800b966:	bf00      	nop
 800b968:	20000950 	.word	0x20000950

0800b96c <__malloc_unlock>:
 800b96c:	4801      	ldr	r0, [pc, #4]	; (800b974 <__malloc_unlock+0x8>)
 800b96e:	f000 b80c 	b.w	800b98a <__retarget_lock_release_recursive>
 800b972:	bf00      	nop
 800b974:	20000950 	.word	0x20000950

0800b978 <_malloc_usable_size_r>:
 800b978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b97c:	1f18      	subs	r0, r3, #4
 800b97e:	2b00      	cmp	r3, #0
 800b980:	bfbc      	itt	lt
 800b982:	580b      	ldrlt	r3, [r1, r0]
 800b984:	18c0      	addlt	r0, r0, r3
 800b986:	4770      	bx	lr

0800b988 <__retarget_lock_acquire_recursive>:
 800b988:	4770      	bx	lr

0800b98a <__retarget_lock_release_recursive>:
 800b98a:	4770      	bx	lr
 800b98c:	0000      	movs	r0, r0
	...

0800b990 <floor>:
 800b990:	ec51 0b10 	vmov	r0, r1, d0
 800b994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b998:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b99c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b9a0:	2e13      	cmp	r6, #19
 800b9a2:	ee10 5a10 	vmov	r5, s0
 800b9a6:	ee10 8a10 	vmov	r8, s0
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	dc32      	bgt.n	800ba14 <floor+0x84>
 800b9ae:	2e00      	cmp	r6, #0
 800b9b0:	da14      	bge.n	800b9dc <floor+0x4c>
 800b9b2:	a333      	add	r3, pc, #204	; (adr r3, 800ba80 <floor+0xf0>)
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f7f4 fc90 	bl	80002dc <__adddf3>
 800b9bc:	2200      	movs	r2, #0
 800b9be:	2300      	movs	r3, #0
 800b9c0:	f7f5 f8d2 	bl	8000b68 <__aeabi_dcmpgt>
 800b9c4:	b138      	cbz	r0, 800b9d6 <floor+0x46>
 800b9c6:	2c00      	cmp	r4, #0
 800b9c8:	da57      	bge.n	800ba7a <floor+0xea>
 800b9ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b9ce:	431d      	orrs	r5, r3
 800b9d0:	d001      	beq.n	800b9d6 <floor+0x46>
 800b9d2:	4c2d      	ldr	r4, [pc, #180]	; (800ba88 <floor+0xf8>)
 800b9d4:	2500      	movs	r5, #0
 800b9d6:	4621      	mov	r1, r4
 800b9d8:	4628      	mov	r0, r5
 800b9da:	e025      	b.n	800ba28 <floor+0x98>
 800b9dc:	4f2b      	ldr	r7, [pc, #172]	; (800ba8c <floor+0xfc>)
 800b9de:	4137      	asrs	r7, r6
 800b9e0:	ea01 0307 	and.w	r3, r1, r7
 800b9e4:	4303      	orrs	r3, r0
 800b9e6:	d01f      	beq.n	800ba28 <floor+0x98>
 800b9e8:	a325      	add	r3, pc, #148	; (adr r3, 800ba80 <floor+0xf0>)
 800b9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ee:	f7f4 fc75 	bl	80002dc <__adddf3>
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f7f5 f8b7 	bl	8000b68 <__aeabi_dcmpgt>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	d0eb      	beq.n	800b9d6 <floor+0x46>
 800b9fe:	2c00      	cmp	r4, #0
 800ba00:	bfbe      	ittt	lt
 800ba02:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ba06:	fa43 f606 	asrlt.w	r6, r3, r6
 800ba0a:	19a4      	addlt	r4, r4, r6
 800ba0c:	ea24 0407 	bic.w	r4, r4, r7
 800ba10:	2500      	movs	r5, #0
 800ba12:	e7e0      	b.n	800b9d6 <floor+0x46>
 800ba14:	2e33      	cmp	r6, #51	; 0x33
 800ba16:	dd0b      	ble.n	800ba30 <floor+0xa0>
 800ba18:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ba1c:	d104      	bne.n	800ba28 <floor+0x98>
 800ba1e:	ee10 2a10 	vmov	r2, s0
 800ba22:	460b      	mov	r3, r1
 800ba24:	f7f4 fc5a 	bl	80002dc <__adddf3>
 800ba28:	ec41 0b10 	vmov	d0, r0, r1
 800ba2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba30:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ba34:	f04f 33ff 	mov.w	r3, #4294967295
 800ba38:	fa23 f707 	lsr.w	r7, r3, r7
 800ba3c:	4207      	tst	r7, r0
 800ba3e:	d0f3      	beq.n	800ba28 <floor+0x98>
 800ba40:	a30f      	add	r3, pc, #60	; (adr r3, 800ba80 <floor+0xf0>)
 800ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba46:	f7f4 fc49 	bl	80002dc <__adddf3>
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f7f5 f88b 	bl	8000b68 <__aeabi_dcmpgt>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d0bf      	beq.n	800b9d6 <floor+0x46>
 800ba56:	2c00      	cmp	r4, #0
 800ba58:	da02      	bge.n	800ba60 <floor+0xd0>
 800ba5a:	2e14      	cmp	r6, #20
 800ba5c:	d103      	bne.n	800ba66 <floor+0xd6>
 800ba5e:	3401      	adds	r4, #1
 800ba60:	ea25 0507 	bic.w	r5, r5, r7
 800ba64:	e7b7      	b.n	800b9d6 <floor+0x46>
 800ba66:	2301      	movs	r3, #1
 800ba68:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ba6c:	fa03 f606 	lsl.w	r6, r3, r6
 800ba70:	4435      	add	r5, r6
 800ba72:	4545      	cmp	r5, r8
 800ba74:	bf38      	it	cc
 800ba76:	18e4      	addcc	r4, r4, r3
 800ba78:	e7f2      	b.n	800ba60 <floor+0xd0>
 800ba7a:	2500      	movs	r5, #0
 800ba7c:	462c      	mov	r4, r5
 800ba7e:	e7aa      	b.n	800b9d6 <floor+0x46>
 800ba80:	8800759c 	.word	0x8800759c
 800ba84:	7e37e43c 	.word	0x7e37e43c
 800ba88:	bff00000 	.word	0xbff00000
 800ba8c:	000fffff 	.word	0x000fffff

0800ba90 <_init>:
 800ba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba92:	bf00      	nop
 800ba94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba96:	bc08      	pop	{r3}
 800ba98:	469e      	mov	lr, r3
 800ba9a:	4770      	bx	lr

0800ba9c <_fini>:
 800ba9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9e:	bf00      	nop
 800baa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baa2:	bc08      	pop	{r3}
 800baa4:	469e      	mov	lr, r3
 800baa6:	4770      	bx	lr
